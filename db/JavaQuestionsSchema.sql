drop database if exists JavaQuestions;

set names utf8;

-- Create database
create database JavaQuestions
	default character set utf8
	default collate utf8_unicode_ci;
use JavaQuestions;

-- Create books table
CREATE TABLE BOOKS(
	ID bigint NOT NULL,
	BOOK VARCHAR(255) character set utf8 collate utf8_unicode_ci,
	PRIMARY KEY(ID)
) default character set utf8 collate utf8_unicode_ci;

INSERT INTO BOOKS(ID, BOOK) VALUES (1, 'Java SE 7 Programer I');
INSERT INTO BOOKS(ID, BOOK) VALUES (2, 'Java SE 8 Programer I');
INSERT INTO BOOKS(ID, BOOK) VALUES (3, 'Java SE 8 Programer II');

-- Create topics table
CREATE TABLE TOPICS(
	ID bigint NOT NULL,
	TOPIC VARCHAR(255) character set utf8 collate utf8_unicode_ci,
	PRIMARY KEY(ID)
) default character set utf8 collate utf8_unicode_ci;

INSERT INTO TOPICS(ID, TOPIC) VALUES (1, 'Basics');
INSERT INTO TOPICS(ID, TOPIC) VALUES (2, 'Data types');
INSERT INTO TOPICS(ID, TOPIC) VALUES (3, 'Methods and encapsulation');
INSERT INTO TOPICS(ID, TOPIC) VALUES (4, 'String, StringBuilder, Arrays, and Arraylist');
INSERT INTO TOPICS(ID, TOPIC) VALUES (5, 'Flow control');
INSERT INTO TOPICS(ID, TOPIC) VALUES (6, 'Inheritance');
INSERT INTO TOPICS(ID, TOPIC) VALUES (7, 'Exception handling');
INSERT INTO TOPICS(ID, TOPIC) VALUES (8, 'Mock exam');
INSERT INTO TOPICS(ID, TOPIC) VALUES (9, 'Assessment Test');
INSERT INTO TOPICS(ID, TOPIC) VALUES (10, 'Java Building Blocks');
INSERT INTO TOPICS(ID, TOPIC) VALUES (11, 'Operators and Statements');
INSERT INTO TOPICS(ID, TOPIC) VALUES (12, 'Core Java APIs');
INSERT INTO TOPICS(ID, TOPIC) VALUES (13, 'Class Design');

CREATE TABLE QUESTIONS( 
    ID bigint NOT NULL,
	QUESTION text character set utf8 collate utf8_unicode_ci NOT NULL,
    CODE text character set utf8 collate utf8_unicode_ci,
    EXPLANATION text character set utf8 collate utf8_unicode_ci,
	TOPIC_ID bigint NOT NULL,
 	BOOK_ID bigint NOT NULL,
 	PRIMARY KEY(ID),
 	FOREIGN KEY(TOPIC_ID) REFERENCES TOPICS(ID),
 	FOREIGN KEY(BOOK_ID) REFERENCES BOOKS(ID)
) default character set utf8 collate utf8_unicode_ci;

INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (1, 'Examine the following content of Java source code file Multiple.java and select the correct answers:', '// Contents of Multiple.java\r\npublic interface Printable {\r\n//.. we are not detailing this part\r\n}\r\ninterface Movable {\r\n//.. we are not detailing this part\r\n}', 'Options (a) and (b) are incorrect.\r\nOption (c) is correct because a Java source code file can define multiple interfaces\r\nand classes.\r\nOption (d) is correct because a public interface or class can be defined in a\r\nJava source code file with a matching name. The public interface Printable can’t\r\nbe defined in the Java source code file, Multiple.java. It should be defined in\r\nPrintable.java.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (2, 'Examine the content of the following Java source code file, Multiple2.java, and select the correct option.', '// contents of Multiple2.java\r\ninterface Printable {\r\n//.. we are not detailing this part\r\n}\r\nclass MyClass {\r\n//.. we are not detailing this part\r\n}\r\ninterface Movable {\r\n//.. we are not detailing this part\r\n}\r\npublic class Car {\r\n//.. we are not detailing this part\r\n}\r\npublic interface Multiple2 {}', 'Option (a) is correct and (b) is incorrect because Multiple2.java won’t\r\ncompile. Multiple2.java can’t define a public class Car.\r\nOption (c) is correct because removal of the definition of the public class Car\r\nfrom Multiple2.java will leave only one public interface in Multiple2.java—Multiple2.\r\nBecause the names of the public interface Multiple2 and the source code file match,\r\nMultiple2.java will compile successfully.\r\nOption (d) is correct. Changing public class Car to a non-public class will\r\nleave only one public interface in Multiple2.java—Multiple2. Because the names\r\nof the public interface Multiple2 and source code file match, Multiple2.java will\r\ncompile successfully.\r\nOption (e) is incorrect. If you change the access modifier of the public interface\r\nMultiple2 to non-public, Multiple2.java will contain a definition of a public class\r\nCar, which isn’t allowed.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (3, 'One of the programmers, Harry, executed a program that gave the output “java one”. Now he’s trying to figure out which of the following classes outputs these results. Given that he executed the class using the command java EJava java one one, can you help him figure out the correct option(s)?', '', 'All the options in this question are supposed to execute using the command\r\njavaEJava java one one. The purpose of each of these terms is as follows:\r\n■ Term 1: java—Used to execute a Java class\r\n■ Term 2: EJava—Name of class to execute\r\n■ Term 3: java—Passed as the first argument to the method main\r\n■ Term 4: one—Passed as the second argument to main\r\n■ Term 5: one—Passed as the third argument to main\r\nTo output “java one”, the main method should output the first and either the second\r\nor third method parameters passed to it.\r\nOptions (a) and (b) are correct because they use the correct method signature of\r\nthe method main. The name of the method parameter need not be args. It can be any\r\nother valid identifier. Option (a) outputs the values of the first and third terms passed\r\nto it. Option (b) outputs the values of the first and second terms passed to it.\r\nOption (c) is incorrect because this main method accepts a two-dimensional array.\r\nHence, it won’t be treated as the main method.\r\nOption (d) is incorrect because this code won’t compile. The access modifier of a\r\nmethod (public) should be placed before its return type (void); otherwise, the code\r\nwon’t compile.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (4, 'The following task was assigned to a group of programmers: “How can you declare a class Curtain in a package building so that it isn’t visible outside the package building?”', '', 'The code submitted by Paul is incorrect because when the class Curtain is\r\ndefined with the public access modifier, it will be accessible outside the package building.\r\nThe code submitted by Shreya and Selvan is incorrect because the class Curtain is\r\na top-level class (it’s not defined within another class), so it can’t be defined using the\r\naccess modifiers protected and private.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (5, 'What are the valid components of a Java source file (choose all that apply):', '', 'The Java compiler and Java Runtime Environment aren’t components of\r\na Java source file.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (6, 'The following numbered list of Java class components is not in any particular order. Select the correct order of their occurrence in a Java class (choose all that apply):', '1 comments\r\n2 import statement\r\n3 package statement\r\n4 methods\r\n5 class declaration\r\n6 variables', 'The comments can appear anywhere in a class. They can appear before\r\nand after package and import statements. They can appear before or after a class,\r\nmethod, or variable declaration.\r\nThe first statement (if present) in a class should be a package statement. It can’t be\r\nplaced after an import statement or a declaration of a class.\r\nThe import statement should follow a package statement and be followed by a\r\nclass declaration.\r\nThe class declaration follows the import statements, if present. It’s followed by the\r\ndeclaration of the methods and variables.\r\nAnswer (c) is incorrect. None of the variables or methods can be defined before the\r\ndefinition of a class or interface.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (7, 'Which of the following examples define the correct Java class structure?', '', 'Answer (a) is incorrect because #connect isn’t a statement in Java. # is\r\nused to add comments in UNIX.\r\nOption (b) is incorrect because a package name (Java compiler) cannot contain\r\nspaces. Also, java virtual machine isn’t a valid package name to be imported in a\r\nclass. The package name to be imported cannot contain spaces.\r\nOption (c) is incorrect because a package statement should be placed before an\r\nimport statement.\r\nOption (e) is incorrect. #package and $import aren’t valid statements or directives\r\nin Java.\r\nOption (f) is incorrect. Java is case-sensitive, so the word class is not the same as\r\nthe word Class. The correct keyword to define a class is class.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (8, 'Given the following contents of the Java source code file MyClass.java, select the correct options:', '// contents of MyClass.java\r\npackage com.ejavaguru;\r\nimport java.util.Date;\r\nclass Student {}\r\nclass Course {}', 'You can define multiple classes, interfaces, and enums in a Java source\r\ncode file.\r\nOption (a) is incorrect. The import statement applies to all the classes, interfaces,\r\nand enums defined within the same Java source code file.\r\nOption (d) is incorrect. If a package statement is defined in the source code\r\nfile, all of the classes, interfaces, and enums defined within it will exist in the same\r\nJava package.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (9, 'Given the following definition of the class EJavaGuru, what is the output of the previous class, if it is executed using the following command: java EJavaGuru one two three four', 'class EJavaGuru {\r\npublic static void main(String[] args) {\r\nSystem.out.println(args[1]+":"+ args[2]+":"+ args[3]);\r\n}\r\n}', 'The command-line arguments passed to the main method of a class do\r\nnot contain the word Java and the name of the class.\r\nBecause the position of an array is zero-based, the method argument is assigned\r\nthe following values:\r\nargs[0] -> one\r\nargs[1] -> two\r\nargs[2] -> three\r\nargs[3] -> four\r\nThe class prints two:three:four.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (10, 'Which of the following options, when inserted at //INSERT CODE HERE, will print out EJavaGuru?', 'public class EJavaGuru {\r\n// INSERT CODE HERE\r\n{\r\nSystem.out.println("EJavaGuru");\r\n}\r\n}', 'Option (a) is incorrect. This option defines a valid method but not a\r\nvalid main method. The main method should be defined as a static method, which is\r\nmissing from the method declaration in option (a).\r\nOption (b) is incorrect. This option is similar to the method defined in option (a),\r\nwith one difference. In this option, the square brackets are placed after the name of\r\nthe method argument. The main method accepts an array as a method argument, and\r\nto define an array, the square brackets can be placed after either the data type or the\r\nmethod argument name.\r\nOption (c) is correct. Extra spaces in a class are ignored by the Java compiler.\r\nOption (d) is incorrect. The main method accepts an array of String as a method\r\nargument. The method in this option accepts a single String object.\r\nOption (e) is incorrect. It isn’t a valid method definition and doesn’t specify the\r\nreturn type of the method. This line of code will not compile.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (11, 'Select the correct options:', '', 'The Java Virtual Machine calls and executes the main method.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (12, 'A class Course is defined in a package com.ejavaguru. Given that the physical location of the corresponding class file is /mycode/com/ejavaguru/Course.class and execution takes place within the mycode directory, which of the following lines of code, when inserted at // INSERT CODE HERE, will import the Course class into the class MyCourse?', '// INSERT CODE HERE\r\nclass MyCourse {\r\nCourse c;\r\n}', 'Option (a) is incorrect. The path of the imported class used in an\r\nimport statement isn’t related to the class’s physical location. It reflects the package\r\nand subpackage that a class is in.\r\nOptions (c) and (e) are incorrect. The class’s physical location isn’t specified in\r\nthe import statement.\r\nOptions (d) and (f) are incorrect. ejavaguru is a package. To import a package\r\nand its members, the package name should be followed by .*, as follows:\r\nimport com.ejavaguru.*;', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (13, 'Which of the following statements will be true if the variable courseName is defined as a private variable?', 'class Course {\r\nString courseName;\r\n}\r\nclass EJavaGuru {\r\npublic static void main(String args[]) {\r\nCourse c = new Course();\r\nc.courseName = "Java";\r\nSystem.out.println(c.courseName);\r\n}\r\n}', 'If the variable courseName is defined as a private member, it won’t be\r\naccessible from the class EJavaGuru. An attempt to do so will cause it to fail at compile\r\ntime. Because the code won’t compile, it can’t execute.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (14, 'Given the following definition of the class Course, what’s the output of the following code?', 'package com.ejavaguru.courses;\r\nclass Course {\r\npublic String courseName;\r\n}\r\n\r\npackage com.ejavaguru;\r\nimport com.ejavaguru.courses.Course;\r\nclass EJavaGuru {\r\npublic static void main(String args[]) {\r\nCourse c = new Course();\r\nc.courseName = "Java";\r\nSystem.out.println(c.courseName);\r\n}\r\n}', 'The class will fail to compile because a non-public class cannot be\r\naccessed outside a package in which it is defined. The class Course therefore can’t\r\nbe accessed from within the class EJavaGuru, even if it is explicitly imported into it.\r\nIf the class itself isn’t accessible, there’s no point in accessing a public member of\r\na class.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (15, 'Given the following code, select the correct options:', 'package com.ejavaguru.courses;\r\nclass Course {\r\npublic String courseName;\r\npublic void setCourseName(private String name) {\r\ncourseName = name;\r\n}\r\n}', 'You can’t add an explicit accessibility keyword to the method parameters.\r\nIf you do, the code won’t compile.', 1, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (16, 'Determine the output of the following code:', 'class TwistInTaleNumberSystems {\r\npublic static void main (String args[]) {\r\nint baseDecimal = 267;\r\nint octVal = 0413;\r\nint hexVal = 0x10B;\r\nint binVal = 0b100001011;\r\nSystem.out.println (baseDecimal + octVal);\r\nSystem.out.println (hexVal + binVal);\r\n}\r\n}', 'Often programmers are tricked by similar questions. If a variable is\r\nassigned a value using 0b100001011 (a number in the binary number system), a programmer\r\nmight believe that System.out.println() will print out numbers in the\r\nbinary number system, which is incorrect. By default, System.out.println() will\r\nprint out a number in its decimal base. All four variables baseDecimal, octVal,\r\nhexVal, and binVal represent the decimal value 267 in the decimal, octal, hexadecimal,\r\nand binary number systems. The addition operation adds these values and prints\r\n534 twice.\r\nYou can use a method from the class Integer to print out a value in the binary\r\nnumber system as follows:\r\nSystem.out.println(Integer.toBinaryString(0b100001011));\r\nNote that the class Integer isn’t on this exam and you won’t be asked any questions\r\non it. This class is mentioned only for your reference.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (17, 'Determine which of these does this job correctly:', '', 'The literal value 0_x_4_13 defined by var2 is incorrect because it uses\r\nunderscores after the starting 0 and after the letter x, neither of which is allowed. The\r\ncorrect value is 0x4_13.\r\nThe literal value 0b_x10_BA_75 defined by var3 is incorrect. You can’t place an\r\nunderscore right after the prefixes 0b and 0B that are used to define binary literal values.\r\nAlso, a binary value can contain only the digits 1 and 0.\r\nThe literal value 0b_10000_10_11 defined by value var4 is incorrect. You can’t\r\nplace an underscore right after the prefixes 0b and 0B used to define binary literal values.\r\nThe correct value is 0b10000_10_11.\r\nThe literal value 0xa10_AG_75 defined by var5 is incorrect because it uses the\r\nletter G, which isn’t allowed in a hexadecimal number system. A correct value is\r\n0xa10_A_75.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (18, 'Examine the following code initializations and select the incorrect answers:', 'public class Foo {\r\npublic static void main (String args[]) {\r\nboolean b1, b2, b3, b4, b5, b6; // line 1\r\nb1 = b2 = b3 = true; // line 2\r\nb4 = 0; // line 3\r\nb5 = ''false''; // line 4\r\nb6 = yes; // line 5\r\n}\r\n}', 'Options (a) and (b) are incorrect statements. You can define multiple\r\nvariables of the same type on the same line. Also, you can assign values to variables of\r\ncompatible types on the same line of code. Assignment starts from right to left. For\r\nproof, the following lines of code will compile:\r\nint int1;\r\nlong long2;\r\nlong2 = int1 = 10;\r\nBut the following lines of code won’t compile:\r\nint i1;\r\nlong l2;\r\nint1 = long2 = 10;\r\nIn the final line of the preceding code, a literal value 10 is assigned to the variable\r\nlong2 of type long, which is acceptable. An attempt to assign the value of the variable\r\nlong2 to int1 fails because it would need an explicit cast.\r\nOption (c) is an incorrect statement because a literal value 0 can’t be assigned to a\r\nvariable of type boolean.\r\nOption (d) is a correct statement.\r\nOption (e) is an incorrect statement. The code doesn’t define a variable with the\r\nname yes and thus seems to treat it like a literal value. Java doesn’t define a literal\r\nvalue yes, so the code doesn’t compile.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (19, 'Your task is to evaluate the modified expression and determine the output of the following code:', 'int a = 10;\r\na = ++a + a + --a - --a + a++;\r\nSystem.out.println (a);', '32', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (20, 'Examine the following code and circle the expressions that you think will evaluate. Draw a square around the expressions that you think may not execute. (For example, on line 1, both a++ > 10 and ++b < 30 will evaluate .)', 'class TwistInTaleLLogicalOperators {\r\npublic static void main (String args[]) {\r\nint a = 10;\r\nint b = 20;\r\nint c = 40;\r\nSystem.out.println(a++ > 10 || ++b < 30); // line1\r\nSystem.out.println(a > 90 && ++b < 30);\r\nSystem.out.println(!(c>20) && a==10 );\r\nSystem.out.println(a >= 99 || a <= 33 && b == 10);\r\nSystem.out.println(a >= 99 && a <= 33 || b == 10);\r\n}\r\n}', 'Both of the short-circuit operators, && and ||, will evaluate their first\r\noperand. For the short-circuit operator &&, if the first operand evaluates to false, it\r\nwon’t evaluate the second operator. For the short-circuit operator ||, if the first operand\r\nevaluates to true, it won’t evaluate the second operator.\r\nFor the expression (a++ > 10 || ++b < 30), because a++ > 10 evaluates to false,\r\nboth operands will evaluate.\r\nFor the expression (a > 90 && ++b < 30), because a > 90 evaluates to false, the second\r\noperand won’t execute.\r\nFor expression (!(c > 20) && a == 10), because !(c > 20) evaluates to false, the\r\nsecond operand won’t execute.\r\nThe expression (a >= 99 || a <= 33 && b == 10) has three operands together with\r\nthe OR (||) and AND (&&) short-circuit operators. Because the short-circuit operator\r\nAND has higher operator precedence than the short-circuit operator OR, the expression\r\nis evaluated as follows:\r\n(a >= 99 || (a <= 33 && b == 10))\r\nEvaluation of the preceding expression starts with the evaluation of (a <= 33 && b == 10).\r\nBecause a <= 33 evaluates to true, the operator && evaluates the second operand (b == 10)\r\nto determine whether (a <= 33 && b == 10) will return true or false. a <= 33 returns true\r\nand b == 10 returns false, so the expression (a <= 33 && b == 10) returns false.\r\nThe original expression—(a >= 99 || (a <= 33 && b == 10))—is now reduced to the\r\nfollowing expression:\r\n(a >= 99 || false)\r\nThe short-circuit operator OR (||) executes its first operand (even if the value of the\r\nsecond operand is known), evaluating a >= 99. So for this expression, all three operands\r\nare evaluated.\r\nThe expression (a >= 99 && a <= 33 || b == 10) also has three operands, together\r\nwith OR and AND short-circuit operators. Because the short-circuit operator AND has a\r\nhigher operator precedence than the short-circuit operator OR, this expression is evaluated\r\nas follows:\r\n((a >= 99 && a <= 33) || b == 10 )\r\na >= 99 evaluates to false, so the next operand (a <= 33) isn’t evaluated. Because the\r\nfirst operand to operator ||, a >= 99 && a <= 33), evaluates to false, b == 10 is evaluated.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (21, 'Select all incorrect statements:', '', 'Only option (a) is a correct statement. Java primitive data types are predefined\r\nby the programming language. They can’t be defined by a programmer.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (22, 'Which of the options are correct for the following code?', 'public class Prim { // line 1\r\npublic static void main(String[] args) { // line 2\r\nchar a = ''a''; // line 3\r\nchar b = -10; // line 4\r\nchar c = ''1''; // line 5\r\ninteger d = 1000; // line 6\r\nSystem.out.println(++a + b++ * c - d); // line 7\r\n} // line 8\r\n} // line 9', 'Option (a) is correct. The code at line 4 fails to compile because you can’t assign a\r\nnegative value to a primitive char data type without casting.\r\nOption (c) is correct. There is no primitive data type with the name “integer.” The\r\nvalid data types are int and Integer (a wrapper class with I in uppercase).\r\nOption (d) is correct. The variable d remains undefined on line 7 because its declaration\r\nfails to compile on line 6. So the arithmetic expression (++a + b++ * c - d)\r\nthat uses variable d fails to compile. There are no issues with using the variable c of\r\nthe char data type in an arithmetic expression. The char data types are internally\r\nstored as unsigned integer values and can be used in arithmetic expressions.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (23, 'What is the output of the following code?', 'public class Foo {\r\npublic static void main(String[] args) {\r\nint a = 10;\r\nlong b = 20;\r\nshort c = 30;\r\nSystem.out.println(++a + b++ * c);\r\n}\r\n}', 'The prefix increment operator (++) used with the variable a will increment\r\nits value before it is used in the expression ++a + b++ * c. The postfix increment\r\noperator (++) used with the variable b will increment its value after its initial value is\r\nused in the expression ++a + b++ * c.\r\nTherefore, the expression ++a + b++ * c, evaluates with the following values:\r\n11 + 20 * 30\r\nBecause the multiplication operator has a higher precedence than the addition operator,\r\nthe values 20 and 30 are multiplied before the result is added to the value 11.\r\nThe example expression evaluates as follows:\r\n(++a + b++ * c)\r\n= 11 + 20 * 30\r\n= 11 + 600\r\n= 611', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (24, 'Select the option(s) that is/are the best choice for the following: ___________________ should be used to store a count of cars manufactured by a car manufacturing company. _________________ should be used to store whether this car manufacturing company modifies the interiors on the customer’s request. ____________ should be used to store the maximum speed of a car.', '', 'Options (a) and (d) are correct. Use a long data type to store big number values, a\r\nboolean data type to store yes/no values as true/false, and a double or float to\r\nstore decimal numbers.\r\nOption (b) is incorrect. You can’t use an int to store yes/no or true/false values.\r\nOption (c) is incorrect. You can’t use a char data type to store very long values (such\r\nas the count of cars manufactured by the car manufacturer until a certain date). Also,\r\nit’s conceptually incorrect to track counts using the char data type.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (25, 'Which of the following options contain correct code to declare and initialize variables to store whole numbers?', '', 'Options (a) and (b) are incorrect. There are no primitive data types in Java with\r\nthe names bit and integer. The correct names are byte and int.\r\nOption (c) is correct. It assigns a hexadecimal literal value to the variable a3.\r\nOption (d) is correct. It assigns an octal literal value to the variable a4.\r\nOption (e) is incorrect. It defines a variable of type double, which is used to store\r\ndecimal numbers, not integers.\r\nOption (f) is correct. -0 is a valid literal value.\r\nOption (g) is correct. 123456789 is a valid integer literal value that can be assigned\r\nto a variable of type long.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (26, 'Select the options that, when inserted at // INSERT CODE HERE, will make the following code output a value of 11:', 'public class IncrementNum {\r\npublic static void main(String[] args) {\r\nint ctr = 50;\r\n// INSERT CODE HERE\r\nSystem.out.println(ctr % 20);\r\n}\r\n}', 'To output a value of 11, the value of the variable ctr should be 51\r\nbecause 51%20 is 11. Operator % outputs the remainder from a division operation. The\r\ncurrent value of the variable ctr is 50. It can be incremented by 1 using the correct\r\nassignment or increment operator.\r\nOption (b) is incorrect. Java does not define a =+ operator. The correct operator is +=.\r\nOption (d) is incorrect because it’s assigning a value of 1 to the variable result, not\r\nincrementing it by 1.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (27, 'What is the output of the following code?', 'int a = 10;\r\nint b = 20;\r\nint c = (a * (b + 2)) - 10-4 * ((2*2) - 6;\r\nSystem.out.println(c);', 'First of all, whenever you answer any question that uses parentheses to\r\noverride operator precedence, check whether the number of opening parentheses\r\nmatches the number of closing parentheses. This code will not compile because the\r\nnumber of opening parentheses does not match the number of closing parentheses.\r\nSecond, you may not have to answer complex expressions in the real exam. Whenever\r\nyou see overly complex code, look for other possible issues in the code. Complex\r\ncode may be used to distract your attention from the real issue.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (28, 'What is true about the following lines of code?', 'boolean b = false;\r\nint i = 90;\r\nSystem.out.println(i >= b);', 'The code will fail to compile; hence, it can’t execute. You can’t compare\r\nincomparable types, such as a boolean value with a number.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (29, 'Examine the following code and select the correct options:', 'public class Prim { // line 1\r\npublic static void main(String[] args) { // line 2\r\nint num1 = 12; // line 3\r\nfloat num2 = 17.8f; // line 4\r\nboolean eJavaResult = true; // line 5\r\nboolean returnVal = num1 >= 12 && num2 < 4.567 // line 6\r\n|| eJavaResult == true;\r\nSystem.out.println(returnVal); // line 7\r\n} // line 8\r\n}', 'Option (a) is incorrect because the code prints true.\r\nOption (d) is incorrect because the code prints false.\r\nBoth the short-circuit operators && and || have the same operator precedence. In\r\nthe absence of any parentheses, they are evaluated from left to right. The first expression,\r\nnum1 >= 12, evaluates to true. The && operator evaluates the second operand\r\nonly if the first evaluates to true. Because && returns true for its first operand, it evaluates\r\nthe second operand, which is (num2 < 4.567 || eJavaResult == true). The second\r\noperand evaluates to true; hence the variable returnVal is assigned true.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (30, 'If the functionality of the operators = and > were to be swapped in Java (for the code on line numbers 4, 5, and 6), what would be the result of the following code?', 'boolean myBool = false; // line 1\r\nint yourInt = 10; // line 2\r\nfloat hisFloat = 19.54f; // line 3\r\nSystem.out.println(hisFloat > yourInt); // line 4\r\nSystem.out.println(yourInt = 10); // line 5\r\nSystem.out.println(myBool > false); // line 6', 'Because the question mentioned swapping the functionality of the operator\r\n> with =, the code on lines 4, 5, and 6 will actually evaluate to the following:\r\nSystem.out.println(hisFloat = yourInt);\r\nSystem.out.println(yourInt > 10);\r\nSystem.out.println(myBool = false);\r\nThe result is shown in b.\r\nNote that the expression myBool = false uses the assignment operator (=) and not\r\na comparison operator (==). This expression assigns boolean literal false to myBool;\r\nit doesn’t compare false with myBool. Watch out for similar (trick) assignments in the\r\nexam, which may seem to be comparing values.', 2, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (31, 'The class Phone defines a local variable and an instance variable, phoneNumber, with the same name. Examine the definition of the method setNumber. Execute the class on your system and select the correct output of the class TestPhone from the given options:', 'class Phone {\r\nString phoneNumber = "123456789";\r\nvoid setNumber () {\r\nString phoneNumber;\r\nphoneNumber = "987654321";\r\n}\r\n}\r\nclass TestPhone {\r\npublic static void main(String[] args) {\r\nPhone p1 = new Phone();\r\np1.setNumber();\r\nSystem.out.println (p1.phoneNumber);\r\n}\r\n}', 'The class Phone defines an instance variable with the name phoneNumber.\r\nThe method setNumber also defines a local variable phoneNumber and assigns a value\r\nto its local variable. A local variable takes precedence over an instance variable\r\ndefined in the class with the same names. Because there is no change in the value of\r\nthe instance variable phoneNumber, 123456789 is printed to the console from the\r\nmethod main, defined in the class TestPhone.', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (32, 'What is the output of this modified code, and why?', 'class Employee {\r\nString name;\r\nint age;\r\nEmployee() {\r\nthis ();\r\n}\r\nEmployee (String newName, int newAge) {\r\nname = newName;\r\nage = newAge;\r\n}\r\n}', 'The code fails to compile, with the following compilation error message: Employee.java:4: error: recursive constructor invocation Employee() {', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (33, 'Given the following definition of class Phone, which of the options, when replacing the code on lines 1–3, makes it a wellencapsulated class?', 'class Phone {\r\npublic String model;\r\ndouble weight; //LINE1\r\npublic void setWeight(double w) {weight = w;} //LINE2\r\npublic double getWeight() {return weight;} //LINE3\r\n}', 'This question tries to trick you by defining options that play with multiple\r\naccess modifiers for methods getWeight and setWeight. Because the instance variable\r\nmodel of the class Phone is defined using the public access modifier, it’s accessible\r\noutside this class. So Phone isn’t a well-encapsulated class.', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (34, 'How can you include encapsulation in your class design?', '', 'A well-encapsulated class should be like a capsule, hiding its instance\r\nvariables from the outside world. The only way you should access and modify\r\ninstance variables is through the public methods of a class to ensure that the outside\r\nworld can access only the variables the class allows it to. By defining methods to\r\nassign values to its instance variables, a class can control the range of values that can\r\nbe assigned to them.', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (35, 'Examine the following code and select the correct option(s):', 'public class Person {\r\npublic int height;\r\npublic void setHeight(int newHeight) {\r\nif (newHeight <= 300)\r\nheight = newHeight;\r\n}\r\n}', 'This class isn’t well encapsulated because its instance variable height is\r\ndefined as a public member. Because the instance variable can be directly accessed\r\nby other classes, the variable doesn’t always use the method setHeight to set its\r\nheight. The class Person can’t control the values that can be assigned to its public\r\nvariable height.', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (36, 'Which of the following methods correctly accepts three whole numbers as method arguments and returns their sum as a decimal number?', '', 'Option (a) is incorrect. The question specifies the method should return a\r\ndecimal number (type double or float), but this method doesn’t return any value.\r\nOption (b) is correct. This method accepts three integer values: byte, int, and\r\nint. It computes the sum of these integer values and returns it as a decimal number\r\n(data type double). Note that the name of the method is subtractNumbers, which\r\ndoesn’t make it an invalid option. Practically, one wouldn’t name a method subtract-\r\nNumbers if it’s adding them. But syntactically and technically, this option meets the\r\nquestion’s requirements and is a correct option.\r\nOption (c) is incorrect. This method doesn’t accept integers as the method arguments.\r\nThe type of the method argument arg3 is double, which isn’t an integer.\r\nOption (d) is correct. Even though the name of the method seems weird, it\r\naccepts the correct argument list (all integers) and returns the result in the correct\r\ndata type (float).', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (37, 'Which of the following statements are true?', '', 'Option (e) is incorrect. There is no constraint on the number of arguments\r\nthat can be passed on to a method, regardless of whether the method returns\r\na value.\r\nOption (f) is incorrect. You can’t return the value null for methods that return\r\nprimitive data types. You can return null for methods that return objects (String is a\r\nclass and not a primitive data type).', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (38, 'what is the output of the following code?', 'class Person {\r\npublic String name;\r\npublic int height;\r\n}\r\n\r\nclass EJavaGuruPassObjects1 {\r\npublic static void main(String args[]) {\r\nPerson p = new Person();\r\np.name = "EJava";\r\nanotherMethod(p);\r\nSystem.out.println(p.name);\r\nsomeMethod(p);\r\nSystem.out.println(p.name);\r\n}\r\nstatic void someMethod(Person p) {\r\np.name = "someMethod";\r\nSystem.out.println(p.name);\r\n}\r\nstatic void anotherMethod(Person p) {\r\np = new Person();\r\np.name = "anotherMethod";\r\nSystem.out.println(p.name);\r\n}\r\n}', 'The class EJavaGuruPassObject1 defines two methods, someMethod and\r\nanotherMethod. The method someMethod modifies the value of the object parameter\r\npassed to it. Hence, the changes are visible within this method and in the calling\r\nmethod (method main). But the method anotherMethod reassigns the reference variable\r\npassed to it. Changes to any of the values of this object are limited to this method.\r\nThey aren’t reflected in the calling method (the main method).', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (39, 'What is the output of the following code?', 'class EJavaGuruPassPrim {\r\npublic static void main(String args[]) {\r\nint ejg = 10;\r\nanotherMethod(ejg);\r\nSystem.out.println(ejg);\r\nsomeMethod(ejg);\r\nSystem.out.println(ejg);\r\n}\r\nstatic void someMethod(int val) {\r\n++val;\r\nSystem.out.println(val);\r\n}\r\nstatic void anotherMethod(int val) {\r\nval = 20;\r\nSystem.out.println(val);\r\n}\r\n}', 'When primitive data types are passed to a method, the values of the variables\r\nin the calling method remain the same. This behavior doesn’t depend on\r\nwhether the primitive values are reassigned other values or modified by addition, subtraction,\r\nor multiplication—or any other operation.', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (40, 'Given the following signature of method eJava, choose the options that correctly overload this method:', 'public String eJava(int age, String name, double duration)', 'Option (a) is incorrect. Overloaded methods can change the access\r\nmodifiers, but changing the access modifier alone won’t make it an overloaded\r\nmethod. This option also changes the names of the method parameters, but that\r\ndoesn’t make any difference to a method signature.\r\nOption (b) is incorrect. Overloaded methods can change the return type of the\r\nmethod, but changing the return type won’t make it an overloaded method.\r\nOption (c) is correct. Changing the placement of the types of the method parameters\r\noverloads it.\r\nOption (d) is correct. Changing the return type of a method and the placement of\r\nthe types of the method parameters overloads it.\r\nOption (e) is correct. Changing the return type of a method and making a change\r\nin the parameter list overload it.\r\nOption (f) is correct. Changing the return type of a method and making a change\r\nin the parameter list overload it.\r\nOption (g) is correct. Changing the parameter list also overloads a method.', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (41, 'what is the output of the following code?', 'class Course {\r\nvoid enroll(long duration) {\r\nSystem.out.println("long");\r\n}\r\nvoid enroll(int duration) {\r\nSystem.out.println("int");\r\n}\r\nvoid enroll(String s) {\r\nSystem.out.println("String");\r\n}\r\nvoid enroll(Object o) {\r\nSystem.out.println("Object");\r\n}\r\n}\r\n\r\nclass EJavaGuru {\r\npublic static void main(String args[]) {\r\nCourse course = new Course();\r\nchar c = 10;\r\ncourse.enroll(c);\r\ncourse.enroll("Object");\r\n}\r\n}', 'No compilation issues exist with the code. You can overload methods by\r\nchanging the type of the method arguments in the list. Using method arguments with\r\ndata types having a base-derived class relationship (Object and String classes) is\r\nacceptable. Using method arguments with data types for which one can be automatically\r\nconverted to the other (int and long) is also acceptable.\r\nWhen the code executes course.enroll(c), char can be passed to two overloaded\r\nenroll methods that accept int and long. The char gets expanded to its nearest\r\ntype—int—so course.enroll(c) calls the overloaded method that accepts int,\r\nprinting int. The code course.enroll("Object") is passed a String value. Although\r\nString is also an Object, this method calls the specific (not general) type of the argument\r\npassed to it. So course.enroll("Object") calls the overloaded method that\r\naccepts String, printing String.', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (42, 'Examine the following code and select the correct options:', 'class EJava {\r\npublic EJava() {\r\nthis(7);\r\nSystem.out.println("public");\r\n}\r\nprivate EJava(int val) {\r\nthis("Sunday");\r\nSystem.out.println("private");\r\n}\r\nprotected EJava(String val) {\r\nSystem.out.println("protected");\r\n}\r\n}\r\nclass TestEJava {\r\npublic static void main(String[] args) {\r\nEJava eJava = new EJava();\r\n}\r\n}', 'You can define overloaded constructors with different access modifiers\r\nin the same way that you define overloaded methods with different access modifiers.\r\nBut a change in only the access modifier can’t be used to define overloaded methods\r\nor constructors. private methods and constructors are also counted as overloaded\r\nmethods.\r\nThe following line of code calls EJava’s constructor, which doesn’t accept any\r\nmethod argument:\r\nEJava eJava = new EJava();\r\nThe no-argument constructor of this class calls the constructor that accepts an int\r\nargument, which in turn calls the constructor with the String argument. Because the\r\nconstructor with the String constructor doesn’t call any other methods, it prints\r\nprotected and returns control to the constructor that accepts an int argument. This\r\nconstructor prints private and returns control back to the constructor that doesn’t\r\naccept any method argument. This constructor prints public and returns control to\r\nthe main method.', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (43, 'Select the incorrect options:', '', 'Option (a) is incorrect. If a user defines a constructor for a class with\r\nany access modifier, it’s no longer an eligible candidate to be provided with a\r\ndefault constructor.\r\nOption (b) is correct. A class gets a default constructor only when it doesn’t have any\r\nconstructor. A default or an automatic constructor can’t exist with other constructors.\r\nOption (c) is incorrect. A default constructor can’t coexist with other constructors.\r\nA default constructor is automatically created by the Java compiler if the user doesn’t\r\ndefine any constructor in a class. If the user reopens the source code file and adds a\r\nconstructor to the class, upon recompilation no default constructor will be created for\r\nthe class.\r\nOption (d) is correct. Because this class doesn’t have a constructor, Java will create\r\na default constructor for it.\r\nOption (e) is also correct. This class also doesn’t have a constructor, so it’s eligible\r\nfor the creation of a default constructor. The following isn’t a constructor because the\r\nreturn type of a constructor isn’t void:\r\nvoid EJava() {}\r\nIt’s a regular and valid method, with the name same as its class.', 3, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (44, 'Which answer correctly shows its output?', 'String letters = "ABCAB";\r\nSystem.out.println(letters.substring(0, 2).startsWith(''A''));', 'When it comes to the String class, it’s easy to confuse the methods that\r\naccept char or String values as method arguments. For example, the overloaded\r\nmethod indexOf can accept both String and char values to search for a target value\r\nin a String. The methods startsWith and endsWith accept only arguments of type\r\nString. The method charAt accepts only method arguments of type int. Hence, this\r\nmethod can be passed char values, which are stored as unsigned integer values.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (45, 'Which of the following options (there’s just one correct answer) correctly creates an object of the class StringBuilder with a default capacity of 16 characters?', '', 'The correct way to create an object of class StringBuilder with a\r\ndefault capacity of 16 characters is to call StringBuilder’s no-argument constructor,\r\nas follows:\r\nStringBuilder name = StringBuilder();', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (46, 'Which of the following individual options are true for the previous code?', 'String multiStrArr[][] = new String[][]{\r\n{"A", "B"},\r\nnull,\r\n{"Jan", "Feb", null},\r\n};', 'Option (a) is incorrect. Initializing a row of array multiStrArr with\r\n{"Jan","Feb",null} and {"Jan","Feb",null,null} isn’t the same. The former\r\noption defines three array elements with the last array element assigned to null. The\r\nlatter option defines four array elements with the last two array elements assigned\r\nto null.\r\nOption (b) is correct. The array element at the position exists but isn’t assigned\r\nany value. It’s assigned to null.\r\nOption (c) is incorrect. Because multiStrArr[1] refers to null, multiStrArr[1][1]\r\ndoesn’t exist.\r\nOption (d) is correct. As shown in figure A.3, the array multiStrArr doesn’t define\r\nan equal number of elements in each row, so it’s asymmetric.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (47, 'What is the output of the following code?', 'ArrayList<String> myArrList = new ArrayList<String>();\r\nString one = "One";\r\nString two = new String("Two");\r\nmyArrList.add(one);\r\nmyArrList.add(two);\r\nArrayList<String> yourArrList = myArrList;\r\none.replace("O", "B");\r\nfor (String val : myArrList)\r\nSystem.out.print(val + ":");\r\nfor (String val : yourArrList)\r\nSystem.out.print(val + ":");', 'Option (a) is correct, and options (b), (c), and (d) are incorrect. The\r\nArrayLists myArrList and yourArrList contain String objects. The value of String\r\nobjects can’t be modified once created.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (48, 'What is the output of the following code?', 'class EJavaGuruArray {\r\npublic static void main(String args[]) {\r\nint[] arr = new int[5];\r\nbyte b = 4; char c = ''c''; long longVar = 10;\r\narr[0] = b;\r\narr[1] = c;\r\narr[3] = longVar;\r\nSystem.out.println(arr[0] + arr[1] + arr[2] + arr[3]);\r\n}\r\n}', 'The previous code won’t compile due to the following line of code:\r\narr[3] = longVar;\r\nThis line of code tries to assign a value of type long to a variable of type int. Because\r\nJava does support implicit widening conversions for variables, the previous code fails\r\nto compile. Also, the previous code tries to trick you regarding your understanding of\r\nthe following:\r\n■ Assigning a char value to an int array element (arr[1] = c)\r\n■ Adding a byte value to an int array element (arr[0] = b)\r\n■ Whether an unassigned int array element is assigned a default value (arr[2])\r\n■ Whether arr[0] + arr[1] + arr[2] + arr[3] prints the sum of all these values,\r\nor a concatenated value\r\nWhen answering questions in the OCA Java SE 7 Java Programmer I exam, be careful\r\nabout such tactics. If any of the answers list a compilation error or a runtime exception\r\nas an option, look for obvious lines of code that could result in it. In this example,\r\narr[3] = longVar will result in compilation error.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (49, 'What is the output of the following code?', 'class EJavaGuruArray2 {\r\npublic static void main(String args[]) {\r\nint[] arr1;\r\nint[] arr2 = new int[3];\r\nchar[] arr3 = {''a'', ''b''};\r\narr1 = arr2;\r\narr1 = arr3;\r\nSystem.out.println(arr1[0] + ":" + arr1[1]);\r\n}\r\n}', 'Because a char value can be assigned to an int value, you might assume\r\nthat a char array can be assigned to an int array. But we’re talking about arrays of int\r\nand char primitives, which aren’t the same as a primitive int or char. Arrays themselves\r\nare reference variables, which refer to a collection of objects of similar type.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (50, 'Which of the following are valid lines of code to define a multidimensional int array?', '', 'Option (b) is incorrect. This line of code won’t compile because new\r\narray() isn’t valid code. Unlike objects of other classes, an array isn’t initialized using\r\nthe keyword new followed by the word array. When the keyword new is used to initialize\r\nan array, it’s followed by the type of the array, not the word array.\r\nOption (c) is incorrect. To initialize a two-dimensional array, all of these values\r\nmust be enclosed within another pair of curly braces, as shown in option (a).', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (51, 'Which of the following statements are correct?', '', 'Option (a) is incorrect. By default, an ArrayList creates an array with\r\nan initial size of 10 to store its elements.\r\nOption (b) is incorrect. Starting with Java 7, switch also accepts variables of type\r\nString. Because a String can be stored in an ArrayList, you can use elements of an\r\nArrayList in a switch construct.\r\nOption (c) is incorrect. Only remove() will remove all elements of an ArrayList.\r\nOption (d) is correct. An ArrayList internally uses an array to store all its elements.\r\nWhenever you add an element to an ArrayList, it checks whether the array\r\ncan accommodate the new value. If it can’t, ArrayList creates a larger array, copies\r\nall the existing values to the new array, and then adds the new value at the end of\r\nthe array. If you frequently add elements to an ArrayList, it makes sense to create\r\nan ArrayList with a bigger capacity because the previous process isn’t repeated for\r\neach ArrayList insertion.\r\nOption (e) is correct. Calling clone() on an ArrayList will create a separate reference\r\nvariable that stores the same number of elements as the ArrayList to be cloned.\r\nBut each individual ArrayList element will refer to the same object; that is, the individual\r\nArrayList elements aren’t cloned.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (52, 'Which of the following statements are correct?', '', 'Option (a) is correct. A developer may prefer using an ArrayList over\r\nan array because it offers all the benefits of an array and a list. For example, you can\r\neasily add or remove elements from an ArrayList.\r\nOption (b) is correct.\r\nOption (c) is correct. An ArrayList can be easily searched, sorted, and have its values\r\ncompared using the methods provided by the Collection framework classes.\r\nOption (d) is incorrect. An array requires you to specify the total number of elements\r\nbefore you can add any element to it. But you don’t need to specify the total\r\nnumber of elements that you may add to an ArrayList at any time in your code.\r\nOption (e) is correct.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (53, 'What is the output of the following code?', 'import java.util.*; // line 1\r\nclass EJavaGuruArrayList { // line 2\r\npublic static void main(String args[]) { // line 3\r\nArrayList<String> ejg = new ArrayList<>(); // line 4\r\nejg.add("One"); // line 5\r\nejg.add("Two"); // line 6\r\nSystem.out.println(ejg.contains(new String("One"))); // line 7\r\nSystem.out.println(ejg.indexOf("Two")); // line 8\r\nejg.clear(); // line 9\r\nSystem.out.println(ejg); // line 10\r\nSystem.out.println(ejg.get(1)); // line 11\r\n} // line 12\r\n} // line 13', 'Line 7: The method contains accepts an object and compares it with\r\nthe values stored in the list. It returns true if the method finds a match and false\r\notherwise. This method uses the equals method defined by the object stored in the\r\nlist. In the example, the ArrayList stores objects of class String, which has overridden\r\nthe equals method. The equals method of the String class compares the values\r\nstored by it. This is why line 7 returns the value true.\r\nLine 8: indexOf returns the index position of an element if a match is found;\r\notherwise, it returns -1. This method also uses the equals method behind the scenes\r\nto compare the values in an ArrayList. Because the equals method in class String\r\ncompares its values and not the reference variables, the indexOf method finds a match\r\nin position 1.\r\nLine 9: The clear method removes all the individual elements of an ArrayList\r\nsuch that an attempt to access any of the earlier ArrayList elements will throw a runtime\r\nexception. It doesn’t set the ArrayList reference variable to null.\r\nLine 10: ArrayList has overridden the toString method such that it returns a list\r\nof all its elements enclosed within square brackets. To print each element, the\r\ntoString method is called to retrieve its String representation.\r\nLine 11: The clear method removes all the elements of an ArrayList. An attempt\r\nto access the (nonexistent) ArrayList element throws a runtime IndexOutOfBounds-\r\nException exception.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (54, 'What is the output of the following code?', 'class EJavaGuruString {\r\npublic static void main(String args[]) {\r\nString ejg1 = new String("E Java");\r\nString ejg2 = new String("E Java");\r\nString ejg3 = "E Java";\r\nString ejg4 = "E Java";\r\ndo\r\nSystem.out.println(ejg1.equals(ejg2));\r\nwhile (ejg3 == ejg4);\r\n}\r\n}', 'String objects that are created without using the new operator are placed\r\nin a pool of Strings. Hence, the String object referred to by the variable ejg3 is placed\r\nin a pool of Strings. The variable ejg4 is also defined without using the new operator.\r\nBefore Java creates another String object in the String pool for the variable ejg4, it\r\nlooks for a String object with the same value in the pool. Because this value already\r\nexists in the pool, it makes the variable ejg4 refer to the same String object. This, in\r\nturn, makes the variables ejg3 and ejg4 refer to the same String objects. Hence, both\r\nof the following comparisons will return true:\r\n■ ejg3 == ejg4 (compare the object references)\r\n■ ejg3.equals(ejg4) (compare the object values)\r\nEven though the variables ejg1 and ejg2 refer to different String objects, they define\r\nthe same values. So ejg1.equals(ejg2) also returns true. Because the loop condition\r\n(ejg3==ejg4) always returns true, the code prints true in an infinite loop.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (55, 'What is the output of the following code?', 'class EJavaGuruString2 {\r\npublic static void main(String args[]) {\r\nString ejg = "game".replace(''a'', ''Z'').trim().concat("Aa");\r\nejg.substring(0, 2);\r\nSystem.out.println(ejg);\r\n}\r\n}', 'When chained, methods are evaluated from left to right. The first\r\nmethod to execute is replace, not concat. Strings are immutable. Calling the method\r\nsubstring on the reference variable ejg doesn’t change the contents of the variable\r\nejg. It returns a String object that isn’t referred to by any other variable in the code.\r\nIn fact, none of the methods defined in the String class modifies the object’s own\r\nvalue. They all create and return new String objects.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (56, 'What is the output of the following code?', 'class EJavaGuruString2 {\r\npublic static void main(String args[]) {\r\nString ejg = "game";\r\nejg.replace(''a'', ''Z'').trim().concat("Aa");\r\nejg.substring(0, 2);\r\nSystem.out.println(ejg);\r\n}\r\n}', 'String objects are immutable. It doesn’t matter how many methods you\r\nexecute on a String object; its value won’t change. Variable ejg is initialized with the\r\nString value "game". This value won’t change, and the code prints game.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (57, 'What is the output of the following code?', 'class EJavaGuruStringBuilder {\r\npublic static void main(String args[]) {\r\nStringBuilder ejg = new StringBuilder(10 + 2 + "SUN" + 4 + 5);\r\nejg.append(ejg.delete(3, 6));\r\nSystem.out.println(ejg);\r\n}\r\n}', 'This question tests you on your understanding of operators, String, and\r\nStringBuilder. The following line of code returns 12SUN45:\r\n10 + 2 + "SUN" + 4 + 5\r\nThe + operator adds two numbers but concatenates the last two numbers. When the\r\n+ operator encounters a String object, it treats all the remaining operands as\r\nString objects.\r\nUnlike the String objects, StringBuilder objects are mutable. The append and\r\ndelete methods defined in this class change its value. ejg.delete(3, 6) modifies the\r\nexisting value of the StringBuilder to 12S5. It then appends the same value to itself\r\nwhen calling ejg.append(), resulting in the value 12S512S5.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (58, 'What is the output of the following code?', 'class EJavaGuruStringBuilder2 {\r\npublic static void main(String args[]) {\r\nStringBuilder sb1 = new StringBuilder("123456");\r\nsb1.subSequence(2, 4);\r\nsb1.deleteCharAt(3);\r\nsb1.reverse();\r\nSystem.out.println(sb1);\r\n}\r\n}', 'Like the method substring, the method subSequence doesn’t modify\r\nthe contents of a StringBuilder. Hence, the value of the variable sb1 remains\r\n123456, even after the execution of the following line of code:\r\nsb1.subSequence(2, 4);\r\nThe method deleteCharAt deletes a char value at position 3. Because the positions\r\nare zero-based, the digit 4 is deleted from the value 123456, resulting in 12356. The\r\nmethod reverse modifies the value of a StringBuilder by assigning to it the reverse\r\nrepresentation of its value. The reverse of 12356 is 65321.', 4, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (59, 'What is the output of this code?', 'String result = "1";\r\nint score = 10;\r\nif ((score = score+10) == 100)\r\nresult = "A";\r\nelse if ((score = score+29) == 50)\r\nresult = "B";\r\nelse if ((score = score+200) == 10)\r\nresult = "C";\r\nelse\r\nresult = "F";\r\nSystem.out.println(result + ":" + score);', 'The flow of execution of code statements in this exercise is shown in figure\r\nA.4.\r\nThe arrows on the left in figure A.4 show the flow of execution of statements for\r\nthis code snippet. The if conditions on the right show the actual values that are compared\r\nafter the expression used in the if statements is evaluated. Following is a\r\ndetailed description:\r\n■ The initial value of variable score is 10. The first condition ((score = score +\r\n10) == 100) reassigns the value of variable score to 20 and then compares it to\r\nthe literal integer value 100. The expression 20 == 100 returns a boolean value\r\nfalse. The control doesn’t evaluate the then part of the if construct and moves\r\non to the evaluation of the second if condition defined in the else part.\r\nThe second condition ((score = score + 29) == 50) adds 29 to the existing\r\nvalue 20 of variable score and then compares the new value 49 with 50. The\r\nexpression 49 == 50 returns false again. The control doesn’t evaluate the then\r\npart of the if construct and moves on to evaluation of the second if condition\r\ndefined in the else part.\r\n■ The third condition ((score = score + 200) == 10) adds a value of 200 to\r\nthe existing value 49 of variable score, making it 249, and compares that\r\nwith the integer literal value 10. Because 249 == 10 evaluates to false, control\r\nmoves to the else part. The else part assigns a literal value F to the variable\r\nresult. At the end of execution of the if-else-if statement, the variable\r\nscore is assigned a value of 249 and result is assigned a value of F. The\r\ncode outputs F:249.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (60, 'What is the output of this code?', 'String day = new String("SUN");\r\nswitch (day) {\r\ncase "MON":\r\ncase "TUE":\r\ncase "WED":\r\ncase "THU": System.out.println("Time to work");\r\nbreak;\r\ncase "FRI": System.out.println("Nearing weekend");\r\nbreak;\r\ncase "SAT":\r\ncase "SUN": System.out.println("Weekend!");\r\nbreak;\r\ndefault: System.out.println("Invalid day?");\r\n}', 'You may have answered questions with code like the following, which\r\nprint false:\r\nString aDay = new String("SUN");\r\nSystem.out.println(aDay == "SUN");\r\nString objects, which are created using an assignment operator (=), are stored in a\r\npool of Strings. String objects, which are created using the operator new, aren’t\r\nstored in the pool of String objects.\r\nWhen a String object is passed as an argument to a switch construct, it doesn’t\r\ncompare the object references; it compares the object values using the equals\r\nmethod. In the code snippet shown in the question, a match is found for the String\r\nliteral value SUN, so the code prints Weekend!, executes the break statement, and exits\r\nthe block.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (61, 'Which of the following code submissions by our two hypothetical programmers, Harry and Selvan, examines the value of the long variable dayCount and prints out the name of any one month that matches the day count?', '', 'Paul’s submission doesn’t compile because a switch construct doesn’t\r\naccept an argument of the long primitive data type.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (62, 'What is the output of this code?', 'String[] programmers = {"Outer", "Inner"};\r\nfor (String outer : programmers) {\r\nfor (String inner : programmers) {\r\nif (inner.equals("Inner"))\r\nbreak;\r\nSystem.out.print(inner + ":");\r\n}\r\n}', 'Let’s start with the outer loop’s first iteration. In the first iteration, the value\r\nof the variable outer is Outer.\r\nFor the outer loop’s first iteration, the inner loop should execute for the values\r\nOuter and Inner for the variable inner. For the first iteration of the inner loop, the\r\nvalue of the variable inner is Outer, so the condition inner.equals("Inner") evaluates\r\nto false and the break statement doesn’t execute. The code prints the value of\r\nvariable inner, which is Outer: and starts with the next iteration of the inner loop. In\r\nthe second iteration of the inner loop, the value of the variable inner is Inner, so the\r\ncondition inner.equals("Inner") evaluates to true and the break statement executes,\r\nending the execution of the inner loop and skipping the code that prints out\r\nthe value of the variable inner.\r\nThe outer loop starts its execution with the second iteration. In this iteration, the\r\nvalue of the variable outer is Outer. For the outer loop’s iteration, the inner loop\r\nexecutes twice in the same manner as mentioned in the previous paragraph. This\r\niteration of the outer loop again prints the value of the variable inner when it’s\r\nequal to Outer.\r\nThe nested loops included in the question print out the value Outer: twice:\r\nOuter:Outer:', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (63, 'What’s the output of the following code?', 'class Loop2 {\r\npublic static void main(String[] args) {\r\nint i = 10;\r\ndo\r\nwhile (i < 15)\r\ni = i + 20;\r\nwhile (i < 2);\r\nSystem.out.println(i);\r\n}\r\n}', 'The condition specified in the do-while loop evaluates to false (because\r\n10<2 evaluates to false). But the control enters the do-while loop because the dowhile\r\nloop executes at least once—its condition is checked at the end of the loop.\r\nThe while evaluates to true for the first iteration and adds 20 to i, making it 30. The\r\nwhile loop doesn’t execute for the second time. Hence, the value of the variable i at\r\nthe end of the execution of the previous code is 30.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (64, 'What’s the output of the following code?', 'class Loop2 {\r\npublic static void main(String[] args) {\r\nint i = 10;\r\ndo\r\nwhile (i++ < 15)\r\ni = i + 20;\r\nwhile (i < 2);\r\nSystem.out.println(i);\r\n}\r\n}', 'If you’ve attempted to answer question 5-1, it’s likely that you would\r\nselect the same answer for this question, too. I’ve deliberately used the same question\r\ntext and variable names (with a small difference) because you may encounter\r\na similar pattern in the OCA Java SE 7 Programmer I exam. This question\r\nincludes one difference: unlike question 5-1, it uses a postfix unary operator in the\r\nwhile condition.\r\nThe condition specified in the do-while loop evaluates to false (because 10<2\r\nevaluates to false). But the control enters the do-while loop because the do-while\r\nloop executes at least once—its condition is checked at the end of the loop. This question\r\nprints outs 32, not 30, because the condition specified in the while loop (which\r\nhas an increment operator) executes twice.\r\nIn this question, the while loop condition executes twice. For the first evaluation,\r\ni++ < 15 (that is, 10<15) returns true and increments the value of variable i by 1 (due\r\nto the postfix increment operator). The loop body modifies the value of i to 31. The\r\nsecond condition evaluates i++<15 (that is, 31<15) to false. But due to the postfix\r\nincrement operator value of i, it increments to 32. The final value is printed as 32.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (65, 'Which of the following statements is true?', '', 'The enhanced for loop can be used within all types of looping and conditional\r\nconstructs. Notice the use of “can” and “can’t” in the answer options. It’s\r\nimportant to take note of these subtle differences.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (66, 'What’s the output of the following code?', 'int a = 10;\r\nif (a++ > 10) {\r\nSystem.out.println("true");\r\n}\r\n{\r\nSystem.out.println("false");\r\n}\r\nSystem.out.println("ABC");', 'First of all, the code has no compilation errors. This question has a\r\ntrick—the following code snippet isn’t part of the if construct:\r\n{\r\nSystem.out.println("false");\r\n}\r\nHence, the value false will print no matter what, regardless of whether the condition\r\nin the if construct evaluates to true or false.\r\nBecause the opening and closing braces for this code snippet are placed right after\r\nthe if construct, it leads us to believe that this code snippet is the else part of the if\r\nconstruct. Also, note that an if construct uses the keyword else to define the else\r\npart. This keyword is missing in this question.\r\nThe if condition (that is, a++ > 10) evaluates to false because the postfix increment\r\noperator (a++) increments the value of the variable a immediately after its earlier\r\nvalue is used. 10 isn’t greater than 10 so this condition evaluates to false.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (67, 'Given the following code, which of the following lines of code can individually replace the //INSERT CODE HERE line so that the code compiles successfully?', 'class EJavaGuru {\r\npublic static int getVal() {\r\nreturn 100;\r\n}\r\npublic static void main(String args[]) {\r\nint num = 10;\r\nfinal int num2 = 20;\r\nswitch (num) {\r\n// INSERT CODE HERE\r\nbreak;\r\ndefault: System.out.println("default");\r\n}\r\n}\r\n}', 'Option (a) is correct. Compile-time constants, including expressions,\r\nare permissible in the case labels.\r\nOption (b) is incorrect. The case labels should be compile-time constants. A nonfinal\r\nvariable isn’t a compile-time constant because it can be reassigned a value during\r\nthe course of a class’s execution. Although the previous class doesn’t assign a value\r\nto it, the compiler still treats it as a changeable variable.\r\nOption (c) is correct. The value specified in the case labels should be assignable to\r\nthe variable used in the switch construct. You may think that 10/3 will return a decimal\r\nnumber, which can’t be assigned to the variable num, but this operation discards\r\nthe decimal part and compares 3 with the variable num.\r\nOption (d) is correct. The variable num2 is defined as a final variable and assigned\r\na value on the same line of code, with its declaration. Hence, it’s considered to be a\r\ncompile-time constant.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (68, 'What’s the output of the following code?', 'class EJavaGuru {\r\npublic static void main(String args[]) {\r\nint num = 20;\r\nfinal int num2;\r\nnum2 = 20;\r\nswitch (num) {\r\ndefault: System.out.println("default");\r\ncase num2: System.out.println(4);\r\nbreak;\r\n}\r\n}\r\n}', 'The code will fail to compile. The case labels require compile-time constant\r\nvalues, and the variable num2 doesn’t qualify as such. Although the variable num2\r\nis defined as a final variable, it isn’t assigned a value with its declaration. The code\r\nassigns a literal value 20 to this variable after its declaration, but it isn’t considered to\r\nbe a compile-time constant by the Java compiler.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (69, 'What’s the output of the following code?', 'class EJavaGuru {\r\npublic static void main(String args[]) {\r\nint num = 120;\r\nswitch (num) {\r\ndefault: System.out.println("default");\r\ncase 0: System.out.println("case1");\r\ncase 10*2-20: System.out.println("case2");\r\nbreak;\r\n}\r\n}\r\n}', 'The expressions used for both case labels—that is, 0 and 10*2-20—evaluate\r\nto the constant value 0. Because you can’t define duplicate case labels for the\r\nswitch statement, the code will fail to compile with an error message that states that\r\nthe code defines a duplicate case label.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (70, 'What’s the output of the following code?', 'class EJavaGuru3 {\r\npublic static void main(String args[]) {\r\nbyte foo = 120;\r\nswitch (foo) {\r\ndefault: System.out.println("ejavaguru"); break;\r\ncase 2: System.out.println("e"); break;\r\ncase 120: System.out.println("ejava");\r\ncase 121: System.out.println("enum");\r\ncase 127: System.out.println("guru"); break;\r\n}\r\n}\r\n}', 'For a switch case construct, control enters the case labels when a\r\nmatching case is found. The control then falls through the remaining case labels\r\nuntil it’s terminated by a break statement. The control exits the switch construct\r\nwhen it encounters a break statement or it reaches the end of the switch construct.\r\nIn this example, a matching label is found for case label 120. The control executes\r\nthe statement for this case label and prints ejava to the console. Because a break\r\nstatement doesn’t terminate the case label, the control falls through to case label 121.\r\nThe control executes the statement for this case label and prints enum to the console.\r\nBecause a break statement also doesn’t terminate this case label, the control falls\r\nthrough to case label 127. The control executes the statement for this case label and\r\nprints guru to the console. This case label is terminated by a break statement, so the\r\ncontrol exits the switch construct.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (71, 'What’s the output of the following code?', 'class EJavaGuru4 {\r\npublic static void main(String args[]) {\r\nboolean myVal = false;\r\nif (myVal=true)\r\nfor (int i = 0; i < 2; i++) System.out.println(i);\r\nelse System.out.println("else");\r\n}\r\n}', 'First of all, the expression used in the if construct isn’t comparing the\r\nvalue of the variable myVal with the literal value true—it’s assigning the literal value\r\ntrue to it. The assignment operator (=) assigns the literal value. The comparison\r\noperator (==) is used to compare values. Because the resulting value is a boolean\r\nvalue, the compiler doesn’t complain about the assignment in the if construct.\r\nThe code is deliberately poorly indented because you may encounter similarly\r\npoor indentation in the OCA Java SE 7 Programmer I exam. The for loop is part of\r\nthe if construct, which prints 0 and 1. The else part doesn’t execute because the if\r\ncondition evaluates to true. The code has no compilation errors.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (72, 'What’s the output of the following code?', 'class EJavaGuru5 {\r\npublic static void main(String args[]) {\r\nint i = 0;\r\nfor (; i < 2; i=i+5) {\r\nif (i < 5) continue;\r\nSystem.out.println(i);\r\n}\r\nSystem.out.println(i);\r\n}\r\n}', 'First of all, the following line of code has no compilation errors:\r\nfor (; i < 2; i=i+5) {\r\nUsing the initialization block is optional in a for loop. In this case, using a semicolon\r\n(;) terminates it.\r\nFor the first for iteration, the variable i has a value of 0. Because this value is\r\nless than 2, the following if construct evaluates to true and the continue statement\r\nexecutes:\r\nif (i < 5) continue;\r\nBecause the continue statement ignores all of the remaining statements in a for loop\r\niteration, the control doesn’t print the value of the variable i, which leads the control\r\nto move on to the next for iteration. In the next for iteration, the value of the variable\r\ni is 5. The for loop condition evaluates to false and the control moves out of\r\nthe for loop. After the for loop, the code prints out the value of the variable i, which\r\nincrements once using the code i=i+5.', 5, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (73, 'Which of the options is correct for this modified code?', 'class Employee {\r\nprivate String name;\r\nString address;\r\nprotected String phoneNumber;\r\npublic float experience;\r\n}\r\nclass Programmer extends Employee {\r\nProgrammer (String val) {\r\nname = val;\r\n}\r\nString getName() {\r\nreturn name;\r\n}\r\n}\r\nclass Office {\r\npublic static void main(String args[]) {\r\nnew Programmer ("Harry").getName();\r\n}\r\n}', 'The code fails to compile because the private members of a class can’t\r\nbe accessed outside a class—not even by its derived class. The compiler can detect\r\nsuch attempts; this code won’t compile.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (74, 'Given the following definition of the classes and interface Employee, Manager, HRExecutive, and Interviewer, select the correct options for the class TwistInTale2:', 'class Employee {}\r\ninterface Interviewer {}\r\nclass Manager extends Employee implements Interviewer {}\r\nclass HRExecutive extends Employee implements Interviewer {}\r\nclass TwistInTale2 {\r\npublic static void main (String args[]) {\r\nInterviewer[] interviewer = new Interviewer[] {\r\nnew Manager(), // Line 1\r\nnew Employee(), // Line 2\r\nnew HRExecutive(), // Line 3\r\nnew Interviewer() // Line 4\r\n};\r\n}\r\n}', 'The rules you need to follow to assign a value to an array element are the\r\nsame rules you follow when you assign an object to a reference variable. Because the type\r\nof array interviewer is Interviewer, you can assign objects of classes that implement\r\nthis interface. The inheritance of classes Employee, Manager, and HRExecutive, and the\r\ninterface Interviewer are shown in figure A.5.\r\nAs you can see in figure A.5, the classes Manager and HRExecutive implement\r\nthe interface Interviewer. The class Employee doesn’t implement the interface\r\nInterviewer; hence, an object of the class Manager can’t be added to an array of\r\ntype Interviewer.\r\nFrom this explanation, it’s apparent that options (a) and (c) are correct and option\r\n(b) is incorrect.\r\nOption (d) is incorrect because you can’t create objects of an interface. Option\r\n(d) tries to create an object of the interface Interviewer. Code that tries to create an\r\ninstance of an interface won’t compile.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (75, 'What is the output of class TwistInTale3?', 'class Employee {\r\nString name = "Emp";\r\nString address = "EmpAddress";\r\n}\r\nclass Programmer extends Employee{\r\nString name = "Prog";\r\nvoid printValues() {\r\nSystem.out.print(this.name + ":");\r\nSystem.out.print(this.address + ":");\r\nSystem.out.print(super.name + ":");\r\nSystem.out.print(super.address);\r\n}\r\n}\r\nclass TwistInTale3 {\r\npublic static void main(String args[]) {\r\nnew Programmer().printValues();\r\n}\r\n}', 'In a derived class, you’d normally use the implicit reference super to\r\nrefer to a method or variable of a base class. Similarly, you’d normally use the implicit\r\nreference this to refer to a method or variable defined in the same class. A derived\r\nclass contains within it an object of its base class and can access non-private members\r\nof its base class. A derived class can also refer to the members of its base class as its own\r\nmembers using the reference this. This approach is acceptable only if the same member\r\nisn’t defined in the derived class; that is, if there are no name collisions.\r\nThe base class Employee defines two non-private variables, name and address,\r\nwhich are accessible in Employee’s derived class Programmer. The class Programmer\r\nalso defines an instance variable name, so the variable name should be prefixed with\r\nthe explicit references super and this to refer to the variable name defined in the\r\nclasses Employee and Programmer. The variable address can be referred to using both\r\nsuper and this in the derived class Programmer.\r\nOption (a) is incorrect. The derived class Programmer can refer to the variable\r\naddress defined in the base class using this.address. This value won’t print null.\r\nOption (c) is incorrect. this.address won’t print blank when accessed from the\r\nderived class Programmer.\r\nOption (d) is incorrect. The code has no compilation issues.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (76, 'Given the following definition of classes Employee and Programmer, which of the options when inserted at //INSERT CODE HERE// will define the method run as a polymorphic method?', 'class Employee {\r\n//INSERT CODE HERE// {\r\nSystem.out.println("Emp-run");\r\nreturn null;\r\n}\r\n}\r\nclass Programmer extends Employee{\r\nString run() {\r\nSystem.out.println("Programmer-run");\r\nreturn null;\r\n}\r\n}\r\nclass TwistInTale4 {\r\npublic static void main(String args[]) {\r\nnew Programmer().run();\r\n}\r\n}', 'Polymorphic methods exist when classes or interfaces share an inheritance\r\nrelationship. A polymorphic method can be defined by a derived class if\r\n■ The derived class implements an abstract method defined in a base class\r\nor interface\r\n■ The derived class overrides a non-abstract method defined in a base class\r\nOptions (b) and (d) are incorrect. A method can’t be overridden if it defines a different\r\nparameter list.\r\nOption (c) is incorrect. The return type of the overridden method must be the\r\nsame in the base class and the derived class.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (77, 'What is the output of the following code?', 'class Animal {\r\nvoid jump() { System.out.println("Animal"); }\r\n}\r\nclass Cat extends Animal {\r\nvoid jump(int a) { System.out.println("Cat"); }\r\n}\r\nclass Rabbit extends Animal {\r\nvoid jump() { System.out.println("Rabbit"); }\r\n}\r\nclass Circus {\r\npublic static void main(String args[]) {\r\nAnimal cat = new Cat();\r\nRabbit rabbit = new Rabbit();\r\ncat.jump();\r\nrabbit.jump();\r\n}\r\n}', 'Although the classes Cat and Rabbit seem to override the method jump,\r\nthe class Cat doesn’t override the method jump() defined in the class Animal. The\r\nclass Cat defines a method parameter with the method jump, which makes it an overloaded\r\nmethod, not an overridden method. Because the class Cat extends the class\r\nAnimal, it has access to the following two overloaded jump methods:\r\nvoid jump() { System.out.println("Animal"); }\r\nvoid jump(int a) { System.out.println("Cat"); }\r\nThe following line of code creates an object of class Cat and assigns it to a variable of\r\ntype Animal:\r\nAnimal cat = new Cat();\r\nWhen you call the method jump on the previous object, it executes the method jump,\r\nwhich doesn’t accept any method parameters, printing the following value:\r\nAnimal\r\nThe following code will also print Animal and not Cat:\r\nCat cat = new Cat();\r\ncat.jump();', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (78, 'Given the following code, select the correct statements:', 'class Flower {\r\npublic void fragrance() {System.out.println("Flower"); }\r\n}\r\nclass Rose {\r\npublic void fragrance() {System.out.println("Rose"); }\r\n}\r\nclass Lily {\r\npublic void fragrance() {System.out.println("Lily"); }\r\n}\r\nclass Bouquet {\r\npublic void arrangeFlowers() {\r\nFlower f1 = new Rose();\r\nFlower f2 = new Lily();\r\nf1.fragrance();\r\n}\r\n}', 'Although the code seems to implement polymorphism using classes,\r\nnote that neither of the classes Rose or Lily extends the class Flower. Hence, a variable\r\nof type Flower can’t be used to store objects of the classes Rose or Lily. The following\r\nlines of code will fail to compile:\r\nFlower f1 = new Rose();\r\nFlower f2 = new Lily();', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (79, 'Examine the following code and select the correct method declaration to be inserted at //INSERT CODE HERE:', 'interface Movable {\r\nvoid move();\r\n}\r\nclass Person implements Movable {\r\npublic void move() { System.out.println("Person move"); }\r\n}\r\nclass Vehicle implements Movable {\r\npublic void move() { System.out.println("Vehicle move"); }\r\n}\r\nclass Test {\r\n// INSERT CODE HERE\r\nmovable.move();\r\n}\r\n}', 'You need to insert code in the class Test that makes the following line of\r\ncode work:\r\nmovable.move();\r\nHence, option (d) is incorrect. Because class Test doesn’t define any instance methods,\r\nthe only way that the question’s line of code can execute is when a method\r\nparameter movable is passed to the method walk.\r\nOption (a) is correct. Because the interface Movable defines the method move, you\r\ncan pass a variable of its type to the method move.\r\nOption (b) is correct. Because the class Person implements the interface Movable\r\nand defines the method move, you can pass a variable of its type to the method walk.\r\nWith this version of the method walk, you can pass it an object of the class Person or\r\nany of its subclasses.\r\nOption (c) is correct. Because the class Vehicle implements the interface Movable\r\nand defines the method move, you can pass a variable of its type to the method walk.\r\nWith this version of', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (80, 'Select the correct statements:', '', 'Option (a) is incorrect. To implement polymorphism with classes, either an abstract\r\nclass or a concrete class can be used as a base class.\r\nOption (c) is incorrect. First of all, no code execution takes place at compile time.\r\nCode can only execute at runtime. In polymorphism, the determination of the exact\r\nmethod to execute is deferred until runtime and is determined by the exact type of\r\nthe object on which a method needs to be called.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (81, 'Given the following code, select the correct statements:', 'class Person {}\r\nclass Employee extends Person {}\r\nclass Doctor extends Person {}', 'The given code does not define any method in the class Person that is\r\nredefined or implemented in the classes Employee and Doctor. Though the classes\r\nEmployee and Doctor extend the class Person, all these three polymorphism concepts\r\nor design principles are based on a method, which is missing in these classes.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (82, 'Which of the following statements are true?', '', 'Option (a) is correct. Inheritance can allow you to reuse existing code\r\nby extending a class. In this way, the functionality that is already defined in the base\r\nclass need not be defined in the derived class. The functionality offered by the base class\r\ncan be accessed in the derived class as if it were defined in the derived class.\r\nOption (b) is correct. Common code can be placed in the base class, which can be\r\nextended by all the derived classes. If any changes need to be made to this common\r\ncode, it can be modified in the base class. The modified code will be accessible to all\r\nthe derived classes.\r\nOption (c) is incorrect. Polymorphism doesn’t pass any special instructions to the\r\ncompiler to make the Java code execute on multiple platforms. Java code can execute\r\non multiple platforms because the Java compiler compiles to virtual machine code,\r\nwhich is platform-neutral. Different platforms implement this virtual machine.\r\nOption (d) is incorrect. Polymorphic methods can throw exceptions.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (83, 'Given the following code, which of the options are true?', 'class Satellite {\r\nvoid orbit() {}\r\n}\r\nclass Moon extends Satellite {\r\nvoid orbit() {}\r\n}\r\nclass ArtificialSatellite extends Satellite {\r\nvoid orbit() {}\r\n}', 'All of these options define classes. When methods with the same method\r\nsignature are defined in classes that share an inheritance relationship, the methods\r\nare considered polymorphic.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (84, 'Which of the following lines of code can be individually inserted at //INSERT CODE HERE so that the output of the code is as follows: Programmer - Mala Gupta Author - Mala Gupta', 'class Programmer {\r\nvoid print() {\r\nSystem.out.println("Programmer - Mala Gupta");\r\n}\r\n}\r\nclass Author extends Programmer {\r\nvoid print() {\r\nSystem.out.println("Author - Mala Gupta");\r\n}\r\n}\r\nclass TestEJava {\r\nProgrammer a = new Programmer();\r\n// INSERT CODE HERE\r\na.print();\r\nb.print();\r\n}', 'Option (a) is incorrect. This code will compile, but because both the reference\r\nvariable and object are of type Programmer, calling print on this object will\r\nprint Programmer - Mala Gupta, not Author - Mala Gupta.\r\nOption (d) is incorrect. This code will not compile. You can’t assign an object of a\r\nbase class to a reference variable of a derived class.\r\nOption (e) is incorrect. This line of code will compile successfully, but it will fail at\r\nruntime with a ClassCastException. An object of a base class can’t be cast to an\r\nobject of its derived class.\r\nOption (f) is incorrect. The expression ((Author)new Programmer()) is evaluated\r\nbefore it can be assigned to a reference variable of type Author. This line of code also\r\ntries to cast an object of the base class—Programmer—to an object of its derived\r\nclass—Author. This code will also compile successfully but will fail at runtime with a\r\nClassCastException. Using a reference variable of type Author won’t make a difference\r\nhere.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (85, 'Given the following code, which of the options, when applied individually, will make it compile successfully?', 'Line1> interface Employee {}\r\nLine2> interface Printable extends Employee {\r\nLine3> String print();\r\nLine4> }\r\nLine5> class Programmer {\r\nLine6> String print() { return("Programmer - Mala Gupta"); }\r\nLine7> }\r\nLine8> class Author extends Programmer implements Printable, Employee {\r\nLine9> String print() { return("Author - Mala Gupta"); }\r\nLine10> }', 'The methods in an interface are implicitly public. A non-abstract class\r\nthat implements an interface must implement all the methods defined in the interface.\r\nWhile overriding or implementing the methods, the accessibility of the implemented\r\nmethod must be public. An overriding method can’t be assigned a weaker\r\naccess privilege than public.\r\nOption (a) is incorrect. There are no issues with the interface Printable extending\r\nthe interface Employee and the class Author implementing both of these interfaces.\r\nOption (b) is incorrect. Adding the access modifier to the method print on line 3\r\nwill not make any difference to the existing code. The methods defined in an interface\r\nare implicitly public.\r\nOption (d) is incorrect. There are no issues with a class implementing two interfaces\r\nwhen one of the interfaces extends the other interface.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (86, 'What is the output of the following code?', 'class Base {\r\nString var = "EJava";\r\nvoid printVar() {\r\nSystem.out.println(var);\r\n}\r\n}\r\nclass Derived extends Base {\r\nString var = "Guru";\r\nvoid printVar() {\r\nSystem.out.println(var);\r\n}\r\n}\r\nclass QReference {\r\npublic static void main(String[] args) {\r\nBase base = new Base();\r\nBase derived = new Derived();\r\nSystem.out.println(base.var);\r\nSystem.out.println(derived.var);\r\nbase.printVar();\r\nderived.printVar();\r\n}\r\n}', 'With inheritance, the instance variables bind at compile time and the\r\nmethods bind at runtime. The following line of code refers to an object of the class\r\nBase, using a reference variable of type Base. Hence, both of the following lines of\r\ncode print EJava:\r\nSystem.out.println(base.var);\r\nbase.printVar();\r\nBut the following line of code refers to an object of the class Derived using a reference\r\nvariable of type Base:\r\nBase derived = new Derived();\r\nBecause the instance variables bind at compile time, the following line of code\r\naccesses and prints the value of the instance variable defined in the class Base:\r\nSystem.out.println(derived.var); // prints EJava\r\nIn derived.printVar(), even though the method printVar is called using a reference\r\nof type Base, the JVM is aware that the method is invoked on a Derived object\r\nand so executes the overridden printVar method in the class Derived.', 6, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (87, 'Given that file.txt doesn’t exist on your system, what is the output of the following code?', 'import java.io.*;\r\npublic class MultipleExceptions {\r\npublic static void main(String args[]) {\r\nFileInputStream fis = null;\r\ntry {\r\nfis = new FileInputStream("file.txt");\r\nSystem.out.println("File Opened");\r\nfis.read();\r\nSystem.out.println("Read File");\r\n}\r\nfinally {\r\nSystem.out.println("finally");\r\n}\r\ncatch (FileNotFoundException fnfe) {\r\nSystem.out.println("File not found");\r\n}\r\ncatch (IOException ioe) {\r\nSystem.out.println("File Closing Exception");\r\n}\r\nSystem.out.println("Next task..");\r\n}\r\n}', 'Options (a), (b), and (c) are incorrect because code that defines a finally block before catch blocks won’t compile.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (88, 'Given that players.txt exists on your system and that the assignment of players, shown in bold, doesn’t throw any exceptions, what is the output of the following code?', 'import java.io.*;\r\npublic class TwistInTaleNestedTryCatch {\r\nstatic FileInputStream players, coach;\r\npublic static void main(String args[]) {\r\ntry {\r\nplayers = new FileInputStream("players.txt");\r\nSystem.out.println("players.txt found");\r\ntry {\r\ncoach.close();\r\n}\r\ncatch (IOException e) {\r\nSystem.out.println("coach.txt not found");\r\n}\r\n}\r\ncatch (FileNotFoundException fnfe) {\r\nSystem.out.println("players.txt not found");\r\n}\r\ncatch (NullPointerException ne) {\r\nSystem.out.println("NullPointerException");\r\n}\r\n}\r\n}', 'Options (b), (c), and (d) are incorrect. The question assumes that a text\r\nfile players.txt exists on your system so that the following code won’t throw a FileNot-\r\nFoundException exception:\r\nplayers = new FileInputStream("players.txt");\r\nThe code defined for this question doesn’t initialize the static variable coach before\r\nexecuting the following code, which is bound to throw NullPointerException:\r\ncoach.close();\r\nThe previous line of code is defined in the inner try block, which doesn’t define an\r\nexception handler for the exception NullPointerException. This exception is propagated\r\nto the outer exception-handler block. The outer exception handler catches the\r\nNullPointerException thrown by the inner try block and executes the appropriate\r\nexception handler. Hence, the code prints the following:\r\nplayers.txt found\r\nNullPointerException', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (89, 'Will the code in the error-handling block execute? What do you think is the output of the following code?', 'public class TwistInTaleCatchError {\r\npublic static void main(String args[]) {\r\ntry {\r\nmyMethod();\r\n}\r\ncatch (StackOverflowError s) {\r\nfor (int i=0; i<2; ++i)\r\nSystem.out.println(i);\r\n}\r\n}\r\npublic static void myMethod() {\r\nmyMethod();\r\n}\r\n}', 'We know that typically errors shouldn’t be handled programmatically\r\nand that they should be left for the JVM to take care of. Also, you can’t be sure that\r\nerror-handling code for all the errors will execute. For example, error-handling\r\ncode for StackOverFlowError may execute but (as the name suggests) may not execute\r\nfor VirtualMachineError.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (90, 'Examine the code and select the correct options:', 'class Ink{}\r\ninterface Printable {}\r\nclass ColorInk extends Ink implements Printable {}\r\nclass BlackInk extends Ink{}\r\nclass TwistInTaleCasting {\r\npublic static void main(String args[]) {\r\nPrintable printable = null;\r\nBlackInk blackInk = new BlackInk();\r\nprintable = (Printable)blackInk;\r\n}\r\n}', 'Options (a) and (c) are incorrect because the code throws ClassCast-\r\nException, which is a runtime exception, for the following code:\r\nprintable = (Printable)blackInk;\r\nOption (d) is correct because neither the class BlackInk nor any of its base classes\r\nimplement the interface Printable. Thus, the code that assigns blankInk to printable\r\nwithout an explicit cast will fail to compile.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (91, 'Examine the code and select the correct answers.', 'class TwistInTaleNullPointerException {\r\npublic static void main(String[] args) {\r\nString[][] oldLaptops =\r\n{ {"Dell", "Toshiba", "Vaio"}, null,\r\n{"IBM"}, new String[10] };\r\nSystem.out.println(oldLaptops[0][0]); // line 1\r\nSystem.out.println(oldLaptops[1]); // line 2\r\nSystem.out.println(oldLaptops[3][6]); // line 3\r\nSystem.out.println(oldLaptops[3][0].length()); // line 4\r\nSystem.out.println(oldLaptops); // line 5\r\n}\r\n}', 'Let’s indent the assignment of the two-dimensional array oldLaptops so\r\nthat it’s easier to understand the values that are assigned to it:\r\nString[][] oldLaptops = {\r\n{"Dell", "Toshiba", "Vaio"},\r\nnull,\r\n{"IBM"},\r\nnew String[10]\r\n};\r\nThe preceding code results in the following assignments:\r\noldLaptops[0] = {"Dell", "Toshiba", "Vaio"};\r\noldLaptops[1] = null;\r\noldLaptops[2] = {"IBM"};\r\noldLaptops[3] = new String[10];\r\n\r\nAs you can see, oldLaptops[3] is an array of ten uninitialized String objects. All the\r\nmembers (from index position 0 to 9) of the array oldLaptops[3] are assigned a null\r\nvalue. The code on line 4 tries to call the method length on the first element of array\r\noldLaptops[0], which is null, throwing a NullPointerException.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (92, 'What is the output of the following code:', 'class Course {\r\nString courseName;\r\nCourse() {\r\nCourse c = new Course();\r\nc.courseName = "Oracle";\r\n}\r\n}\r\nclass EJavaGuruPrivate2 {\r\npublic static void main(String args[]) {\r\nCourse c = new Course();\r\nc.courseName = "Java";\r\nSystem.out.println(c.courseName);\r\n}\r\n}', 'This class will throw StackOverflowError at runtime. The easiest way to\r\nlook for a StackOverflowError is to locate recursive method calls. In the question’s\r\ncode, the constructor of the class Course creates an object of the class Course, which\r\nwill call the constructor again. Hence, this becomes a recursive call and ends up\r\nthrowing StackOverflowError at runtime. (As you know, an exception or an error\r\ncan be thrown only at runtime, not compile time.)', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (93, 'Select the correct option(s):', '', 'Option (a) is incorrect. You can handle runtime exceptions the way you\r\ncan handle a checked exception in your code: using a try-catch block.\r\nOption (b) is correct. You shouldn’t try to handle errors in your code. Or, to put it\r\nanother way, you can’t do much when an error is thrown by your code. Instead of trying\r\nto handle errors in your code, you should resolve the code that results in these\r\nerrors. For example, StackOverflowError is an error that will be thrown by your code\r\nif your code executes a method recursively without any exit condition. This repetition\r\nwill consume all the space on the stack and result in a StackOverflowError.\r\nOption (c) is correct. If you fail to implement either of these options, your code\r\nwon’t compile.\r\nOption (d) is correct. It isn’t mandatory for runtime exceptions to be included in\r\na method’s throws clause. Usually this inclusion is unnecessary, but if you do include\r\nit, your code will execute without any issues.\r\nOption (e) is incorrect. Runtime exception and all its subclasses are not checked\r\nexceptions.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (94, 'Examine the following code and select the correct option(s):', 'class EJavaGuruExcep2 {\r\npublic static void main(String args[]) {\r\nEJavaGuruExcep2 var = new EJavaGuruExcep2();\r\nvar.printArrValues(args);\r\n}\r\nvoid printArrValues(String[] arr) {\r\ntry {\r\nSystem.out.println(arr[0] + ":" + arr[1]);\r\n}\r\ncatch (NullPointerException e) {\r\nSystem.out.println("NullPointerException");\r\n}\r\ncatch (IndexOutOfBoundsException e) {\r\nSystem.out.println("IndexOutOfBoundsException");\r\n}\r\ncatch (ArrayIndexOutOfBoundsException e) {\r\nSystem.out.println("ArrayIndexOutOfBoundsException");\r\n}\r\n}\r\n}', 'The key to answering this question is to be aware of the following two facts:\r\n■ Exceptions are classes. If an exception’s base class is used in a catch block, it\r\ncan catch all the exceptions of its derived class. If you try to catch an exception\r\nfrom its derived class afterward, the code won’t compile.\r\n■ ArrayIndexOutOfBoundsException is a derived class of IndexOutOfBounds-\r\nException.\r\nThe rest of the points try to trick you into believing that the question is based on the\r\narguments passed to a main method.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (95, 'What is the output of the following code?', 'class EJava {\r\nvoid method() {\r\ntry {\r\nguru();\r\nreturn;\r\n}\r\nfinally {\r\nSystem.out.println("finally 1");\r\n}\r\n}\r\nvoid guru() {\r\nSystem.out.println("guru");\r\nthrow new StackOverflowError();\r\n}\r\npublic static void main(String args[]) {\r\nEJava var = new EJava();\r\nvar.method();\r\n}\r\n}', 'No compilation errors exist with the code.\r\nThe method guru throws StackOverflowError, which is not a checked exception.\r\nEven though your code should not throw an error, it is possible syntactically. Your\r\ncode will compile successfully.\r\nThe call to the method guru is immediately followed by the keyword return,\r\nwhich is supposed to end the execution of the method method. But the call to guru is\r\nplaced within a try-catch block, with a finally block. Because guru doesn’t handle\r\nthe error StackOverflowError itself, the control looks for the exception handler in the\r\nmethod method. This calling method doesn’t handle this error, but defines a finally\r\nblock. The control then executes the finally block. Because the code can’t find an\r\nappropriate handler to handle this error, it propagates to the JVM, which abruptly\r\nhalts the code.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (96, 'Select the incorrect statement(s):', '', 'No direct relationship exists between exception handling and improved\r\nexecution of code. Code that handles all the checked exceptions can throw unchecked\r\nexceptions and vice versa.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (97, 'Select the incorrect statement(s):', '', 'Option (a) is a true statement. A checked exception is a subclass of java.lang\r\n.Exception, and a runtime exception is a subclass of java.lang.RuntimeException.\r\njava.lang.RuntimeException is a subclass of java.lang.Exception, and java.lang\r\n.Exception is a subclass of java.lang.Throwable. Hence, all the exceptions are subclasses\r\nof java.lang.Throwable.\r\nOption (b) is also a true statement. Unchecked exceptions are subclasses of class\r\njava.lang.RuntimeException, which itself is a subclass of java.lang.Exception.\r\nHence, a class can be a subclass of class java.lang.Exception and either a checked\r\nor an unchecked exception.\r\nOption (c) is a false statement. Error is not an exception. It does not subclass\r\njava.lang.Exception.\r\nOption (d) is also a false statement. Error need not be part of a method signature,\r\nbut checked exceptions must be a part of the method signatures.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (98, 'What is the output of the following code?', 'class TryFinally {\r\nint tryAgain() {\r\nint a = 10;\r\ntry {\r\n++a;\r\n}\r\nfinally {\r\na++;\r\n}\r\nreturn a;\r\n}\r\npublic static void main(String args[]) {\r\nSystem.out.println(new TryFinally().tryAgain());\r\n}\r\n}', 'The try block executes, incrementing the value of variable a to 11. This\r\nstep is followed by execution of the finally block, which also increments the value of\r\nvariable a by 1, to 12. The method tryAgain returns the value 12, which is printed by\r\nthe method main.\r\nThere are no compilation issues with the code. A try block can be followed by a\r\nfinally block, without any catch blocks. Even though the try block doesn’t throw\r\nany exceptions, it compiles successfully. The following is an example of a try-catch\r\nblock that won’t compile because it tries to catch a checked exception that’s never\r\nthrown by the try block:\r\ntry {\r\n++a;\r\n}\r\ncatch (java.io.FileNotFoundException e) {\r\n}', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (99, 'What is the output of the following code?', 'class EJavaBase {\r\nvoid myMethod() throws ExceptionInInitializerError {\r\nSystem.out.println("Base");\r\n}\r\n}\r\nclass EJavaDerived extends EJavaBase {\r\nvoid myMethod() throws RuntimeException {\r\nSystem.out.println("Derived");\r\n}\r\n}\r\nclass EJava3 {\r\npublic static void main(String args[]) {\r\nEJavaBase obj = new EJavaDerived();\r\nobj.myMethod();\r\n}\r\n}', 'The rule that if a base class method doesn’t throw an exception, an overriding\r\nmethod in the derived class can’t throw a exception applies only to checked\r\nexceptions. It doesn’t apply to runtime (unchecked) exceptions or errors. A base or\r\noverridden method is free to throw any Error or runtime exception.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (100, 'Which of the following statements are true?', '', 'Option (a) is incorrect. A user-defined class can throw any exception from the Java API.\r\nOption (b) is incorrect. An uninitialized instance variable of type String will be\r\nassigned a default value of null. When you pass this variable to System.out.println\r\nto print it, it will print null. If you try to access any member (variable or method) of\r\nthis null object, then NullPointerException will be thrown.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (101, 'What is the output of the following code?', 'class EJava4 {\r\nvoid foo() {\r\ntry {\r\nString s = null;\r\nSystem.out.println("1");\r\ntry {\r\nSystem.out.println(s.length());\r\n}\r\ncatch (NullPointerException e) {\r\nSystem.out.println("inner");\r\n}\r\nSystem.out.println("2");\r\n}\r\ncatch (NullPointerException e) {\r\nSystem.out.println("outer");\r\n}\r\n}\r\npublic static void main(String args[]) {\r\nEJava4 obj = new EJava4();\r\nobj.foo();\r\n}\r\n}', 'First of all, nested try-catch statements don’t throw compilation errors.\r\nBecause the variable s hasn’t been initialized, an attempt to access its method\r\nlength() will throw a NullPointerException. The inner try-catch block handles\r\nthis exception and prints inner. The control then moves on to complete the remaining\r\ncode in the outer try-catch block, printing 2. Because the NullPointer-\r\nException was already handled in the inner try-catch block, it’s not handled in the\r\nouter try-catch block.', 7, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (102, 'Given the following definition of the classes Animal, Lion, and Jumpable, select the correct combinations of assignments of a variable (select 2 options):', 'interface Jumpable {}\r\nclass Animal {}\r\nclass Lion extends Animal implements Jumpable {}', 'interface Jumpable {}\r\nclass Animal {}\r\nclass Lion extends Animal implements Jumpable {}Option (a) is incorrect. An interface can’t be instantiated.\r\nOption (c) is incorrect. A reference variable of a derived class can’t be used to\r\nrefer to an object of its base class.\r\nOption (d) is incorrect. A reference variable of type Jumpable can’t be used to refer to\r\nan object of the class Animal because Animal doesn’t implement the interface Jumpable.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (103, 'Which of the following statements are true? (Select 3 options.)', '', 'interface Jumpable {}\r\nclass Animal {}\r\nclass Lion extends Animal implements Jumpable {}Option (a) is incorrect. An interface can’t be instantiated.\r\nOption (c) is incorrect. A reference variable of a derived class can’t be used to\r\nrefer to an object of its base class.\r\nOption (d) is incorrect. A reference variable of type Jumpable can’t be used to refer to\r\nan object of the class Animal because Animal doesn’t implement the interface Jumpable.Option (c) is incorrect. The same class can’t be defined in multiple\r\npackages. If you try to define the same class—say, the class Person—in the packages\r\ncom.ejava and com.eoracle, you’re defining two classes with the same name but in\r\nseparate packages. In this case, com.ejava.Person and com.eoracle.Person will refer\r\nto two different classes.\r\nOption (e) is incorrect because there is no theoretical limit on the number of constructors\r\nthat can be defined by a class.\r\nOption (f) is incorrect because end-of-line comments can follow any line of code.\r\nOption (g) is incorrect because multiline comments can also be placed outside a\r\nmethod definition.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (104, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will make the code print 1? (Select 1 option.)', 'try {\r\nString[][] names = {{"Andre", "Mike"}, null, {"Pedro"}};\r\nSystem.out.println (names[2][1].substring(0, 2));\r\n}\r\ncatch (/*INSERT CODE HERE*/) {\r\nSystem.out.println(1);\r\n}', 'Options (a) and (d) are incorrect because the Java API doesn’t define\r\nany exception classes with these names.\r\nHere’s a list of the array values that are initialized by the code in this question:\r\nnames[0][0] = "Andre"\r\nnames[0][1] = "Mike"\r\nnames[1] = null\r\nnames[2][0] = "Pedro"\r\nBecause the array position [2][1] isn’t defined, any attempt to access it will throw\r\nArrayIndexOutOfBoundsException.\r\nAn attempt to access any position of the second array—that is, names[1][0]—will\r\nthrow NullPointerException because names[1] is set to null.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (105, 'What is the output of the following code? (Select 1 option.)', 'int a = 10; String name = null;\r\ntry {\r\na = name.length();\r\na++;\r\n}\r\ncatch (RuntimeException e){\r\n++a;\r\n}\r\nSystem.out.println(a);', 'Because the variable name isn’t assigned a value, the following line of\r\ncode will throw NullPointerException:\r\nname.length();\r\nHence, the original value of the variable a isn’t modified and the control is transferred\r\nto the exception handler, which increments the value of the variable a to 11.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (106, 'what is the output of the following code? (Select 1 option.)', 'class Student { int marks = 10; }\r\n\r\nclass Result {\r\npublic static void main(String... args) {\r\nStudent s = new Student();\r\nswitch (s.marks) {\r\ndefault: System.out.println("100");\r\ncase 10: System.out.println("10");\r\ncase 98: System.out.println("98");\r\n}\r\n}\r\n}', 'The default case executes only if no matching values are found. In\r\nthis case, a matching value of 10 is found and the case label prints 10. Because a\r\nbreak statement doesn’t terminate this case label, the code execution continues\r\nand executes the remaining statements within the switch block, until a break statement\r\nterminates it or it ends.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (107, 'Given the following code, which code can be used to create and initialize an object of class ColorPencil? (Select 2 options.)', 'class Pencil {}\r\nclass ColorPencil extends Pencil {\r\nString color;\r\nColorPencil(String color) {this.color = color;}\r\n}', 'Option (a) is incorrect because new ColorPencil() tries to invoke the noargument\r\nconstructor of class ColorPencil, which isn’t defined in class ColorPencil.\r\nOption (b) is incorrect because new ColorPencil(RED) tries to pass a variable RED,\r\nwhich isn’t defined in the code.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (108, 'What is the output of the following code? (Select 1 option.)', 'class Doctor {\r\nprotected int age;\r\nprotected void setAge(int val) { age = val; }\r\nprotected int getAge() { return age; }\r\n}\r\nclass Surgeon extends Doctor {\r\nSurgeon(String val) {\r\nspecialization = val;\r\n}\r\nString specialization;\r\nString getSpecialization() { return specialization; }\r\n}\r\nclass Hospital {\r\npublic static void main(String args[]) {\r\nSurgeon s1 = new Surgeon("Liver");\r\nSurgeon s2 = new Surgeon("Heart");\r\ns1.age = 45;\r\nSystem.out.println(s1.age + s2.getSpecialization());\r\nSystem.out.println(s2.age + s1.getSpecialization());\r\n}\r\n}', 'The constructor of the class Surgeon assigns the values "Liver" and\r\n"Heart" to the variable specialization of objects s1 and s2. The variable age is\r\nprotected in the class Doctor. Also, the class Surgeon extends the class Doctor.\r\nHence, the variable age is accessible to reference variables s1 and s2. The code\r\nassigns a value of 45 to the member variable age of reference variable s1. The variable\r\nage of reference variable s2 is initialized to the default value of an int, which is 0.\r\nHence, the code prints the values mentioned in option (a).', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (109, 'What is the output of the following code? (Select 1 option.)', 'class RocketScience {\r\npublic static void main(String args[]) {\r\nint a = 0;\r\nwhile (a == a++) {\r\na++;\r\nSystem.out.println(a);\r\n}\r\n}\r\n}', 'The while loop will execute indefinitely because the condition a == a++\r\nwill always evaluate to true. The postfix unary operator will increment the value of the\r\nvariable a after it’s used in the comparison expression. a++ within the loop body will\r\nincrement the value of a by 1. Hence, the value of a increments by 2 in a single loop.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (110, 'Given the following statements, which of the following options correctly import the classes Person and Course in the class MyEJava? (Select 3 options.)', '■ com.ejava is a package\r\n■ class Person is defined in package com.ejava\r\n■ class Course is defined in package com.ejava', 'Option (a) is correct. The statement import com.ejava.*; imports all\r\nthe public members of the package com.ejava in class MyEJava.\r\nOption (b) is incorrect. Because com.ejava is a package, to import all the classes\r\ndefined in this package, the package name should be followed by .*:\r\nimport com.ejava.*;\r\nOption (c) is correct. It uses two separate import statements to import each of the\r\nclasses Person and Course individually, which is correct.\r\nOption (d) is also correct. The first import statement imports only the class Person\r\nin MyClass. But the second import statement imports both the Person and Course\r\nclasses from the package com.ejava. You can import the same class more than once in\r\na Java class with no issues. This code is correct.\r\nIn Java, the import statement makes the imported class visible to the Java compiler,\r\nallowing it to be referred to by the class that’s importing it. In Java, the import statement\r\ndoesn’t embed the imported class in the target class.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (111, 'Given that the following classes Animal and Forest are defined in the same package, examine the code and select the correct statements (select 2 options):', 'line1> class Animal {\r\nline2> public void printKing() {\r\nline3> System.out.println("Lion");\r\nline4> }\r\nline5> }\r\nline6> class Forest {\r\nline7> public static void main(String... args) {\r\nline8> Animal anAnimal = new Animal();\r\nline9> anAnimal.printKing();\r\nline10> }\r\nline11> }', 'Option (a) is correct. The code will compile successfully and print Lion.\r\nOption (b) is incorrect. The code won’t compile if the access modifier of the\r\nmethod printKing is changed to private. private members of a class can’t be\r\naccessed outside the class.\r\nOption (c) is correct. The classes Animal and Forest are defined in the same package,\r\nso changing the access modifier of the method printKing to default access will still\r\nmake it accessible in the class Forest. The class will compile successfully and print Lion.\r\nOption (d) is incorrect. “default” isn’t a valid access modifier or keyword in Java. In\r\nJava, the default accessibility is marked by the absence of any explicit access modifier.\r\nThis code will fail to compile.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (112, 'Which of the following statements are true? (Select 2 options.)', '', 'Option (a) is correct. A public method is accessible to other classes. If\r\nyou change the accessibility of a public method to a private method, it will no longer\r\nbe accessible outside its class. Any class that uses such a method will fail to compile\r\nafter this modification.\r\nOption (b) is correct. A private method isn’t accessible outside the class in which\r\nit’s defined. In other words, a private method isn’t known to the other classes, so it\r\ncan’t be accessed by other classes. If classes can’t even access the private methods of\r\nother classes, it won’t make a difference to them if their accessibility is changed.\r\nOption (c) is incorrect. A method with default access can be accessed by classes\r\ndefined in the same package.\r\nOption (d) is incorrect. A change in the accessibility of the methods in your class\r\naffects other classes that use your class. If you assign a weaker accessibility to any of\r\nyour methods, it may no longer be accessible to the other classes. If this happens, the\r\nother class will fail to compile.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (113, 'Which of the following statements are correct? (Select 3 options)', '', 'Option (a) is incorrect. If, for example, callingMethod() calls called-\r\nMethod(), which throws checked exceptions, callingMethod() can’t ignore checked\r\nexceptions thrown by calledMethod(). callingMethod() should handle these exceptions\r\nitself or declare them to be thrown. callingMethod() can’t ignore any checked\r\nexceptions thrown by calledMethod(). If it tries to do so, the code won’t compile.\r\nOption (b) is correct. It is indeed possible to handle all the runtime exceptions in\r\nyour code.\r\nOptions (c) and (d) are correct. The superclass of all types of exceptions (checked\r\nand runtime) is class java.lang.Exception, so if you define a handler for java.lang\r\n.Exception in your code, you are able to handle all runtime and checked exceptions,\r\nand this will include any exceptions whose names you don’t know.\r\nOption (e) is incorrect. Even though errors can be caught by an exception handler,\r\nyou shouldn’t handle them because they’re serious exceptions thrown by the JVM\r\nas a result of an error in the environment state that processes your code.\r\nOption (f) is incorrect because runtime exceptions are also known as unchecked\r\nexceptions.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (114, 'what’s its output if it’s executed using the following command? (Select 1 option.) java MainMethod 1+2 2*3 4-3 5+1', 'class MainMethod {\r\npublic static void main(String... args) {\r\nSystem.out.println(args[0]+":"+ args[2]);\r\n}\r\n}', 'This question tests you on multiple points:\r\n■ The arguments that are passed on to the main method—The keyword java and the\r\nname of the class (MainMethod) aren’t passed as arguments to the main method.\r\nThe arguments following the class name are passed to the main method. In this\r\ncase, four method arguments are passed to the main method, as follows:\r\nargs[0]: 1+2\r\nargs[1]: 2*3\r\nargs[2]: 4-3\r\nargs[3]: 5+1\r\n■ The type of the arguments that are passed to the main method—The main method\r\naccepts arguments of type String. All the numeric expressions—1+2, 2*3, 5+1\r\nand 4-3—are passed as literal String values. These won’t be evaluated when\r\nyou try to print their values. Hence, args[0] won’t be printed as 3. It will be\r\nprinted as 1+2.\r\n■ + operations with String array elements—Because the array passed to the main\r\nmethod contains all the String values, using the + operand with its individual\r\nvalues will concatenate its values. It won’t add the values, if they are numeric\r\nexpressions. Hence, "1+2"+"4-3" won’t evaluate to 31 or 4.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (115, 'What is the output of the following code? (Select 1 option.)', 'class Person {\r\nint age;\r\nfloat height;\r\nboolean result;\r\nString name;\r\n}\r\npublic class EJava {\r\npublic static void main(String arguments[]) {\r\nPerson person = new Person();\r\nSystem.out.println(person.name + person.height + person.result\r\n+ person.age);\r\n}\r\n}', 'The instance variables of a class are all assigned default values if no\r\nexplicit value is assigned to them. Here are the default values of the primitive data\r\ntypes and the objects:\r\nchar -> \u0000\r\nbyte, short, int -> 0\r\nlong -> 0L\r\nfloat-> 0.0f\r\ndouble -> 0.0d\r\nboolean -> false\r\nobjects -> null', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (116, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will make the code print the value of the variable pagesPerMin? (Select 1 option.)', 'class Printer {\r\nint inkLevel;\r\n}\r\nclass LaserPrinter extends Printer {\r\nint pagesPerMin;\r\npublic static void main(String args[]) {\r\nPrinter myPrinter = new LaserPrinter();\r\nSystem.out.println(/* INSERT CODE HERE */);\r\n}\r\n}', 'Option (a) is incorrect because (LaserPrinter) tries to cast myPrinter\r\n.pagesPerMin to LaserPrinter, which is incorrect. This code won’t compile.\r\nOption (b) is incorrect. The type of reference variable myPrinter is Printer.\r\nmyPrinter refers to an object of the class LaserPrinter, which extends the class\r\nPrinter. A reference variable of the base class can’t access the variables and methods\r\ndefined in its subclass without an explicit cast.\r\nOption (c) is incorrect. LaserPrinter.myPrinter treats LaserPrinter as a variable,\r\nalthough no variable with this name exists in the question’s code. This code fails\r\nto compile.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (117, 'Which statements describe the use of exception handling in Java? (Select 2 options.)', '', 'Option (b) is incorrect. One of the main purposes of an exception handler\r\nis to define an alternative flow of action.\r\nOptions (d) and (e) are incorrect. Definitions of exception handlers, wellencapsulated\r\nclasses, and efficient inheritance aren’t related in behavior as stated\r\nby these options.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (118, 'Which statements are true for reference and primitive variables? (Select 3 options.)', '', 'Option (a) is incorrect. Theoretically, there is no limit on the number of\r\ncharacters that can be used to define the name of a primitive variable or object reference.\r\nOption (d) is incorrect. Unlike object references, primitive variables can be compared\r\nfor equality by using the equals operator (==) only.\r\nOption (e) is correct. A primitive variable can never refer to an object and vice versa.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (119, 'What is the output of the following code? (Select 1 option.)', 'public class Handset {\r\npublic static void main(String... args) {\r\ndouble price;\r\nString model;\r\nSystem.out.println(model + price);\r\n}\r\n}', 'The local variables (variables that are declared within a method) aren’t\r\ninitialized with their default values. If you try to print the value of a local variable\r\nbefore initializing it, the code won’t compile.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (120, 'What is the output of the following code? (Select 1 option.)', 'public class Sales {\r\npublic static void main(String args[]) {\r\nint salesPhone = 1;\r\nSystem.out.println(salesPhone++ + ++salesPhone +\r\n++salesPhone);\r\n}\r\n}', 'Understanding the following rules will enable you to answer this question\r\ncorrectly:\r\n■ An arithmetic expression is evaluated from left to right.\r\n■ When an expression uses the unary increment operator (++) in postfix notation,\r\nits value increments just after its original value is used in an expression.\r\n■ When an expression uses the unary increment operator (++) in prefix notation,\r\nits value increments just before its value is used in an expression.\r\nThe initial value of the variable salesPhone is 1. Let’s evaluate the result of the arithmetic\r\nexpression salesPhone++ + ++salesPhone + ++salesPhone step by step:\r\n1 The first occurrence of salesPhone uses ++ in postfix notation, so its value is\r\nused in the expression before it is incremented by 1. This means that the expression\r\nevaluates to\r\n1 + ++salesPhone + ++salesPhone\r\n2 Note that the previous usage of ++ in postfix increments has already incremented\r\nthe value of salesPhone to 2. The second occurrence of salesPhone\r\nuses ++ in prefix notation, so its value is used in the expression after it is incremented\r\nby 1, to 3. This means that the expression evaluates to\r\n1 + 3 + ++salesPhone\r\n3 The third occurrence of salesPhone again uses ++ in prefix notation, so its\r\nvalue is used in the expression after it is incremented by 1, to 4. This means that\r\nthe expression evaluates to\r\n1 + 3 + 4\r\nThe previous expression evaluates to 8.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (121, 'Which of the following options defines the correct structure of a Java class? (Select 1 option.)', '', 'Option (a) is incorrect. A class can’t define more than one package\r\nstatement.\r\nOption (b) is incorrect. Though a class can import multiple packages in a class,\r\nthe package statement must be placed before the import statement.\r\nOption (c) is incorrect. A class can’t define an import statement within its class\r\nbody. The import statement appears before the class body.\r\nOption (d) is correct. In the absence of any package information, this class\r\nbecomes part of the default package.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (122, 'What is the output of the following code? (Select 1 option.)', 'class OpPre {\r\npublic static void main(String... args) {\r\nint x = 10;\r\nint y = 20;\r\nint z = 30;\r\nif (x+y%z > (x+(-y)*(-z))) {\r\nSystem.out.println(x + y + z);\r\n}\r\n}\r\n}', 'x+y%z evaluates to 30; (x+(y%z)) and (x+(-y)*(-z)) evaluate to 610.\r\nThe if condition returns false and the line of code that prints the sum of x, y, and z\r\ndoesn’t execute. Hence, the code doesn’t provide any output.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (123, 'Select the most appropriate definition of the variable name and the line number on which it should be declared so that the following code compiles successfully (choose 1 option):', 'class EJava {\r\n// LINE 1\r\npublic EJava() {\r\nSystem.out.println(name);\r\n}\r\nvoid calc() {\r\n// LINE 2\r\nif (8 > 2) {\r\nSystem.out.println(name);\r\n}\r\n}\r\npublic static void main(String... args) {\r\n// LINE 3\r\nSystem.out.println(name);\r\n}\r\n}', 'The variable name must be accessible in the instance method calc, the\r\nclass constructor, and the static method main. A non-static variable can’t be\r\naccessed by a static method. Hence, the only appropriate option is to define a\r\nstatic variable name that can be accessed by all—the constructor of class EJava, and\r\nmethods calc and main.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (124, 'Examine the following code and select the correct statement (choose 1 option):', 'line1> class Emp {\r\nline2> Emp mgr = new Emp();\r\nline3> }\r\nline4> class Office {\r\nline5> public static void main(String args[]) {\r\nline6> Emp e = null;\r\nline7> e = new Emp();\r\nline8> e = null;\r\nline9> }\r\nline10> }', 'The code throws java.lang.StackOverflowError at runtime. Line 7\r\ncreates an instance of class Emp. Creation of an object of the class Emp requires the creation\r\nof an instance variable mgr and its initialization with an object of the same class.\r\nAs you see, the Emp object creation calls itself recursively, resulting in java.lang\r\n.StackOverflowError.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (125, 'Which of the following is the correct declaration of a method that accepts two String arguments and an int argument and doesn’t return any value? (Select 2 options.)', '', 'The placement of the type of method parameters and the name of the\r\nmethod parameters doesn’t matter. You can accept two String variables and then an\r\nint variable or a String variable followed by int and again a String. The name of\r\nan int variable can be str2. As long as the names are valid identifiers, any name is\r\nacceptable. The return type of the method should be void to specify that the method\r\ndoesn’t return any value.\r\nOption (b) is incorrect. It won’t compile because the method signature doesn’t\r\ninclude a return type.\r\nOptions (c) and (d) are incorrect. The method signatures of these methods don’t\r\ndefine data types for all their method parameters.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (126, 'Which of the following will compile successfully? (Select 3 options.)', '', 'Option (d) is incorrect because it defines the size of the array while\r\nusing {}, which isn’t allowed. Both of the following lines of code are correct:\r\nint[] eArr4 = new int[10];\r\nint[] eArr4 = new int[]{};\r\nOption (e) is incorrect because it’s invalid to specify the size of the array within the\r\nsquare brackets when you’re declaring, instantiating, and initializing an array in a single\r\nline of code.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (127, 'Assume that Oracle has asked you to create a method that returns the concatenated value of two String objects. Which of the following methods do you think can accomplish this job? (Select 2 options.)', '', 'Option (a) is incorrect. This method defines method parameters with\r\ninvalid identifier names. Identifiers can’t start with a digit.\r\nOption (b) is correct. The method requirements don’t talk about the access modifier\r\nof the required method. It can have any accessibility.\r\nOption (c) is incorrect because the class String doesn’t define any append method.\r\nOption (d) is correct. Even though the name of the method—subtract—isn’t an\r\nappropriate name for a method that tries to concatenate two values, it does accomplish\r\nthe required job.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (128, 'In Java, the class String is defined in the package java.lang, and this package is automatically imported in all the Java classes. Given this statement, which of the following options represents the correct definition of class EJava, which can define a variable of class String? (Choose 2 options.)', '', 'Options (a) and (b) are incorrect. The code in both these options won’t\r\ncompile because they use incorrect import statement. The following line of code will\r\nimport all the classes from package java.lang (including class String):\r\nimport java.lang.*;\r\nYou can use the following import statement to import just the class String:\r\nimport java.lang.String;\r\nOption (c) is correct. The class EJava can create variables of the class String because\r\nthe class java.lang.String is automatically imported in all the Java classes. Hence,\r\nit’s available to EJava, even if this class doesn’t import it explicitly.\r\nOption (d) is correct. It doesn’t make a difference if you import the same class\r\nmore than once in your code.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (129, 'Given the following definitions of the class ChemistryBook, select the statements that are correct individually (choose 2 options):', 'import java.util.ArrayList;\r\nclass ChemistryBook {\r\npublic void read() {} //METHOD1\r\npublic String read() { return null; } //METHOD2\r\nArrayList read(int a) { return null; } //METHOD3\r\n}', 'Options (a) and (d) are incorrect because the methods read marked\r\nwith //METHOD1 and //METHOD2 only differ in their return types, void and String.\r\nOverloaded methods can’t be defined with only a change in their return types; hence,\r\nthese methods don’t qualify as correctly overloaded methods.\r\nNote that the presence of methods marked with //METHOD1 and //METHOD2\r\ntogether will cause a compilation error.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (130, 'Given the following definition of the class Home, select the correct statements (choose 4 options):', 'class Home {\r\nString name;\r\nint rooms;\r\nHome() {}\r\n}', 'Option (b) is correct. The class Home doesn’t contain a default constructor.\r\nA default constructor is generated by Java when the user doesn’t define any constructor.\r\nIn this case, the class Home does define a constructor.\r\nOption (c) is correct. A default constructor is generated only in the absence of a\r\nconstructor. Hence, it can’t coexist with other constructors.\r\nOption (d) is correct. The default constructor doesn’t accept any method parameters.\r\nIt initializes the instance variables of a class to their default values.\r\nOption (e) is correct and (f) is incorrect. No default constructor will be generated\r\nfor class Home because Home already defines a no-argument constructor. A no-argument\r\nconstructor is a constructor that defines no method parameters. After compilation,\r\nclass Home has only one constructor that doesn’t accept any method parameters.\r\nOption (g) is incorrect. If you don’t assign explicit values to instance variables of a\r\nclass, they are initialized to their default values.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (131, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will make the code print numbers that are completely divisible by 14? (Select 1 option.)', 'for (int ctr = 2; ctr <= 30; ++ctr) {\r\nif (ctr % 7 != 0)\r\n//INSERT CODE HERE\r\nif (ctr % 14 == 0)\r\nSystem.out.println(ctr);\r\n}', 'Options (b) and (d) are incorrect because exit and end aren’t valid\r\nstatements in Java.\r\nOption (c) is incorrect. Using break will terminate the for loop during the first\r\niteration of the for loop so that no output is printed.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (132, 'Ideally, which of the following should never be handled by an exception handler? (Select 2 options.)', '', 'Options (c), (d), (e), and (f) are incorrect because the Java API doesn’t\r\ndefine these exception or error classes.\r\nOptions (a) and (b) are correct. You should never try to handle these errors in\r\nyour code because StackOverflowError and OutOfMemoryError are serious errors.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (133, 'What is the output of the following code? (Select 1 option.)', 'public class MyCalendar {\r\npublic static void main(String arguments[]) {\r\nSeason season1 = new Season();\r\nseason1.name = "Spring";\r\nSeason season2 = new Season();\r\nseason2.name = "Autumn";\r\nseason1 = season2;\r\nSystem.out.println(season1.name);\r\nSystem.out.println(season2.name);\r\n}\r\n}\r\nclass Season {\r\nString name;\r\n}', 'Multiple variable references can point to the same object. The following\r\nlines of code define a reference variable season1, which refers to an object that has\r\nthe value of its instance variable (name) set to Spring:\r\nSeason season1 = new Season();\r\nseason1.name = "Spring";\r\nThe following lines of code define a reference variable season2, which refers to an\r\nobject that has the value of its instance variable (name) set to Autumn:\r\nSeason season2 = new Season();\r\nseason2.name = "Autumn";\r\nThe following line of code reinitializes the reference variable season1 and assigns it to\r\nthe object referred to by the variable season2:\r\nseason1 = season2;\r\nNow the variable season1 refers to the object that is also referred to by the variable\r\nseason2. Both of these variables refer to the same object—the one that has the value of\r\nthe instance variable set to Autumn. Hence, the output of the previous code is as follows:\r\nAutumn\r\nAutumn', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (134, 'What is true about the following code? (Select 1 option.)', 'class Shoe {}\r\nclass Boot extends Shoe {}\r\nclass ShoeFactory {\r\nShoeFactory(Boot val) {\r\nSystem.out.println("boot");\r\n}\r\nShoeFactory(Shoe val) {\r\nSystem.out.println("shoe");\r\n}\r\n}', '', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (135, 'Given the following definitions of the classes ColorPencil and TestColor, which option, if used to replace /* INSERT CODE HERE */, will initialize the instance variable color of reference variable myPencil with the String literal value "RED"? (Select 1 option.)', 'class ColorPencil {\r\nString color;\r\nColorPencil(String color) {\r\n//INSERT CODE HERE\r\n}\r\n}\r\nclass TestColor {\r\nColorPencil myPencil = new ColorPencil("RED");\r\n}', 'Option (b) is incorrect. This line of code will assign the value of the\r\nmethod parameter to itself. The constructor of the class ColorPencil defines a method\r\nparameter with the same name as its instance variable, color. To access an instance variable\r\nin the constructor, it must be prefixed with the keyword this, or it will refer to the\r\nmethod parameter color.\r\nOptions (c) and (d) are incorrect. They try to access the value of variable RED,\r\nwhich isn’t defined in the code.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (136, 'What is the output of the following code? (Select 1 option.)', 'class EJavaCourse {\r\nString courseName = "Java";\r\n}\r\nclass University {\r\npublic static void main(String args[]) {\r\nEJavaCourse courses[] = { new EJavaCourse(), new EJavaCourse() };\r\ncourses[0].courseName = "OCA";\r\nfor (EJavaCourse c : courses) c = new EJavaCourse();\r\nfor (EJavaCourse c : courses) System.out.println(c.courseName);\r\n}\r\n}', 'This question tests you on multiple concepts: how to read from and\r\nwrite to object fields, how to use arrays, the enhanced for loop, and assigning a value\r\nto a loop variable.\r\nThe code defines an array of the class EJavaCourse with two elements. The default\r\nvalue of the variable courseName—Java—is assigned to each of these two elements.\r\ncourses[0].courseName = "OCA" changes the value courseName, for the object stored\r\nat array position 0. c = new EJavaCourse() assigns a new object to the loop variable\r\nc. This assignment doesn’t reassign new objects to the array reference variables.\r\nSystem.out.println(c.courseName) prints the name of the courseName of the objects\r\ninitially stored by the array, using the loop variable c.\r\nThe loop variable in the enhanced for loop refers to a copy of the array or list element.\r\nIf you modify the state of the loop variable, the modified object state will be\r\nreflected in the array. But if you assign a new object to the loop variable, it won’t\r\nbe reflected in the list or the array that’s being iterated. You can compare this behavior\r\nof the enhanced for loop variable with the behavior of object references passed as\r\narguments to a method.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (137, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will make the code print the value of the variable screenSize? (Select 1 option.)', 'class Tablet {\r\nfloat screenSize = 7.0f;\r\nfloat getScreenSize() {\r\nreturn screenSize;\r\n}\r\nvoid setScreenSize(float val) {\r\nscreenSize = val;\r\n}\r\n}\r\nclass DemoTabs {\r\npublic static void main(String args[]) {\r\nTablet tab = new Tablet();\r\nSystem.out.println(/* INSERT CODE HERE */);\r\n}\r\n}', 'Only the dot operator (.) can be used to access an instance variable or a\r\nmethod of an object in Java. The rest of the operators (->, ::, and :) used in options\r\n(b), (c), and (d), respectively, aren’t valid operators in Java.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (138, 'Given the following definitions of the class Person and the interface Movable, the task is to declare a class Emp that inherits from the class Person and implements the interface Movable. Select the correct option to accomplish this task (choose 1 option):', 'class Person {}\r\ninterface Movable {}', 'Options (a) and (b) are incorrect because a class can’t use the keyword\r\nimplements to inherit a class.\r\nOption (d) is incorrect because a class can’t use the keyword extends to inherit\r\nan interface.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (139, 'What is the output of the following code? (Select 1 option.)', 'class Phone {\r\nstatic void call() {\r\nSystem.out.println("Call-Phone");\r\n}\r\n}\r\nclass SmartPhone extends Phone{\r\nstatic void call() {\r\nSystem.out.println("Call-SmartPhone");\r\n}\r\n}\r\nclass TestPhones {\r\npublic static void main(String... args) {\r\nPhone phone = new Phone();\r\nPhone smartPhone = new SmartPhone();\r\nphone.call();\r\nsmartPhone.call();\r\n}\r\n}', 'Invocation of a static method is tied to the type of the reference variable\r\nand doesn’t depend on the type of the object that’s assigned to the reference variable.\r\nThe static method belongs to a class, not to its objects. Re-examine the following code:\r\nPhone smartPhone = new SmartPhone();\r\nsmartPhone.call();\r\nIn the preceding code, the type of the reference variable smartPhone is Phone.\r\nBecause call is a static method, smartPhone.call() calls the method call defined\r\nin the class Phone.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (140, 'Given the following code, which of the following statements are true? (Select 3 options.)', 'class MyExam {\r\nvoid question() {\r\ntry {\r\nquestion();\r\n}\r\ncatch (StackOverflowError e) {\r\nSystem.out.println("caught");\r\n}\r\n}\r\npublic static void main(String args[]) {\r\nnew MyExam().question();\r\n}\r\n}', 'Option (a) is correct. The control will be transferred to the exception\r\nhandler for StackOverflowError when it’s encountered. Hence it will print caught.\r\nOptions (c) and (d) are correct. Exception handlers execute when the corresponding\r\nchecked or runtime exceptions are thrown.\r\nOption (e) is incorrect. An exception handler for class StackOverflow can’t handle\r\nexceptions of class NullPointerException because NullPointerException is not\r\na superclass of StackOverflowError.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (141, 'A class Student is defined as follows: The creator of the class later changes the method getName as follows: What are the implications of this change? (Select 2 options.)', 'public class Student {\r\nprivate String fName;\r\nprivate String lName;\r\npublic Student(String first, String last) {\r\nfName = first; lName = last;\r\n}\r\npublic String getName() { return fName + lName; }\r\n}\r\n\r\npublic String getName() {\r\nreturn fName + " " + lName;\r\n}', 'This is an example of a well-encapsulated class. There is no change in\r\nthe method signature of method getName after it’s modified. Hence, none of the code\r\nthat uses this class and method will face any compilation issues. Its instance variables\r\n(fName and lName) aren’t exposed outside the class. They are available only via a public\r\nmethod: getName.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (142, 'What is the output of the following code? (Select 1 option.)', 'class ColorPack {\r\nint shadeCount = 12;\r\nstatic int getShadeCount() {\r\nreturn shadeCount;\r\n}\r\n}\r\nclass Artist {\r\npublic static void main(String args[]) {\r\nColorPack pack1 = new ColorPack();\r\nSystem.out.println(pack1.getShadeCount());\r\n}\r\n}', 'A static method can’t access non-static instance variables of a class. Hence, the class ColorPack fails to compile.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (143, 'Paul defined his Laptop and Workshop classes to upgrade his laptop’s memory. Do you think he succeeded? What is the output of this code? (Select 1 option.)', 'class Laptop {\r\nString memory = "1GB";\r\n}\r\nclass Workshop {\r\npublic static void main(String args[]) {\r\nLaptop life = new Laptop();\r\nrepair(life);\r\nSystem.out.println(life.memory);\r\n}\r\npublic static void repair(Laptop laptop) {\r\nlaptop.memory = "2GB";\r\n}\r\n}', 'The method repair defined in this example modifies the state of the\r\nmethod parameter laptop that is passed to it. It does so by modifying the value of\r\nthe instance variable memory.\r\nWhen a method modifies the state of an object reference variable that is passed to\r\nit, the changes made are visible in the calling method. The method repair makes\r\nchanges to the state of the method parameter laptop; these changes are visible in the\r\nmethod main. Hence, the method main prints the value of life.memory as 2 GB.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (144, 'What is the output of the following code? (Select 1 option.)', 'public class Application {\r\npublic static void main(String... args) {\r\ndouble price = 10;\r\nString model;\r\nif (price > 10)\r\nmodel = "Smartphone";\r\nelse if (price <= 10)\r\nmodel = "landline";\r\nSystem.out.println(model);\r\n}\r\n}', 'The local variables aren’t initialized with default values. Code that tries\r\nto print the value of an uninitialized local variable fails to compile.\r\nIn this code, the local variable model is only declared, not initialized. The initialization\r\nof the variable model is placed within the if and else-if constructs. If you initialize\r\na variable within an if or else-if construct, the compiler can’t be sure whether\r\nthese conditions will evaluate to true, resulting in no initialization of the local variable.\r\nBecause there is no else at the bottom and the compiler can’t tell whether the\r\nif and else-if are mutually exclusive, the code won’t compile.\r\nIf you remove the condition if (price <= 10) from the preceding code, the code\r\nwill compile successfully:\r\npublic class Application {\r\npublic static void main(String... args) {\r\ndouble price = 10;\r\nString model;\r\nif (price > 10)\r\nmodel = "Smartphone";\r\nelse\r\nmodel = "landline";\r\nSystem.out.println(model);\r\n}\r\n}\r\nIn this code, the compiler can be sure about the initialization of the local variable model.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (145, 'What is the output of the following code? (Select 1 option.)', 'class EString {\r\npublic static void main(String args[]) {\r\nString eVal = "123456789";\r\nSystem.out.println(eVal.substring(eVal.indexOf("2"),eVal.indexOf("0")).c\r\noncat("0"));\r\n}\r\n}', 'When multiple methods are chained on a single code statement, the\r\nmethods execute from left to right, not from right to left. eVal.indexOf("0")\r\nreturns a negative value because, as you can see, the String eVal doesn’t contain\r\nthe digit 0. Hence, eVal.substring is passed a negative end value, which results in a\r\nRuntimeException.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (146, 'Examine the following code and select the correct statements (choose 2 options):', 'class Artist {\r\nArtist assistant;\r\n}\r\nclass Studio {\r\npublic static void main(String... args) {\r\nArtist a1 = new Artist();\r\nArtist a2 = new Artist();\r\na2.assistant = a1;\r\na2 = null; // Line 1\r\n}\r\n// Line 2\r\n}', 'Options (a), (b), and (c) are incorrect.\r\nWhen an object reference is marked as null, the object is marked for garbage collection.\r\nBut you can’t be sure exactly when a garbage collector will kick in to garbage\r\ncollect the objects. A garbage collector is a low-priority thread, and its exact execution\r\ntime will depend on the OS. The OS will start this thread to claim unused space if it\r\nneeds to claim unused space. You can be sure only about the number of objects that\r\nare eligible for garbage collection. You can never be sure about which objects have\r\nbeen garbage collected, so any statement that asserts that a particular number of\r\nobjects have been garbage collected is incorrect.\r\nOption (d) is correct. As mentioned previously, the exact number of objects garbage\r\ncollected at any point in time can’t be determined.\r\nOption (e) is correct. If you marked this option incorrect, think again. The question\r\nwants you to select the correct statements, and this is a correct statement. You\r\nmay argue that at least two objects were already made eligible for garbage collection at\r\nline 1, and you are correct. But because nothing changes on line 2, at least two objects\r\nare still eligible for garbage collection.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (147, 'What is the output of the following code? (Select 1 option.)', 'class Book {\r\nString ISBN;\r\nBook(String val) {\r\nISBN = val;\r\n}\r\n}\r\nclass TestEquals {\r\npublic static void main(String... args) {\r\nBook b1 = new Book("1234-4657");\r\nBook b2 = new Book("1234-4657");\r\nSystem.out.print(b1.equals(b2) +":");\r\nSystem.out.print(b1 == b2);\r\n}\r\n}', 'The comparison operator determines whether the reference variables\r\nrefer to the same object. Because the reference variables b1 and b2 refer to different\r\nobjects, b1==b2 prints false.\r\nThe method equals is a public method defined in the class java.lang.Object.\r\nBecause the class Object is the superclass for all the classes in Java, the method equals is\r\ninherited by all classes. Hence, the code compiles successfully. The default implementation\r\nof method equals in the base class compares the object references and returns\r\ntrue if both the reference variables refer to the same object and false otherwise.\r\nBecause the class Book doesn’t override this method, the method equals in\r\nthe base class Object is called for b1.equals(b2), which returns false. Hence, the\r\ncode prints:\r\nfalse:false', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (148, 'Which of the following statements are correct? (Select 2 options.)', '', 'There is no concat method in the StringBuilder class. It defines a whole\r\narmy of append methods (overloaded methods) to add data at the end to a String-\r\nBuilder object.\r\nnew StringBuilder(50) creates a StringBuilder object with no characters, but\r\nwith an initial capacity to store 50 chars.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (149, 'Given the following definition of the class Animal and the interface Jump, select the correct array declarations and initialization (choose 3 options):', 'interface Jump {}\r\nclass Animal implements Jump {}', 'Option (b) is incorrect because the right side of the expression is trying\r\nto create a single object of the class Animal by using round brackets, (). At the\r\nsame time, it’s also using the square brackets, [], to define an array. This combination\r\nis invalid.\r\nOption (e) is incorrect. Apart from using an invalid syntax to initialize an array (as\r\nmentioned previously), it also tries to create objects of the interface Jump. Objects of\r\ninterfaces can’t be created.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (150, 'What is the output of the following code? (Select 1 option.)', 'import java.util.*;\r\nclass EJGArrayL {\r\npublic static void main(String args[]) {\r\nArrayList<String> seasons = new ArrayList<>();\r\nseasons.add(1, "Spring"); seasons.add(2, "Summer");\r\nseasons.add(3, "Autumn"); seasons.add(4, "Winter");\r\nseasons.remove(2);\r\nfor (String s : seasons)\r\nSystem.out.print(s + ", ");\r\n}\r\n}', 'The code throws a runtime exception, IndexOutOfBoundsException,\r\nbecause the ArrayList is trying to insert its first element at position 0. Before the first\r\ncall to the method add, the size of the ArrayList seasons is 0. Because season’s first\r\nelement is stored at position 0, a call to store its first element at position 1 will throw a\r\nRuntimeException. The elements of an ArrayList can’t be added to a higher position\r\nif lower positions are available.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (151, 'What is the output of the following code? (Select 1 option.)', 'class EIf {\r\npublic static void main(String args[]) {\r\nbool boolean = false;\r\nif (boolean = true)\r\nSystem.out.println("true");\r\nelse\r\nSystem.out.println("false");\r\n}\r\n}', 'This question tries to trick you on two points. First, there is no data type\r\nbool in Java. Second, the name of an identifier can’t be the same as a reserved word.\r\nThe code tries to define an identifier of type bool with the name boolean.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (152, 'How many Fish did the Whale (defined as follows) manage to eat? Examine the following code and select the correct statements (choose 2 options):', 'class Whale {\r\npublic static void main(String args[]) {\r\nboolean hungry = false;\r\nwhile (hungry=true) {\r\n++Fish.count;\r\n}\r\nSystem.out.println(Fish.count);\r\n}\r\n}\r\nclass Fish {\r\nstatic byte count;\r\n}', 'Option (a) is incorrect because the code compiles successfully.\r\nOption (c) is incorrect. This question tries to trick you by comparing a boolean\r\nvalue when it’s assigning a boolean value in the while construct. Because the while\r\nloop assigns a value true to the variable hungry, it will always return true, incrementing\r\nthe value of the variable count, and thus getting stuck in an infinite loop.\r\nOption (d) is correct because when the unary increment operator (++) is not part\r\nof an expression, postfix and prefix notation behave in exactly the same manner.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (153, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will make the code print the name of the phone with the position at which it’s stored in the array phone? (Select 1 option.)', 'class Phones {\r\npublic static void main(String args[]) {\r\nString phones[]= {"BlackBerry", "Android", "iPhone"};\r\nfor (String phone : phones)\r\n/* REPLACE CODE HERE */\r\n}\r\n}', 'The enhanced for loop doesn’t provide you with a variable to access the\r\nposition of the array that it’s being used to iterate over. This facility comes with the regular\r\nfor loop.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (154, 'Which of the following classes represent runtime exceptions in Java (select 4 options):', '', 'Options (b), (e), (g), (h), and (j) are incorrect because there are no\r\nexception classes by these names in the Java API.\r\nOption (f) is incorrect because Throwable is the base class of all the exceptions—\r\nchecked and runtime—and errors in Java. RuntimeExceptions is a subset of\r\nthis class.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (155, 'What is the output of the following code? (Select 1 option.)', 'class Book {\r\nString ISBN;\r\nBook(String val) {\r\nISBN = val;\r\n}\r\npublic boolean equals(Object b) {\r\nif (b instanceof Book) {\r\nreturn ((Book)b).ISBN.equals(ISBN);\r\n}\r\nelse\r\nreturn false;\r\n}\r\n}\r\n\r\nclass TestEquals {\r\npublic static void main(String args[]) {\r\nBook b1 = new Book("1234-4657");\r\nBook b2 = new Book("1234-4657");\r\nSystem.out.print(b1.equals(b2) +":");\r\nSystem.out.print(b1 == b2);\r\n}\r\n}', 'The comparison operator determines whether the reference variables\r\nrefer to the same object. Because the reference variables b1 and b2 refer to different\r\nobjects, b1==b2 prints false.\r\nThe method equals is a public method defined in the class java.lang.Object.\r\nBecause the class Object is the superclass for all the classes in Java, equals is inherited\r\nby all classes. The default implementation of equals in the base class compares\r\nthe object references and returns true if both the reference variables refer to the\r\nsame object, and false otherwise. If a class has overridden this method, it returns a\r\nboolean value depending on the logic defined in this class. The class Book overrides\r\nthe equals method and returns true if the Book object defines the same ISBN value\r\nas the Book object being compared to. Because the ISBN object value of both the\r\nvariables b1 and b2 is the same, b1.equals(b2) returns true.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (156, 'What is the output of the following code? (Select 1 option.)', 'int a = 10;\r\nfor (; a <= 20; ++a) {\r\nif (a%3 == 0) a++; else if (a%2 == 0) a=a*2;\r\nSystem.out.println(a);\r\n}', 'This question requires multiple skills: understanding the declaration of\r\na for loop, use of operators, and use of the if-else construct.\r\nThe for loop is correctly defined in the code. The for loop in this code doesn’t\r\nuse its variable initialization block; it starts with ; to mark the absence of its variable\r\ninitialization block. The code for the if construct is deliberately incorrect, because\r\nyou may encounter similar code in the exam.\r\nFor the first iteration of the for loop, the value of the variable a is 10. Because a <=\r\n20 evaluates to true, control moves on to the execution of the if construct. This if\r\nconstruct can be indented properly as follows:\r\nif (a%3 == 0)\r\na++;\r\nelse if (a%2 == 0)\r\na=a*2;\r\n(a%3 == 0) evaluates to false and(a%2 == 0) evaluates to true, so a value of 20 (a*2)\r\nis assigned to a. The subsequent line prints the value of a as 20.\r\nThe increment part of the loop statement, (++a), increments the value of variable\r\na to 21. For the next loop iteration, its condition evaluates to false (a <= 20), and the\r\nloop terminates.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (157, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will define an overloaded rideWave method (select 1 option):', 'class Raft {\r\npublic String rideWave() { return null; }\r\n//INSERT CODE HERE\r\n}', 'Option (a) is incorrect. Making a change in the return value of a\r\nmethod doesn’t define a valid overloaded method.\r\nOption (b) is incorrect. The name of the method in this option is riceWave and\r\nnot rideWave. Overloaded methods should have the same method name.\r\nOption (d) is incorrect. default isn’t a valid access modifier. The default modifier\r\nis marked by the absence of an access modifier.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (158, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will correctly calculate the sum of all the even numbers in the array num and store it in variable sum? (Select 1 option.)', 'int num[] = {10, 15, 2, 17};\r\nint sum = 0;\r\nfor (int number : num) {\r\n//INSERT CODE HERE\r\nsum += number;\r\n}', 'To find the sum of the even numbers, you first need to determine\r\nwhether a number is an even number. Then you need to add the even numbers to the\r\nvariable sum.\r\nOption (c) determines whether the array element is completely divisible by 2. If it\r\nisn’t, it skips the remaining statements in the for loop by using the continue statement,\r\nwhich starts execution of the for loop with the next array element. If the array\r\nelement is completely divisible by 2, continue doesn’t execute, and the array number\r\nis added to the variable sum.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (159, 'What is the output of the following code? (Select 1 option.)', 'class Op {\r\npublic static void main(String... args) {\r\nint a = 0;\r\nint b = 100;\r\nif (!b++ > 100 && a++ == 10) {\r\nSystem.out.println(a+b);\r\n}\r\n}\r\n}', 'Although it may seem that the negation unary operator (!) is being\r\napplied to the expression b++ > 100, it’s actually being applied to the variable b of type\r\nint. Because a unary negation operator (!) can’t be applied to a variable of type int,\r\nthe code fails to compile. The correct if condition would be as follows:\r\nif (!(b++ > 100) && a++ == 10) {', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (160, 'Given the following definitions of the interfaces Movable and Jumpable, the task is to declare a class Person that inherits both of these interfaces. Which of the following code snippets will accomplish this task? (Select 2 options.)', 'interface Movable {}\r\ninterface Jumpable {}', 'Option (b) is incorrect because the right keyword for a class to inherit\r\ninterfaces is implements and not extends.\r\nOption (c) is incorrect because a class can’t use the keyword extends to inherit\r\ninterfaces.\r\nOption (d) is incorrect because an interface should use the keyword extends to\r\ninherit another interface.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (161, 'Choose the options that meets the following specification: Create a wellencapsulated class Pencil with one instance variable model. The value of model should be accessible and modifiable outside Pencil. (Select 1 option.)', '', 'A well-encapsulated class’s instance variables shouldn’t be directly\r\naccessible outside the class. It should be accessible via non-private getter and setter\r\nmethods.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (162, 'What is the output of the following code? (Select 1 option.)', 'class Phone {\r\nvoid call() {\r\nSystem.out.println("Call-Phone");\r\n}\r\n}\r\nclass SmartPhone extends Phone{\r\nvoid call() {\r\nSystem.out.println("Call-SmartPhone");\r\n}\r\n}\r\nclass TestPhones {\r\npublic static void main(String[] args) {\r\nPhone phone = new Phone();\r\nPhone smartPhone = new SmartPhone();\r\nphone.call();\r\nsmartPhone.call();\r\n}\r\n}', 'The method call is defined in the base class Phone. This method call is\r\ninherited and overridden by the derived class SmartPhone. The type of both reference\r\nvariables, phone and smartphone, is Phone. But the reference variable phone refers to\r\nan object of the class Phone, and the variable smartPhone refers to an object of the\r\nclass SmartPhone. When the method call is called on the reference variable smart-\r\nPhone, it calls the method call defined in the class SmartPhone, because a call to an\r\noverridden method is resolved at runtime and is based on the type of the object on\r\nwhich a method is called.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (163, 'Given the following requirements, choose the best looping construct to implement them (choose 1 option):', 'Step 1: Meet the director of Oracle.\r\nStep 2: Schedule another meeting with the director.\r\nStep 3: Repeat 1 and 2, as long as more meetings are required.', 'The question asks you to choose the best looping construct. The condition\r\nrequires meeting the director at least once, without checking any other condition.\r\nThis requirement is best implemented using a do-while loop.\r\nA regular for loop and while loop will check the condition of whether a meeting\r\nis required before the first meeting. This condition doesn’t match with the requirements.\r\nAn enhanced for loop is normally used to iterate through elements of a collection.\r\nWe don’t have any collection to iterate through here.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (164, 'What is the output of the following code? (Select 1 option.)', 'class Phone {\r\nString keyboard = "in-built";\r\n}\r\nclass Tablet extends Phone {\r\nboolean playMovie = false;\r\n}\r\nclass College2 {\r\npublic static void main(String args[]) {\r\nPhone phone = new Tablet();\r\nSystem.out.println(phone.keyboard + ":" + phone.playMovie);\r\n}\r\n}', 'This code won’t compile. The object reference variable, phone, of type\r\nPhone, can be used to refer to an object of its derived type—Tablet. But variables of a\r\nbase class can’t access variables and methods of its derived classes without an explicit\r\ncast to the object of the derived class. So phone can access keyboard, but not playMovie.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (165, 'What is the output of the following code? (Select 1 option.)', 'public class Wall {\r\npublic static void main(String args[]) {\r\ndouble area = 10.98;\r\nString color;\r\nif (area < 5)\r\ncolor = "red";\r\nelse\r\ncolor = "blue";\r\nSystem.out.println(color);\r\n}\r\n}', 'In this piece of code, the local variable will always be initialized. It’s initialized\r\nusing the if-else construct. One of these constructs (if or else) is sure to\r\nexecute, initializing the local variable color with a value. Hence, there are no issues\r\nwith the initialization of the variable color. The code will execute successfully, printing\r\nblue.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (166, 'What is the output of the following code? (Select 1 option.)', 'class Diary {\r\nint pageCount = 100;\r\nint getPageCount() {\r\nreturn pageCount;\r\n}\r\nvoid setPageCount(int val) {\r\npageCount = val;\r\n}\r\n}\r\nclass ClassRoom {\r\npublic static void main(String args[]) {\r\nSystem.out.println(new Diary().getPageCount());\r\nnew Diary().setPageCount(200);\r\nSystem.out.println(new Diary().getPageCount());\r\n}\r\n}', 'The constructor of a class creates an object of the class in which it’s\r\ndefined and returns the created object. This returned object can be assigned to a reference\r\nvariable. In case the returned object isn’t assigned to any reference variable,\r\nnone of the variables or methods of this object can be accessed again. This is what\r\nhappens in class ClassRoom. All calls to the methods getPageCount and setPageCount\r\nin the example operate on unrelated objects.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (167, 'How many times do you think you can shop with the following code (that is, what’s the output of the following code)? (Select 1 option.)', 'class Shopping {\r\npublic static void main(String args[]) {\r\nboolean bankrupt = true;\r\ndo System.out.println("enjoying shopping"); bankrupt = false;\r\nwhile (!bankrupt);\r\n}\r\n}', 'The code fails to compile because it’s trying to stuff two lines of code\r\nbetween the do and while statements without using curly braces.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (168, 'Which of the following options are valid for defining multidimensional arrays? (Choose 4 options.)', '', 'Options (a), (b), (c), and (d) define multidimensional arrays correctly.\r\nOption (e) is incorrect because the size in the first pair of square brackets is missing.\r\nOption (f) is incorrect. The correct code must use an additional pair of {} on the\r\nright side, as follows:\r\nString ejg6[][] = new String[][]{{"A"}, {"B"}};\r\nOption (g) is incorrect. The correct code must use an additional pair of [] on the\r\nright side as follows:\r\nString ejg7[][] = new String[][]{{"A"}, {"B"}};', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (169, 'What is the output of the following code? (Select 1 option.)', 'class Laptop {\r\nString memory = "1GB";\r\n}\r\nclass Workshop {\r\npublic static void main(String args[]) {\r\nLaptop life = new Laptop();\r\nrepair(life);\r\nSystem.out.println(life.memory);\r\n}\r\npublic static void repair(Laptop laptop) {\r\nlaptop = new Laptop();\r\nlaptop.memory = "2GB";\r\n}\r\n}', 'The method repair defined in this example assigns a new object to the\r\nmethod parameter laptop that is passed to it. Then it modifies the state of this new\r\nassigned object by assigning 1 GB to its instance variable, memory.\r\nWhen a method reassigns an object reference variable that is passed to it, the changes\r\nmade to its state aren’t visible in the calling method. This is because the changes are made\r\nto a new object and not to the one that was initially passed to this method. The method\r\nrepair assigns a new object to the reference variable laptop that is passed to it and then\r\nmodifies its state. Hence, the changes made to the state of the method parameter laptop\r\naren’t visible in method main, and it prints the value of life.memory as 1 GB.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (170, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will enable a reference variable of type Roamable to refer to an object of the Phone class? (Select 1 option.)', 'interface Roamable{}\r\nclass Phone {}\r\nclass Tablet extends Phone implements Roamable {\r\n//INSERT CODE HERE\r\n}', 'Option (a) is incorrect. Without explicit casting, a reference variable of\r\ntype Roamable can’t refer to an object of the class Phone.\r\nOption (b) is incorrect because this is an invalid line of code that will fail to compile.\r\nOption (d) is incorrect because a reference variable of type Roamable can refer to\r\nan object of the class Phone with an explicit cast.\r\nNote that although option (c) will compile, it will throw a ClassCastException if\r\nit is executed.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (171, 'Which of the following statements is incorrect about the main method used to start a Java application? (Select 2 options.)', '', 'Option (a) is a true statement. Even though you can define multiple\r\nmethods with the name main in a class, you can define only one main method to start\r\na Java application. This question specifically asks you about the main method used to\r\nstart a Java application.\r\nOption (b) is a true statement. Multiple classes in an application may define the\r\nmain method.\r\nOption (c) is a false statement. The main method must accept either a String array\r\nor varargs (String... arg) as a method argument. It can’t accept a String object.\r\nOption (d) is a false statement. There are no limitations on the types of the objects\r\nthat this method can create. This includes the object of the class in which the main\r\nmethod is defined.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (172, 'What is the output of the following code? (Select 1 option.)', 'class Paper {\r\nPaper() {\r\nthis(10);\r\nSystem.out.println("Paper:0");\r\n}\r\nPaper(int a) { System.out.println("Paper:1"); }\r\n}\r\nclass PostIt extends Paper {}\r\nclass TestPostIt {\r\npublic static void main(String[] args) {\r\nPaper paper = new PostIt();\r\n}\r\n}', 'new PostIt() creates an object of the class PostIt by calling its compilerprovided\r\nno-argument constructor. The no-argument constructor of class PostIt calls\r\nits base class no-argument constructor, which calls the other constructor that accepts\r\none int method argument. The constructor that accepts an int argument prints\r\nPaper:1 and then returns the control to the no-argument constructor. The no-argument\r\nconstructor then prints Paper:0.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (173, 'Examine the following code and select the correct statement (choose 1 option):', 'class StringBuilders { <line1\r\npublic static void main(String... args) { <line2\r\nStringBuilder sb1 = new StringBuilder("eLion"); <line3\r\nString ejg = null; <line4\r\nejg = sb1.append("X").substring(sb1.indexOf("L"), sb1.indexOf("X")); <line5\r\nSystem.out.println(ejg); <line6\r\n}  <line7\r\n}  <line8', 'Option (a) is incorrect and option (b) is correct. The substring\r\nmethod doesn’t include the character at the end position in the result that it returns.\r\nHence, the code prints Lion.\r\nOption (c) is incorrect. If line 5 is changed as suggested in this option, the code won’t\r\ncompile. You can’t pass a char to StringBuilder’s method indexOf; it accepts String.\r\nOption (d) is incorrect because there are no compilation issues with the code.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (174, 'When considered individually, which of the options is correct for the following code? (Select 1 option.)', 'interface Jumpable { void jump(); }\r\nclass Chair implements Jumpable {\r\npublic void jump() {\r\nSystem.out.println("Chair cannot jump");\r\n}\r\n}', 'Option (a) is incorrect. The name of the interface or class doesn’t matter\r\nwhen it comes to whether a class can implement an interface. If a class implements\r\nan interface, it should implement all of the methods defined by the interface.\r\nOption (c) is incorrect. If the definition of the method jump is removed from the\r\nclass Chair, it will no longer compile. Because Chair implements the interface Jumpable,\r\nit should implement all of the methods defined in the interface Jumpable.\r\nOption (d) is incorrect. If the name of the method jump is changed to run in the interface\r\nJumpable, the class Chair should implement this method to compile successfully.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (175, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will enable the class Jungle to determine whether the reference variable animal refers to an object of the class Lion and print 1? (Select 1 option.)', 'class Animal{ float age; }\r\nclass Lion extends Animal { int claws;}\r\nclass Jungle {\r\npublic static void main(String args[]) {\r\nAnimal animal = new Lion();\r\n/* INSERT CODE HERE */\r\nSystem.out.println(1);\r\n}\r\n}', 'Option (b) is incorrect because the correct operator name is instanceof\r\nand not instanceOf (note the capitalized O).\r\nOptions (c) and (d) are incorrect. Neither of these lines of code will compile\r\nbecause they are trying to compare and assign a class name to a variable, which\r\nisn’t allowed.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (176, 'Given that the file Test.java, which defines the following code, fails to compile, select the reasons for the compilation failure (choose 2 options):', 'class Person {\r\nPerson(String value) {}\r\n}\r\nclass Employee extends Person {}\r\nclass Test {\r\npublic static void main(String args[]) {\r\nEmployee e = new Employee();\r\n}\r\n}', 'The class Employee doesn’t compile, so class Test can’t use a variable of\r\ntype Employee, and it fails to compile.\r\nWhile trying to compile the class Employee, the Java compiler generates a default\r\nconstructor for it, which looks like the following:\r\nEmployee() {\r\nsuper();\r\n}\r\nNote that a derived class constructor must always call a base class constructor. When\r\nJava generates the previous default constructor for the class Employee, it fails to compile\r\nbecause the base class doesn’t have a no-argument constructor. The default constructor\r\nthat’s generated by Java can only define a call to a no-argument constructor in\r\nthe base class. It can’t call any other base class constructor.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (177, 'Select the correct statements. (Choose 4 options.)', '', 'Option (d) is incorrect because java.lang.Exception is a subclass of\r\njava.lang.Throwable.\r\nOption (e) is incorrect because the class java.lang.Exception isn’t a subclass of\r\njava.lang.Error. Both of these classes subclass java.lang.Throwable.\r\nOption (g) is incorrect because java.lang.Error is a subclass of java.lang\r\n.Throwable.\r\nOption (h) is incorrect because the Java API doesn’t define any class Checked-\r\nException in package java.lang.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (178, 'Examine the following code and select the correct statements (choose 2 options):', 'class Bottle {\r\nvoid Bottle() {}\r\nvoid Bottle(WaterBottle w) {}\r\n}\r\nclass WaterBottle extends Bottle {}', 'A base class can use reference variables and objects of its derived classes.\r\nNote that the methods defined in the class Bottle aren’t constructors but regular\r\nmethods with the name Bottle. The return type of a constructor isn’t void.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (179, 'Given the following code, which option, if used to replace /* INSERT CODE HERE */, will cause the code to print 110? (Select 1 option.)', 'class Book {\r\nprivate int pages = 100;\r\n}\r\n\r\nclass Magazine extends Book {\r\nprivate int interviews = 2;\r\nprivate int totalPages() { /* INSERT CODE HERE */ }\r\npublic static void main(String[] args) {\r\nSystem.out.println(new Magazine().totalPages());\r\n}\r\n}', 'The variable pages has private access in the class Book, and it can’t be\r\naccessed from outside this class.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (180, 'Given that the method write has been defined as follows, which of the following options, when inserted at //INSERT CODE HERE, will define valid use of the method write in the method article? (Select 2 options.)', 'class NoInkException extends Exception {}\r\nclass Pen{\r\nvoid write(String val) throws NoInkException {\r\n//.. some code\r\n}\r\nvoid article() {\r\n//INSERT CODE HERE\r\n}\r\n}', 'Because NoInkException extends the class Exception and not Runtime-\r\nException, NoInkException is a checked exception. When you call a method that\r\nthrows a checked exception, you can either handle it using a try-catch block or\r\ndeclare it to be thrown in your method signature.\r\nOption (a) is correct because a call to the method write is enclosed within a try\r\nblock. The try block is followed by a catch block, which defines a handler for the\r\nexception NoInkException.\r\nOption (b) is incorrect. The call to the method write is enclosed within a try block,\r\nfollowed by a finally block. The finally block is not used to handle an exception.\r\nOption (c) is correct. Because NoInkException is a subclass of Exception, an\r\nexception handler for the class Exception can handle the exception NoInkException\r\nas well.\r\nOption (d) is incorrect. This option defines an exception handler for the class\r\nRuntimeException. Because NoInkException is not a subclass of RuntimeException,\r\nthis code won’t handle NoInkException.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (181, 'What is the output of the following code? (Select 1 option.)', 'class EMyMethods {\r\nstatic String name = "m1";\r\nvoid riverRafting() {\r\nString name = "m2";\r\nif (8 > 2) {\r\nString name = "m3";\r\nSystem.out.println(name);\r\n}\r\n}\r\npublic static void main(String[] args) {\r\nEMyMethods m1 = new EMyMethods();\r\nm1.riverRafting();\r\n}\r\n}', 'The class EMyMethods defines three variables with the name name:\r\n■ The static variable name with the value "m1".\r\n■ The local variable name in method riverRafting with the value "m2".\r\n■ The variable name, local to the if block in the method riverRafting, with the\r\nvalue "m3".\r\nThe code fails to compile due to the definition of two local variables with the same\r\nname (name) in the method riverRafting. If this code were allowed to compile,\r\nthe scope of both these local variables would overlap—the variable name defined\r\noutside the if block would be accessible to the complete method riverRafting.\r\nThe scope of the local variable name, defined within the if block, would be limited\r\nto the if block.\r\nWithin the if block, how do you think the code would differentiate between these\r\nlocal variables? Because there is no way to do so, the code fails to compile.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (182, 'What is the output of the following code? (Select 1 option.)', 'class EBowl {\r\npublic static void main(String args[]) {\r\nString eFood = "Corn";\r\nSystem.out.println(eFood);\r\nmix(eFood);\r\nSystem.out.println(eFood);\r\n}\r\nstatic void mix(String foodIn) {\r\nfoodIn.concat("A");\r\nfoodIn.replace(''C'', ''B'');\r\n}\r\n}\r\n\r\n', 'String objects are immutable. This implies that using any method can’t\r\nchange the value of a String variable. In this case, the String object is passed to a\r\nmethod, which seems to, but doesn’t, change the contents of String.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (183, 'Which statement is true for the following code? (Select 1 option.)', 'class SwJava {\r\npublic static void main(String args[]) {\r\nString[] shapes = {"Circle", "Square", "Triangle"};\r\nswitch (shapes) {\r\ncase "Square": System.out.println("Circle"); break;\r\ncase "Triangle": System.out.println("Square"); break;\r\ncase "Circle": System.out.println("Triangle"); break;\r\n}\r\n}\r\n}', 'The question tries to trick you; it passes a String value to a switch construct\r\nby passing it an array of String objects. The code fails to compile because an\r\narray isn’t a valid argument to a switch construct. The code would have compiled if it\r\npassed an element from the array shapes (shapes[0], shapes[1], and shapes[2]).', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (184, 'Which of the following options include the ideal conditions for choosing to use a do-while loop over a while loop? (Select 2 options.)', '', 'Option (a) is correct. A menu should be displayed to a user at least once\r\nso that she can select whether she wants to exit an application.\r\nOption (b) is incorrect. Because the condition of possession of an identity card\r\nshould be checked before a student is allowed to sit an exam, this condition is best\r\nimplemented using a while loop.\r\nOption (c) is correct. Because a person should be served the food at least once before\r\nasking whether he needs more, this condition is best implemented using a do-while loop.\r\nOption (d) is incorrect. Because none of the passengers would be allowed to board\r\nwithout a boarding pass, this condition is best implemented using a while loop.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (185, 'Given the following definition of the classes Person, Father, and Home, which option, if used to replace /* INSERT CODE HERE */, will cause the code to compile successfully (select 3 options):', 'class Person {}\r\nclass Father extends Person {\r\npublic void dance() throws ClassCastException {}\r\n}\r\nclass Home {\r\npublic static void main(String args[]) {\r\nPerson p = new Person();\r\ntry {\r\n((Father)p).dance();\r\n}\r\n//INSERT CODE HERE\r\n}\r\n}', 'Because NullPointerException and ClassCastException don’t share a\r\nbase class–derived class relationship, these can be placed before or after each other.\r\nThe class Throwable is the base class of Exception. Hence, the exception handler\r\nfor the class Throwable can’t be placed before the exception handler of the\r\nclass Exception. Similarly, Exception is a base class for NullPointerException and\r\nClassCastException. Hence, the exception handler for the class Exception can’t\r\nbe placed before the exception handlers of either the class ClassCastException or\r\nNullPointerException.\r\nOption (e) is okay because no checked exceptions are defined to be thrown.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (186, 'What is the output of the following code? (Select 1 option.)', 'class Camera {\r\npublic static void main(String args[]) {\r\nString settings;\r\nwhile (false) {\r\nsettings = "Adjust settings manually";\r\n}\r\nSystem.out.println("Camera:" + settings);\r\n}\r\n}', 'The key to answering this question is to remember that if the compiler\r\nfinds unreachable code at compilation time, the code won’t compile. Use of the literal\r\nvalue false in the while loop will ensure that the code in the loop’s body won’t execute,\r\nand this can be determined by the compiler at compilation time.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (187, 'The output of the class TestEJavaCourse, defined as follows, is 300: What will happen if the variable enrollments is defined as a static variable? (Select 1 option.)', 'class Course {\r\nint enrollments;\r\n}\r\nclass TestEJavaCourse {\r\npublic static void main(String args[]) {\r\nCourse c1 = new Course();\r\nCourse c2 = new Course();\r\nc1.enrollments = 100;\r\nc2.enrollments = 200;\r\nSystem.out.println(c1.enrollments + c2.enrollments);\r\n}\r\n}', 'The code doesn’t fail compilation after the definition of the variable\r\nenrollments is changed to a static variable. A static variable can be accessed using\r\na variable reference of the class in which it’s defined. All the objects of a class share\r\nthe same copy of the static variable. When the variable enrollments is modified\r\nusing the reference variable c2, c1.enrollments is also equal to 200. Hence, the code\r\nprints 200+200, that is, 400.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (188, 'What is the output of the following code? (Select 1 option.)', 'String ejgStr[] = new String[][]{{null},new String[]{"a","b","c"},{new\r\nString()}}[0] ;\r\nString ejgStr1[] = null;\r\nString ejgStr2[] = {null};\r\n\r\nSystem.out.println(ejgStr[0]);\r\nSystem.out.println(ejgStr2[0]);\r\nSystem.out.println(ejgStr1[0]);', 'The trickiest assignment in this code is the assignment of variable ejgStr.\r\nThe following line of code may seem to (but doesn’t) assign a two-dimensional String\r\narray to the variable ejgStr:\r\nString ejgStr[] = new String[][]{{null},new String[]{"a","b","c"},{new\r\nString()}}[0] ;\r\nThe preceding code assigns the first element of a two-dimensional String array to the\r\nvariable ejgStr.\r\nBecause ejgStr refers to an array of length 1 ({null}), ejgStr[0] prints null. ejgStr2\r\nalso refers to an array of length 1 ({null}), so ejgStr2[0] also prints null. ejgStr1\r\nrefers to null, not to an array. An attempt to access the first element of ejgStr1 throws\r\nNullPointerException.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (189, 'Examine the following code and select the correct statement (choose 1 option):', 'import java.util.*;\r\nclass Person {}\r\nclass Emp extends Person {}\r\nclass TestArrayList {\r\npublic static void main(String[] args) {\r\nArrayList<Object> list = new ArrayList<>();\r\nlist.add(new String("1234")); //LINE1\r\nlist.add(new Person()); //LINE2\r\nlist.add(new Emp()); //LINE3\r\nlist.add(new String[]{"abcd", "xyz"}); //LINE4\r\n}\r\n}', 'The type of an ArrayList determines the type of the objects that can be\r\nadded to it. An ArrayList can add to it all the objects of its derived class. Because the\r\nclass Object is the superclass of all Java classes, the ArrayList list as defined in this\r\nquestion will accept all types of objects, including arrays, because they are also objects.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (190, 'What is the output of the following code? (Select 1 option.)', 'public class If2 {\r\npublic static void main(String args[]) {\r\nint a = 10; int b = 20; boolean c = false;\r\nif (b > a) if (++a == 10) if (c!=true) System.out.println(1);\r\nelse System.out.println(2); else System.out.println(3);\r\n}\r\n}', 'The key to answering questions about unindented code is to indent it.\r\nHere’s how:\r\nif (b > a)\r\nif (++a == 10)\r\nif (c!=true)\r\nSystem.out.println(1);\r\nelse\r\nSystem.out.println(2);\r\nelse System.out.println(3);\r\nNow the code becomes much simpler to look at and understand. Remember that the\r\nlast else statement belongs to the inner if (++a == 10). As you can see, if (++a ==\r\n10) evaluates to false, and the code will print 3.', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (191, 'Select the incorrect statement (choose 1 option):', '', 'Note that this question asks you to select the incorrect statements.\r\nAll the looping constructs—a regular for loop, an enhanced for loop, and dowhile\r\nand while loops—can be used to iterate through elements of an array and\r\nArrayList. But the notion of a loop counter is available only for the for loop. A loop\r\ncounter is a variable that’s defined and accessible with the definition of the for loop.\r\nIn the following quick example, the variable ctr is referred to as a loop counter:\r\nfor (int ctr=0; ctr< 10; ++ctr)', 8, 1);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (192, 'What is the result of the following class? (Choose all that apply)', 'public class _C {\r\nprivate static int $;\r\npublic static void main(String[] main) {\r\nString a_b;\r\nSystem.out.print($);\r\nSystem.out.print(a_b);\r\n} }', 'Option E is correct because local variables require assignment before referencing\r\nthem. Option D is incorrect because class and instance variables have default values\r\nand allow referencing. a_b defaults to a null value. Options A, B, and C are incorrect\r\nbecause identifiers may begin with a letter, underscore, or dollar sign. Options F and\r\nG are incorrect because the code does not compile. If a_b was an instance variable, the\r\ncode would compile and output 0null.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (193, 'What is the result of the following code?', 'String s1 = "Java";\r\nString s2 = "Java";\r\nStringBuilder sb1 = new StringBuilder();\r\nsb1.append("Ja").append("va");\r\nSystem.out.println(s1 == s2);\r\nSystem.out.println(s1.equals(s2));\r\nSystem.out.println(sb1.toString() == s1);\r\nSystem.out.println(sb1.toString().equals(s1)); For more information, see Chapter 1.', 'String literals are used from the string pool. This means that s1 and s2 refer to the\r\nsame object and are equal. Therefore, the first two print statements print true. The\r\nthird print statement prints false because toString() uses a method to compute the\r\nvalue and it is not from the string pool. The final print statement again prints true\r\nbecause equals() looks at the values of String objects.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (194, 'What is the output of the following code? (Choose all that apply)', 'interface HasTail { int getTailLength(); }\r\nabstract class Puma implements HasTail {\r\nprotected int getTailLength() {return 4;}\r\n}\r\npublic class Cougar extends Puma {\r\npublic static void main(String[] args) {\r\nPuma puma = new Puma();\r\nSystem.out.println(puma.getTailLength());\r\n}\r\n\r\npublic int getTailLength(int length) {return 2;}\r\n}', 'First, the method getTailLength() in the interface HasTail is assumed to be\r\npublic, since it is part of an interface. The implementation of the method on line 3 is\r\ntherefore an invalid override, as protected is a more restrictive access modifier than\r\npublic, so option C is correct. Next, the class Cougar implements an overloaded version\r\nof getTailLength(), but since the declaration in the parent class Puma is invalid,\r\nit needs to implement a public version of the method. Since it does not, the declaration\r\nof Puma is invalid, so option D is correct. Option E is incorrect, since Puma is marked\r\nabstract and cannot be instantiated. The overloaded method on line 11 is declared\r\ncorrectly, so option F is not correct. Finally, as the code has multiple compiler errors,\r\noptions A, B, and G can be eliminated.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (195, 'What is the output of the following program?', 'public class FeedingSchedule {\r\npublic static void main(String[] args) {\r\nboolean keepGoing = true;\r\nint count = 0;\r\nint x = 3;\r\nwhile(count++ < 3) {\r\nint y = (1 + 2 * count) % 3;\r\nswitch(y) {\r\ndefault:\r\ncase 0: x -= 1; break;\r\ncase 1: x += 5;\r\n}\r\n}\r\nSystem.out.println(x);\r\n} }', 'The code compiles and runs without issue; therefore, option F is incorrect. This type\r\nof problem is best examined one loop iteration at a time:\r\n■ The loop continues as count loop expression evaluates to 0 < 3, which is true,\r\nwith y taking a new value of 1. The value of y is set to:\r\ny = (1 + 2 * 1) % 3\r\n= (1 + 2) % 3\r\n= 3 % 3\r\n= 0\r\n■ The first case block is called and the value of x is then set to:\r\nx = 3 - 1 = 2\r\n■ The loop continues as count loop expression evaluates to 1 < 3, which is true,\r\nwith y taking a new value of 2. The value of y is set to:\r\ny = (1 + 2 * 2) % 3\r\n= (1 + 4) % 3\r\n= 4 % 3\r\n= 2\r\n■ The default block is called and the value of x is set to:\r\nx = 2 - 1 = 1\r\n■ The loop continues as the count loop expression evaluates to 2 < 3, which is true,\r\nwith y taking a new value of 3. The value of y is set to:\r\ny = (1 + 2 * 3) % 3\r\n= (1 + 6) % 3\r\n= 7 % 3\r\n= 1\r\n■ The second case block is called and the value of x is then set to:\r\nx = 1 + 5 = 6\r\n■ The loop ends as the count loop expression evaluates to 3 < 3, with y also taking a\r\nnew value of 4. The most recent value of x, 6, is output, so the answer is option C.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (196, 'What is the output of the following code snippet?', 'System.out.print("a");\r\ntry {\r\nSystem.out.print("b");\r\nthrow new IllegalArgumentException();\r\n} catch (RuntimeException e) {\r\nSystem.out.print("c");\r\n} finally {\r\nSystem.out.print("d");\r\n}\r\nSystem.out.print("e");', 'The code starts running and prints a and b on lines 13 and 15. Line 16 throws an\r\nexception, which is caught on line 17. After line 18 prints c, the finally block is run\r\nand d is printed. Then the try statement ends and e is printed on line 22.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (197, 'What is the result of the following program?', 'public class MathFunctions {\r\npublic static void addToInt(int x, int amountToAdd) {\r\nx = x + amountToAdd;\r\n}\r\npublic static void main(String[] args) {\r\nint a = 15;\r\nint b = 10;\r\nMathFunctions.addToInt(a, b);\r\nSystem.out.println(a); } }', 'The code compiles successfully, so options D and E are incorrect. The value of a\r\ncannot be changed by the addToInt method, no matter what the method does, because\r\nonly a copy of the variable is passed into the parameter x. Therefore, a does not change\r\nand the output on line 9 is 15.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (198, 'What is the result of the following code?', 'int[] array = {6,9,8};\r\nList<Integer> list = new ArrayList<>();\r\nlist.add(array[0]);\r\nlist.add(array[2]);\r\nlist.set(1, array[1]);\r\nlist.remove(0);\r\nSystem.out.println(list);', 'The array is allowed to use an anonymous initializer because it is in the same line as\r\nthe declaration. The ArrayList uses the diamond operator allowed since Java 7. This\r\nspecifies the type matches the one on the left without having to re-type it. After adding\r\nthe two elements, list contains [6, 8]. We then replace the element at index 1 with 9,\r\nresulting in [6, 9]. Finally, we remove the element at index 0, leaving [9]. Option C\r\nis incorrect because arrays output something like that rather than an ArrayList.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (199, 'What is the output of the following code?', 'public class Deer {\r\npublic Deer() { System.out.print("Deer"); }\r\npublic Deer(int age) { System.out.print("DeerAge"); }\r\nprivate boolean hasHorns() { return false; }\r\npublic static void main(String[] args) {\r\nDeer deer = new Reindeer(5);\r\nSystem.out.println(","+deer.hasHorns());\r\n}\r\n}\r\nclass Reindeer extends Deer {\r\npublic Reindeer(int age) { System.out.print("Reindeer"); }\r\npublic boolean hasHorns() { return true; }\r\n}', 'The code compiles and runs without issue, so options G and H are incorrect. First,\r\nthe Reindeer object is instantiated using the constructor that takes an int value. Since\r\nthere is no explicit call to the parent constructor, the default no-argument super()\r\nis inserted as the first line of the constructor. The output is then Deer, followed by\r\nReindeer in the child constructor, so only options A and B can be correct. Next,\r\nthe method hasHorns() looks like an overridden method, but it is actually a hidden\r\nmethod since it is declared private in the parent class. Because the hidden method is\r\nreferenced in the parent class, the', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (200, 'Which of the following statements are true? (Choose all that apply)', '', 'Only checked exceptions are required to be handled (caught) or declared. Runtime\r\nexceptions are commonly thrown by both the JVM and programmer code.\r\nChecked exceptions are usually thrown by programmer code. Errors are intended to be\r\nthrown by the JVM. While a programmer could throw one, this would be a horrible\r\npractice.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (201, 'Which are true of the following code? (Choose all that apply)', 'import java.util.*;\r\npublic class Grasshopper {\r\npublic Grasshopper(String n) {\r\nname = n;\r\n}\r\npublic static void main(String[] args) {\r\nGrasshopper one = new Grasshopper("g1");\r\nGrasshopper two = new Grasshopper("g2");\r\none = two;\r\ntwo = null;\r\none = null;\r\n}\r\nprivate String name; }', 'Immediately after line 9, only Grasshopper g1 is eligible for garbage collection\r\nsince both one and two point to Grasshopper g2. Immediately after line 10, we still\r\nonly have Grasshopper g1 eligible for garbage collection. Reference one points to g1\r\nand reference two is null. Immediately after line 11, both Grasshopper objects are eligible\r\nfor garbage collection since both one and two point to null. The code does compile.\r\nAlthough it is traditional to declare instance variables early in the class, you don’t\r\nhave to.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (202, 'What is the output of the following program?', 'public class FeedingSchedule {\r\npublic static void main(String[] args) {\r\nint x = 5, j = 0;\r\nOUTER: for(int i=0; i<3; )\r\nINNER: do {\r\ni++; x++;\r\nif(x > 10) break INNER;\r\nx += 4;\r\nj++;\r\n} while(j <= 2);\r\nSystem.out.println(x);\r\n} }', 'The code compiles and runs without issue; therefore, options E and F are incorrect.\r\nThis type of problem is best examined one loop iteration at a time:\r\n■ On the first iteration of the outer loop i is 0, so the loop continues.\r\n■ On the first iteration of the inner loop, i is updated to 1 and x to 6. The if-then\r\nstatement branch is not executed, and x is increased to 10 and j to 1.\r\n■ On the second iteration of the inner loop (since j = 1 and 1 <= 2), i is updated\r\nto 2 and x to 11. At this point, the if-then branch will evaluate to true for the\r\nremainder of the program run, which causes the flow to break out of the inner\r\nloop each time it is reached.\r\n■ On the second iteration of the outer loop (since i = 2), i is updated to 3 and x to\r\n12. As before, the inner loop is broken since x is still greater than 10.\r\n■ On the third iteration of the outer loop, the outer loop is broken, as i is already\r\nnot less than 3. The most recent value of x, 12, is output, so the answer is option B.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (203, 'What is the result of the following program?', 'public class Egret {\r\nprivate String color;\r\npublic Egret() {\r\nthis("white");\r\n}\r\npublic Egret(String color) {\r\ncolor = color;\r\n}\r\npublic static void main(String[] args) {\r\nEgret e = new Egret();\r\nSystem.out.println("Color:" + e.color);\r\n}\r\n}', 'Line 10 calls the constructor on lines 3–5. That constructor calls the other constructor.\r\nHowever, the constructor on lines 6–8 assigns the method parameter to itself,\r\nwhich leaves the color instance variable on line 2 set to its default value of null.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (204, 'What is the output of the following program?', 'public class BearOrShark {\r\npublic static void main(String[] args) {\r\nint luck = 10;\r\nif((luck>10 ? luck++: --luck)<10) {\r\nSystem.out.print("Bear");\r\n} if(luck<10) System.out.print("Shark");\r\n} }', 'The code compiles and runs without issue, so options D and E are correct. Remember\r\nthat only one of the right-hand ternary expressions will be evaluated at runtime.\r\nSince luck is not less than 10, the second expression, --luck, will be evaluated, and\r\nsince the pre-increment operator was used, the value returned will be 9, which is less\r\nthan 10. So the first if-then statement will be visited and Bear will be output. Notice\r\nthere is no else statement on line 6. Since luck is still less than 10, the second if-then\r\nstatement will also be reached and Shark will be output; therefore, the correct answer\r\nis option C.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (205, 'Assuming we have a valid, non-null HenHouse object whose value is initialized by the blank line shown here, which of the following are possible outputs of this application? (Choose all that apply)', 'class Chicken {}\r\ninterface HenHouse { public java.util.List<Chicken> getChickens(); }\r\npublic class ChickenSong {\r\npublic static void main(String[] args) {\r\nHenHouse house = ______________\r\nChicken chicken = house.getChickens().get(0);\r\nfor(int i=0; i<house.getChickens().size();\r\nchicken = house.getChickens().get(i++)) {\r\nSystem.out.println("Cluck");\r\n} } }', 'The code compiles without issue, so options A and B are incorrect. If house\r\n.getChickens() returns an array of one element, the code will output Cluck once, so\r\noption D is correct. If house.getChickens() returns an array of multiple elements, the\r\ncode will output Cluck once for each element in the array, so option E is correct. Alternatively,\r\nif house.getChickens() returns an array of zero elements, then the code will\r\nthrow an IndexOutOfBoundsException on the call to house.getChickens().get(0);\r\ntherefore, option C is not possible and option F is correct. The code will also throw an\r\nexception if the array returned by house.getChickens() is null, so option F is possible\r\nunder multiple circumstances.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (206, 'Which of the following statements can be inserted in the blank line so that the code will compile successfully? (Choose all that apply)', 'public interface CanSwim {}\r\npublic class Amphibian implements CanSwim {}\r\nclass Tadpole extends Amphibian {}\r\npublic class FindAllTadPole {\r\npublic static void main(String[] args) {\r\nList<Tadpole> tadpoles = new ArrayList<Tadpole>();\r\nfor(Amphibian amphibian : tadpoles) {\r\n___________ tadpole = amphibian;\r\n} } }', 'The for-each loop automatically casts each Tadpole object to an Amphibian\r\nreference, which does not require an explicit cast because Tadpole is a subclass of\r\nAmphibian. From there, any parent class or interface that Amphibian inherits from is\r\npermitted without an explicit cast. This includes CanSwim, the interface Amphibian\r\nimplements, and Object, which all classes extend from, so options A and E are correct.\r\nOption C is also correct since the reference is being cast to the same type, so no explicit\r\ncast is required. Option B is incorrect, since Long is not a parent of Amphibian. Option\r\nD is incorrect as well, although an explicit cast to Tadpole on the right-hand side of the\r\nexpression would be required to allow the code to compile.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (207, 'What individual changes, if any, would allow the following code to compile? (Choose all that apply)', 'public interface Animal { public default String getName() { return null; } }\r\ninterface Mammal { public default String getName() { return null; } }\r\nabstract class Otter implements Mammal, Animal {}', 'The code does not compile, since a class cannot inherit two interfaces that\r\nboth define default methods with the same signature, unless the class implementing\r\nthe interfaces overrides it with an abstract or concrete method. Therefore, option A is\r\nincorrect and options F and G are correct. The alternate approach is to make the\r\ngetName() method abstract in the interfaces, because an interface may inherit two\r\nabstract methods with the same signature. The change must be made to both interfaces,\r\nthough, so options B and C are incorrect if taken individually, and option D is\r\ncorrect since the changes are taken together.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (208, 'Which of the following lines can be inserted at line 11 to print true? (Choose all that apply)', 'public static void main(String[] args) {\r\n// INSERT CODE HERE\r\n}\r\nprivate static boolean test(Predicate<Integer> p) {\r\nreturn p.test(5);\r\n}', 'The only functional programming interface you need to memorize for the\r\nexam is Predicate. It takes a single parameter and returns a boolean. Lambda expressions\r\nwith one parameter are allowed to omit the parentheses around the parameter\r\nlist, making options A and C correct. The return statement is optional when a single\r\nstatement is in the body, making option F correct. Option B is incorrect because a\r\nreturn statement must be used if braces are included around the body. Options D and\r\nE are incorrect because the type is Integer in the predicate and int in the lambda.\r\nAutoboxing works for collections not inferring predicates. If these two were changed\r\nto Integer, they would be correct.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (209, 'Which of the following print out a date representing April 1, 2015? (Choose all that apply)', '', 'The new date APIs added in Java 8 use static methods rather than a constructor\r\nto create a new date, making options E and F incorrect. The months are indexed starting\r\nwith 1 in these APIs, making options A and C incorrect. Option A uses the old\r\nCalendar constants which are indexed from 0. Therefore, options B and D are correct.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (210, 'Bytecode is in a file with which extension?', '', 'Files with the .java extension contain the Java source code and are compiled to\r\nfiles with the .class extension that contain the bytecode.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (211, 'Which of the following are checked exceptions? (Choose all that apply)', '', 'Option A is the exception base class, which is a checked exception. Options B,\r\nD, and E extend RuntimeException directly or indirectly and therefore are unchecked\r\nexceptions. Option F is a throwable and not an exception, and so should not be caught\r\nor declared.', 9, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (212, 'Which of the following are valid Java identifiers? (Choose all that apply)', '', 'Option A is valid because you can use the dollar sign in identifiers. Option B is\r\nvalid because you can use an underscore in identifiers. Option C is not a valid identifier\r\nbecause true is a Java reserved word. Option D is not valid because the dot (.) is not\r\nallowed in identifiers. Option E is valid because Java is case sensitive, so Public is not\r\na reserved word and therefore a valid identifier. Option F is not valid because the first\r\ncharacter is not a letter, $, or _.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (213, 'What is the output of the following program?', 'public class WaterBottle {\r\nprivate String brand;\r\nprivate boolean empty;\r\npublic static void main(String[] args) {\r\nWaterBottle wb = new WaterBottle();\r\nSystem.out.print("Empty = " + wb.empty);\r\nSystem.out.print(", Brand = " + wb.brand);\r\n} }', 'Boolean fields initialize to false and references initialize to null, so empty is false\r\nand brand is null. Brand = null is output.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (214, 'Which of the following are true? (Choose all that apply)', '4: short numPets = 5;\r\n5: int numGrains = 5.6;\r\n6: String name = "Scruffy";\r\n7: numPets.length();\r\n8: numGrains.length();\r\n9: name.length();', 'Option A (line 4) compiles because short is an integral type. Option B (line\r\n5) generates a compiler error because int is an integral type, but 5.6 is a floating-point\r\ntype. Option C (line 6) compiles because it is assigned a String. Options D and E (lines\r\n7 and 8) do not compile because short and int are primitives. Primitives do not allow\r\nmethods to be called on them. Option F (line 9) compiles because length() is defined\r\non String.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (215, 'Given the following class, which of the following is true? (Choose all that apply)', 'public class Snake {\r\n\r\npublic void shed(boolean time) {\r\n\r\nif (time) {\r\n\r\n}\r\nSystem.out.println(result);\r\n\r\n}\r\n}', 'Adding the variable at line 2 makes result an instance variable. Since instance\r\nvariables are in scope for the entire life of the object, option A is correct. Option B is\r\ncorrect because adding the variable at line 4 makes result a local variable with a scope\r\nof the whole method. Adding the variable at line 6 makes result a local variable with\r\na scope of lines 6–7. Since it is out of scope on line 8, the println does not compile and\r\noption C is incorrect. Adding the variable at line 9 makes result a local variable with\r\na scope of lines 9 and 10. Since line 8 is before the declaration, it does not compile and\r\noption D is incorrect. Finally, option E is incorrect because the code can be made to\r\ncompile.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (216, 'Given the following classes, which of the following can independently replace INSERT IMPORTS HERE to make the code compile? (Choose all that apply)', 'package aquarium;\r\npublic class Tank { }\r\npackage aquarium.jellies;\r\npublic class Jelly { }\r\npackage visitor;\r\nINSERT IMPORTS HERE\r\npublic class AquariumVisitor {\r\npublic void admire(Jelly jelly) { } }', 'Option C is correct because it imports Jelly by classname. Option D is correct\r\nbecause it imports all the classes in the jellies package, which includes Jelly.\r\nOption A is incorrect because it only imports classes in the aquarium package—Tank\r\nin this case—and not those in lower-level packages. Option B is incorrect because you\r\ncannot use wildcards anyplace other than the end of an import statement. Option E is\r\nincorrect because you cannot import parts of a class with a regular import statement.\r\nOption F is incorrect because options C and D do make the code compile.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (217, 'Given the following classes, what is the maximum number of imports that can be removed and have the code still compile?', 'package aquarium; public class Water { }\r\npackage aquarium;\r\nimport java.lang.*;\r\nimport java.lang.System;\r\nimport aquarium.Water;\r\nimport aquarium.*;\r\npublic class Tank {\r\npublic void print(Water water) {\r\nSystem.out.println(water); } }', 'The first two imports can be removed because java.lang is automatically imported.\r\nThe second two imports can be removed because Tank and Water are in the same package,\r\nmaking the correct answer E. If Tank and Water were in different packages, one of\r\nthese two imports could be removed. In that case, the answer would be option D.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (218, 'Given the following classes, which of the following snippets can be inserted in place of INSERT IMPORTS HERE and have the code compile? (Choose all that apply)', 'package aquarium;\r\npublic class Water {\r\nboolean salty = false;\r\n}\r\npackage aquarium.jellies;\r\npublic class Water {\r\nboolean salty = true;\r\n}\r\npackage employee;\r\nINSERT IMPORTS HERE\r\npublic class WaterFiller {\r\nWater water;\r\n}', 'Option A is correct because it imports all the classes in the aquarium package\r\nincluding aquarium.Water. Options B and C are correct because they import Water by\r\nclassname. Since importing by classname takes precedence over wildcards, these compile.\r\nOption D is incorrect because Java doesn’t know which of the two wildcard Water\r\nclasses to use. Option E is incorrect because you cannot specify the same classname in\r\ntwo imports.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (219, 'Given the following class, which of the following calls print out Blue Jay? (Choose all that apply)', 'public class BirdDisplay {\r\npublic static void main(String[] name) {\r\nSystem.out.println(name[1]);\r\n} }', 'Option B is correct because arrays start counting from zero and strings with spaces\r\nmust be in quotes. Option A is incorrect because it outputs Blue. C is incorrect because\r\nit outputs Jay. Option D is incorrect because it outputs Sparrow. Options E and F are\r\nincorrect because they output Error: Could not find or load main class Bird-\r\nDisplay.class.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (220, 'Which of the following legally fill in the blank so you can run the main() method from the command line? (Choose all that apply)', 'public static void main(________)', 'Option A is correct because it is the traditional main() method signature\r\nand variables may begin with underscores. Options C and D are correct because the\r\narray operator may appear after the variable name. Option E is correct because\r\nvarargs are allowed in place of an array. Option B is incorrect because variables are\r\nnot allowed to begin with a digit. Option F is incorrect because the argument must be\r\nan array or varargs. Option F is a perfectly good method. However, it is not one that\r\ncan be run from the command line because it has the wrong parameter type.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (221, 'Which of the following are legal entry point methods that can be run from the command line? (Choose all that apply)', '', 'Option E is the canonical main() method signature. You need to memorize it.\r\nOption A is incorrect because the main() method must be public. Options B and F\r\nare incorrect because the main() method must have a void return type. Option C is\r\nincorrect because the main() method must be static. Option D is incorrect because the\r\nmain() method must be named main.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (222, 'Which of the following are true? (Choose all that apply)', '', 'Option C is correct because all non-primitive values default to null. Option D is\r\ncorrect because float and double primitives default to 0.0. Options B and E are incorrect\r\nbecause int primitives default to 0.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (223, 'Which of the following are true? (Choose all that apply)', '', 'Option G is correct because local variables do not get assigned default values. The\r\ncode fails to compile if a local variable is not explicitly initialized. If this question\r\nwere about instance variables, options D and F would be correct. A boolean primitive\r\ndefaults to false and a float primitive defaults to 0.0.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (224, 'Which of the following are true? (Choose all that apply)', '', 'Options A and D are correct because boolean primitives default to false and\r\nint primitives default to 0.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (225, 'Given the following class in the file /my/directory/named/A/Bird.java: Which of the following replaces INSERT CODE HERE if we compile from /my/directory? (Choose all that apply)', 'INSERT CODE HERE\r\npublic class Bird { }', 'The package name represents any folders underneath the current path, which is\r\nnamed.A in this case. Option B is incorrect because package names are case sensitive,\r\njust like variable names and other identifiers.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (226, 'Which of the following lines of code compile? (Choose all that apply)', '', 'Underscores are allowed as long as they are directly between two other digits.\r\nThis means options A and E are correct. Options B and C are incorrect because the\r\nunderscore is adjacent to the decimal point. Option D is incorrect because the underscore\r\nis the last character.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (227, 'Given the following class, which of the following lines of code can replace INSERT CODE HERE to make the code compile? (Choose all that apply)', 'public class Price {\r\npublic void admission() {\r\nINSERT CODE HERE\r\nSystem.out.println(amount);\r\n} }', '0b is the prefix for a binary value and is correct. 0x is the prefix for a hexadecimal\r\nvalue. This value can be assigned to many primitive types, including int and\r\ndouble, making options C and D correct. Option A is incorrect because 9L is a long\r\nvalue. long amount = 9L would be allowed. Option E is incorrect because the underscore\r\nis immediately before the decimal. Option F is incorrect because the underscore is\r\nthe very last character.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (228, 'Which of the following are true? (Choose all that apply)', 'public class Bunny {\r\npublic static void main(String[] args) {\r\nBunny bun = new Bunny();\r\n} }', 'Bunny is a class, which can be seen from the declaration: public class Bunny. bun\r\nis a reference to an object. main() is a method.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (229, 'Which represent the order in which the following statements can be assembled into a program that will compile successfully? (Choose all that apply)', 'A: class Rabbit {}\r\nB: import java.util.*;\r\nC: package animals;', 'package and import are both optional. If both are present, the order must\r\nbe package, then import, then class. Option A is incorrect because class is before\r\npackage and import. Option B is incorrect because import is before package. Option\r\nF is incorrect because class is before package. Option G is incorrect because class is\r\nbefore import.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (230, 'Suppose we have a class named Rabbit. Which of the following statements are true? (Choose all that apply)', 'public class Rabbit {\r\npublic static void main(String[] args) {\r\nRabbit one = new Rabbit();\r\nRabbit two = new Rabbit();\r\nRabbit three = one;\r\none = null;\r\nRabbit four = one;\r\nthree = null;\r\ntwo = null;\r\ntwo = new Rabbit();\r\nSystem.gc();\r\n} }', 'The Rabbit object from line 3 has two references to it: one and three. The references\r\nare nulled out on lines 6 and 8, respectively. Option B is correct because this\r\nmakes the object eligible for garbage collection after line 8. Line 7 sets the reference\r\nfour to the now null one, which means it has no effect on garbage collection. The Rabbit\r\nobject from line 4 only has a single reference to it: two. Option D is correct because\r\nthis single reference becomes null on line 9. The Rabbit object declared on line 10\r\nbecomes eligible for garbage collection at the end of the method on line 12. Calling\r\nSystem.gc() has no effect on eligibility for garbage collection.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (231, 'What is true about the following code? (Choose all that apply)', 'public class Bear {\r\nprotected void finalize() {\r\nSystem.out.println("Roar!");\r\n}\r\npublic static void main(String[] args) {\r\nBear bear = new Bear();\r\nbear = null;\r\nSystem.gc();\r\n} }', 'Calling System.gc() suggests that Java might wish to run the garbage collector.\r\nJava is free to ignore the request, making option E correct. finalize() runs if an object\r\nattempts to be garbage collected, making option B correct.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (232, 'What does the following code output?', 'public class Salmon {\r\nint count;\r\npublic void Salmon() {\r\ncount = 4;\r\n}\r\npublic static void main(String[] args) {\r\nSalmon s = new Salmon();\r\nSystem.out.println(s.count);\r\n} }', 'While the code on line 3 does compile, it is not a constructor because it has a return\r\ntype. It is a method that happens to have the same name as the class. When the code\r\nruns, the default constructor is called and count has the default value (0) for an int.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (233, 'Which of the following are true statements? (Choose all that apply)', '', 'C++ has operator overloading and pointers. Java made a point of not having\r\neither. Java does have references to objects, but these are pointing to an object that can\r\nmove around in memory. Option B is correct because Java is platform independent.\r\nOption E is correct because Java is object oriented. While it does support some parts of\r\nfunctional programming, these occur within a class.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (234, 'Which of the following are true? (Choose all that apply)', '', 'Java puts source code in .java files and bytecode in .class files. It does not use\r\na .bytecode file. When running a Java program, you pass just the name of the class\r\nwithout the .class extension.', 10, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (235, 'Which of the following Java operators can be used with boolean variables? (Choose all that apply)', '', 'Option A is the equality operator and can be used on numeric primitives, boolean\r\nvalues, and object references. Options B and C are both arithmetic operators and\r\ncannot be applied to a boolean value. Option D is the logical complement operator\r\nand is used exclusively with boolean values. Option E is the modulus operator, which\r\ncan only be used with numeric primitives. Finally, option F is a relational operator that\r\ncompares the values of two numbers.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (236, 'What data type (or types) will allow the following code snippet to compile? (Choose all that apply)', 'byte x = 5;\r\nbyte y = 10;\r\n_____ z = x + y;', 'The value x + y is automatically promoted to int, so int and data types that\r\ncan be promoted automatically from int will work. Options A, B, D are such data\r\ntypes. Option C will not work because boolean is not a numeric data type. Options E\r\nand F will not work without an explicit cast to a smaller data type.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (237, 'What is the output of the following application?', 'public class CompareValues {\r\npublic static void main(String[] args) {\r\nint x = 0;\r\nwhile(x++ < 10) {}\r\nString message = x > 10 ? "Greater than" : false;\r\nSystem.out.println(message+","+x);\r\n}\r\n}', 'In this example, the ternary operator has two expressions, one of them a String and\r\nthe other a boolean value. The ternary operator is permitted to have expressions that\r\ndon’t have matching types, but the key here is the assignment to the String reference.\r\nThe compiler knows how to assign the first expression value as a String, but the second\r\nboolean expression cannot be set as a String; therefore, this line will not compile.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (238, 'What change would allow the following code snippet to compile? (Choose all that apply)', '3: long x = 10;\r\n4: int y = 2 * x;', 'The code will not compile as is, so option A is not correct. The value 2 * x\r\nis automatically promoted to long and cannot be automatically stored in y, which is\r\nin an int value. Options B, C, and D solve this problem by reducing the long value to\r\nint. Option E does not solve the problem and actually makes it worse by attempting\r\nto place the value in a smaller data type. Option F solves the problem by increasing the\r\ndata type of the assignment so that long is allowed.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (239, 'What is the output of the following code snippet?', '3: java.util.List<Integer> list = new java.util.ArrayList<Integer>();\r\n4: list.add(10);\r\n5: list.add(14);\r\n6: for(int x : list) {\r\n7: System.out.print(x + ", ");\r\n8: break;\r\n9: }', 'This code does not contain any compilation errors or an infinite loop, so options D,\r\nE, and F are incorrect. The break statement on line 8 causes the loop to execute once\r\nand finish, so option C is the correct answer.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (240, 'What is the output of the following code snippet?', '3: int x = 4;\r\n4: long y = x * 4 - x++;\r\n5: if(y<10) System.out.println("Too Low");\r\n6: else System.out.println("Just right");\r\n7: else System.out.println("Too High");', 'The code does not compile because two else statements cannot be chained together\r\nwithout additional if-then statements, so the correct answer is option F. Option E is\r\nincorrect as Line 6 by itself does not cause a problem, only when it is paired with Line\r\n7. One way to fix this code so it compiles would be to add an if-then statement on\r\nline 6. The other solution would be to remove line 7.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (241, 'What is the output of the following code?', 'public class TernaryTester {\r\npublic static void main(String[] args) {\r\nint x = 5;\r\nSystem.out.println(x > 2 ? x < 4 ? 10 : 8 : 7);\r\n}}', 'As you learned in the section “Ternary Operator,” although parentheses are not\r\nrequired, they do greatly increase code readability, such as the following equivalent\r\nstatement:\r\nSystem.out.println((x > 2) ? ((x < 4) ? 10 : 8) : 7)\r\nWe apply the outside ternary operator fi rst, as it is possible the inner ternary expression\r\nmay never be evaluated. Since (x>2) is true, this reduces the problem to:\r\nSystem.out.println((x < 4) ? 10 : 8)\r\nSince x is greater than 2, the answer is 8, or option D in this case.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (242, 'What is the output of the following code snippet?', '3: boolean x = true, z = true;\r\n4: int y = 20;\r\n5: x = (y != 10) ^ (z=false);\r\n6: System.out.println(x+", "+y+", "+z);', 'This example is tricky because of the second assignment operator embedded in line\r\n5. The expression (z=false) assigns the value false to z and returns false for the\r\nentire expression. Since y does not equal 10, the left-hand side returns true; therefore,\r\nthe exclusive or (^) of the entire expression assigned to x is true. The output reflects\r\nthese assignments, with no change to y, so option B is the only correct answer. The\r\ncode compiles and runs without issue, so option F is not correct.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (243, 'How many times will the following code print "Hello World"?', '3: for(int i=0; i<10 ; ) {\r\n4: i = i++;\r\n5: System.out.println("Hello World");\r\n6: }', 'In this example, the update statement of the for loop is missing, which is fine as the\r\nstatement is optional, so option D is incorrect. The expression inside the loop increments\r\ni but then assigns i the old value. Therefore, i ends the loop with the same value\r\nthat it starts with: 0. The loop will repeat infinitely, outputting the same statement over\r\nand over again because i remains 0 after every iteration of the loop.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (244, 'What is the output of the following code?', '3: byte a = 40, b = 50;\r\n4: byte sum = (byte) a + b;\r\n5: System.out.println(sum);', 'Line 4 generates a possible loss of precision compiler error. The cast operator has\r\nthe highest precedence, so it is evaluated first, casting a to a byte. Then, the addition is\r\nevaluated, causing both a and b to be promoted to int values. The value 90 is an int\r\nand cannot be assigned to the byte sum without an explicit cast, so the code does not\r\ncompile. The code could be corrected with parentheses around (a + b), in which case\r\noption C would be the correct answer.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (245, 'What is the output of the following code?', 'public class ArithmeticSample {\r\npublic static void main(String[] args) {\r\nint x = 5 * 4 % 3;\r\nSystem.out.println(x);\r\n}}', 'The * and % have the same operator precedence, so the expression is evaluated\r\nfrom left-to-right. The result of 5 * 4 is 20, and 20 % 3 is 2 (20 divided by 3 is 18, the\r\nremainder is 2). The output is 2 and option A is the correct answer.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (246, 'What is the output of the following code snippet?', '3: int x = 0;\r\n4: String s = null;\r\n5: if(x == s) System.out.println("Success");\r\n6: else System.out.println("Failure");', 'The variable x is an int and s is a reference to a String object. The two data types\r\nare incomparable because neither variable can be converted to the other variable’s type.\r\nThe compiler error occurs on line 5 when the comparison is attempted, so the answer\r\nis option D.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (247, 'What is the output of the following code snippet?', '3: int x1 = 50, x2 = 75;\r\n4: boolean b = x1 >= x2;\r\n5: if(b = true) System.out.println("Success");\r\n6: else System.out.println("Failure");', 'The code compiles successfully, so options C and D are incorrect. The value of b\r\nafter line 4 is false. However, the if-then statement on line 5 contains an assignment,\r\nnot a comparison. The variable b is assigned true on line 3, and the assignment operator\r\nreturns true, so line 5 executes and displays Success, so the answer is option A.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (248, 'What is the output of the following code snippet?', '3: int c = 7;\r\n4: int result = 4;\r\n5: result += ++c;\r\n6: System.out.println(result);', 'The code compiles successfully, so option F is incorrect. On line 5, the pre-increment\r\noperator is used, so c is incremented to 4 and the new value is returned to the\r\nexpression. The value of result is computed by adding 4 to the original value of 8,\r\nresulting in a new value of 12, which is output on line 6. Therefore, option C is the\r\ncorrect answer.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (249, 'What is the output of the following code snippet?', '3: int x = 1, y = 15;\r\n4: while x < 10\r\n5: y––;\r\n6: x++;\r\n7: System.out.println(x+", "+y);', 'This is actually a much simpler problem than it appears to be. The while statement\r\non line 4 is missing parentheses, so the code will not compile, and option E is the correct\r\nanswer. If the parentheses were added, though, option F would be the correct\r\nanswer since the loop does not use curly braces to include x++ and the boolean expression\r\nnever changes. Finally, if curly braces were added around both expressions, the\r\noutput would be 10, 6 and option B would be correct.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (250, 'What is the output of the following code snippet?', '3: do {\r\n4: int y = 1;\r\n5: System.out.print(y++ + " ");\r\n6: } while(y <= 10);', 'The variable y is declared within the body of the do-while statement, so it is out of\r\nscope on line 6. Line 6 generates a compiler error, so option D is the correct answer.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (251, 'What is the output of the following code snippet?', '3: boolean keepGoing = true;\r\n4: int result = 15, i = 10;\r\n5: do {\r\n6: i--;\r\n7: if(i==8) keepGoing = false;\r\n8: result -= 2;\r\n9: } while(keepGoing);\r\n10: System.out.println(result);', 'The code compiles without issue, so option F is incorrect. After the first execution\r\nof the loop, i is decremented to 9 and result to 13. Since i is not 8, keepGoing is\r\nfalse, and the loop continues. On the next iteration, i is decremented to 8 and result\r\nto 11. On the second execution, i does equal 8, so keepGoing is set to false. At the\r\nconclusion of the loop, the loop terminates since keepGoing is no longer true. The\r\nvalue of result is 11, and the correct answer is option D.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (252, 'What is the output of the following code snippet?', '3: int count = 0;\r\n4: ROW_LOOP: for(int row = 1; row <=3; row++)\r\n5: for(int col = 1; col <=2 ; col++) {\r\n6: if(row * col % 2 == 0) continue ROW_LOOP;\r\n7: count++;\r\n8: }\r\n9: System.out.println(count);', 'The expression on line 5 is true when row * col is an even number. On the first\r\niteration, row = 1 and col = 1, so the expression on line 6 is false, the continue is\r\nskipped, and count is incremented to 1. On the second iteration, row = 1 and\r\ncol = 2, so the expression on line 6 is true and the continue ends the outer loop with\r\ncount still at 1. On the third iteration, row = 2 and col = 1, so the expression on line\r\n6 is true and the continue ends the outer loop with count still at 1. On the fourth\r\niteration, row = 3 and col = 1, so the expression on line 6 is false, the continue is\r\nskipped, and count is incremented to 2. Finally, on the fifth and final iteration, row\r\n= 3 and col = 2, so the expression on line 6 is true and the continue ends the outer\r\nloop with count still at 2. The result of 2 is displayed, so the answer is option B.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (253, 'What is the result of the following code snippet?', '3: int m = 9, n = 1, x = 0;\r\n4: while(m > n) {\r\n5: m--;\r\n6: n += 2;\r\n7: x += m + n;\r\n8: }\r\n9: System.out.println(x);', 'Prior to the first iteration, m = 9, n = 1, and x = 0. After the iteration of the first\r\nloop, m is updated to 8, n to 3, and x to the sum of the new values for m + n, 0 + 11 =\r\n11. After the iteration of the second loop, m is updated to 7, n to 5, and x to the sum\r\nof the new values for m + n, 11 + 12 = 23. After the iteration of the third loop, m is\r\nupdated to 6, n to 7, and x to the sum of the new values for m + n, 23 + 13 = 36. On\r\nthe fourth iteration of the loop, m > n evaluates to false, as 6 < 7 is not true. The\r\nloop ends and the most recent value of x, 36, is output, so the correct answer is option\r\nD.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (254, 'What is the result of the following code snippet?', '3: final char a = ''A'', d = ''D'';\r\n4: char grade = ''B'';\r\n5: switch(grade) {\r\n6: case a:\r\n7: case ''B'': System.out.print("great");\r\n8: case ''C'': System.out.print("good"); break;\r\n9: case d:\r\n10: case ''F'': System.out.print("not good");\r\n11: }', 'The code compiles and runs without issue, so options C, D, and E are not correct. The\r\nvalue of grade is ''B'' and there is a matching case statement that will cause "great" to\r\nbe printed. There is no break statement after the case, though, so the next case statement\r\nwill be reached, and "good" will be printed. There is a break after this case statement,\r\nthough, so the switch statement will end. The correct answer is thus option B.', 11, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (255, 'What is output by the following code? (Choose all that apply)', 'public class Fish {\r\npublic static void main(String[] args) {\r\nint numFish = 4;\r\nString fishType = "tuna";\r\nString anotherFish = numFish + 1;\r\nSystem.out.println(anotherFish + " " + fishType);\r\nSystem.out.println(numFish + " " + 1);\r\n} }\r\n\r\n\r\n', 'Line 5 does not compile. This question is checking to see if you are paying attention\r\nto the types. numFish is an int and 1 is an int. Therefore, we use numeric addition and\r\nget 5. The problem is that we can’t store an int in a String variable. Supposing line 5\r\nsaid String anotherFish = numFish + 1 + "";. In that case, the answer would be\r\noptions A and D. The variable defined on line 5 would be the string "5", and both output\r\nstatements would use concatenation.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (256, 'Which of the following are output by this code? (Choose all that apply)', 'String s = "Hello";\r\nString t = new String(s);\r\nif ("Hello".equals(s)) System.out.println("one");\r\nif (t == s) System.out.println("two");\r\nif (t.equals(s)) System.out.println("three");\r\nif ("Hello" == s) System.out.println("four");\r\nif ("Hello" == t) System.out.println("five");', 'The code compiles fine. Line 3 points to the String in the string pool. Line 4\r\ncalls the String constructor explicitly and is therefore a different object than s. Lines 5\r\nand 7 check for object equality, which is true, and so print one and three. Line 6 uses\r\nobject reference equality, which is not true since we have different objects. Line 7 also\r\ncompares references but is true since both references point to the object from the string\r\npool. Finally, line 8 compares one object from the string pool with one that was explicitly\r\nconstructed and returns false.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (257, 'Which are true statements? (Choose all that apply)', '', 'Immutable means the state of an object cannot change once it is created.\r\nImmutable objects can be garbage collected just like mutable objects. String is immutable.\r\nStringBuilder can be mutated with methods like append(). Although\r\nStringBuffer isn’t on the exam, you should know about it anyway in case older questions\r\nhaven’t been removed.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (258, 'What is the result of the following code?', 'StringBuilder sb = new StringBuilder();\r\nsb.append("aaa").insert(1, "bb").insert(4, "ccc");\r\nSystem.out.println(sb);', 'This example uses method chaining. After the call to append(), sb contains "aaa".\r\nThat result is passed to the first insert() call, which inserts at index 1. At this point\r\nsb contains abbbaa. That result is passed to the final insert(), which inserts at index\r\n4, resulting in abbaccca.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (259, 'What is the result of the following code?', 'String s1 = "java";\r\nStringBuilder s2 = new StringBuilder("java");\r\nif (s1 == s2)\r\nSystem.out.print("1");\r\nif (s1.equals(s2))\r\nSystem.out.print("2");', 'The question is trying to distract you into paying attention to logical equality versus\r\nobject reference equality. It is hoping you will miss the fact that line 4 does not compile.\r\nJava does not allow you to compare String and StringBuilder using ==.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (260, 'What is the result of the following code?', 'public class Lion {\r\npublic void roar(String roar1, StringBuilder roar2) {\r\nroar1.concat("!!!");\r\nroar2.append("!!!");\r\n}\r\npublic static void main(String[] args) {\r\nString roar1 = "roar";\r\nStringBuilder roar2 = new StringBuilder("roar");\r\nnew Lion().roar(roar1, roar2);\r\nSystem.out.println(roar1 + " " + roar2);\r\n} }', 'A String is immutable. Calling concat() returns a new String but does not change\r\nthe original. A StringBuilder is mutable. Calling append() adds characters to the\r\nexisting character sequence along with returning a reference to the same object.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (261, 'Which are the results of the following code? (Choose all that apply)', 'String letters = "abcdef";\r\nSystem.out.println(letters.length());\r\nSystem.out.println(letters.charAt(3));\r\nSystem.out.println(letters.charAt(6));', 'length() is simply a count of the number of characters in a String. In this\r\ncase, there are six characters. charAt() returns the character at that index. Remember\r\nthat indexes are zero based, which means that index 3 corresponds to d and index 6\r\ncorresponds to 1 past the end of the array. A StringIndexOutOfBoundsException is\r\nthrown for the last line.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (262, 'Which are the results of the following code? (Choose all that apply)', 'String numbers = "012345678";\r\nSystem.out.println(numbers.substring(1, 3));\r\nSystem.out.println(numbers.substring(7, 7));\r\nSystem.out.println(numbers.substring(7));', 'substring() has two forms. The first takes the index to start with and the\r\nindex to stop immediately before. The second takes just the index to start with and\r\ngoes to the end of the String. Remember that indexes are zero based. The first call\r\nstarts at index 1 and ends with index 2 since it needs to stop before index 3. The second\r\ncall starts at index 7 and ends in the same place, resulting in an empty String.\r\nThis prints out a blank line. The final call starts at index 7 and goes to the end of the\r\nString.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (263, 'What is the result of the following code?', 'String s = "purr";\r\ns.toUpperCase();\r\ns.trim();\r\ns.substring(1, 3);\r\ns += " two";\r\nSystem.out.println(s.length());', 'This question is trying to see if you know that String objects are immutable. Line\r\n4 returns "PURR" but the result is ignored and not stored in s. Line 5 returns "purr"\r\nsince there is no whitespace present but the result is again ignored. Line 6 returns "ur"\r\nbecause it starts with index 1 and ends before index 3 using zero-based indexes. The\r\nresult is ignored again. Finally, on line 6 something happens. We concatenate four new\r\ncharacters to s and now have a String of length 8.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (264, 'What is the result of the following code? (Choose all that apply)', '13: String a = "";\r\n14: a += 2;\r\n15: a += ''c'';\r\n16: a += false;\r\n17: if ( a == "2cfalse") System.out.println("==");\r\n18: if ( a.equals("2cfalse")) System.out.println("equals");', 'a += 2 expands to a = a + 2. A String concatenated with any other type gives\r\na String. Lines 14, 15, and 16 all append to a, giving a result of "2cfalse". The if\r\nstatement on line 18 returns false because the values of the two String objects are the\r\nsame using object equality. The if statement on line 17 returns false because the two\r\nString objects are not the same in memory. One comes directly from the string pool\r\nand the other comes from building using String operations.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (265, 'What is the result of the following code?', 'int total = 0;\r\nStringBuilder letters = new StringBuilder("abcdefg");\r\ntotal += letters.substring(1, 2).length();\r\ntotal += letters.substring(6, 6).length();\r\ntotal += letters.substring(6, 5).length();\r\nSystem.out.println(total);', 'Line 6 adds 1 to total because substring() includes the starting index but not\r\nthe ending index. Line 7 adds 0 to total. Line 8 is a problem: Java does not allow the\r\nindexes to be specified in reverse order and the code throws a StringIndexOutOf-\r\nBoundsException.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (266, 'What is the result of the following code? (Choose all that apply)', 'StringBuilder numbers = new StringBuilder("0123456789");\r\nnumbers.delete(2, 8);\r\nnumbers.append("-").insert(2, "+");\r\nSystem.out.println(numbers);', 'First, we delete the characters at index 2 until the character one before index 8. At\r\nthis point, 0189 is in numbers. The following line uses method chaining. It appends a\r\ndash to the end of the characters sequence, resulting in 0189–, and then inserts a plus\r\nsign at index 2, resulting in 01+89–.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (267, 'What is the result of the following code?', 'StringBuilder b = "rumble";\r\nb.append(4).deleteCharAt(3).delete(3, b.length() - 1);\r\nSystem.out.println(b);', 'This is a trick question. The first line does not compile because you cannot\r\nassign a String to a StringBuilder. If that line were StringBuilder b = new\r\nStringBuilder("rumble"), the code would compile and print rum4. Watch out for this\r\nsort of trick on the exam. You could easily spend a minute working out the character\r\npositions for no reason at all.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (268, 'Which of the following can replace line 4 to print "avaJ"? (Choose all that apply)', 'StringBuilder puzzle = new StringBuilder("Java");\r\n// INSERT CODE HERE\r\nSystem.out.println(puzzle);', 'The reverse() method is the easiest way of reversing the characters in a String-\r\nBuilder; therefore, option A is correct. Option B is a nice distraction—it does in fact\r\nreturn "avaJ". However, substring() returns a String, which is not stored anywhere.\r\nOption C uses method chaining. First it creates the value "JavavaJ$". Then it removes\r\nthe first three characters, resulting in "avaJ$". Finally, it removes the last character,\r\nresulting in "avaJ". Option D throws an exception because you cannot delete the character\r\nafter the last index. Remember that deleteCharAt() uses indexes that are zero\r\nbased and length() counts starting with 1.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (269, 'Which of these array declarations is not legal? (Choose all that apply)', '', 'Option C uses the variable name as if it were a type, which is clearly illegal.\r\nOptions E and F don’t specify any size. Although it is legal to leave out the size for later\r\ndimensions of a multidimensional array, the first one is required. Option A declares a\r\nlegal 2D array. Option B declares a legal 3D array. Option D declares a legal 2D array.\r\nRemember that it is normal to see on the exam types you might not have learned. You\r\naren’t expected to know anything about them.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (270, 'Which of these compile when replacing line 8? (Choose all that apply)', 'char[]c = new char[2];\r\n// INSERT CODE HERE', 'Arrays define a property called length. It is not a method, so parentheses are not\r\nallowed.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (271, 'Which of these compile when replacing line 8? (Choose all that apply)', 'ArrayList l = new ArrayList();\r\n// INSERT CODE HERE', 'The ArrayList class defines a method called size().', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (272, 'Which of the following are true? (Choose all that apply)', '', 'An array is not able to change size and can have multiple dimensions. Both\r\nan array and ArrayList are ordered and have indexes. Neither is immutable. The elements\r\ncan change in value.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (273, 'Which of the following are true? (Choose all that apply)', '', 'An array does not override equals() and so uses object equality. ArrayList does\r\noverride equals() and defines it as the same elements in the same order. The compiler\r\ndoes not know when an index is out of bounds and thus can’t give you a compiler\r\nerror. The code will throw an exception at runtime, though.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (274, 'What is the result of the following statements?', '6: List<String> list = new ArrayList<String>();\r\n7: list.add("one");\r\n8: list.add("two");\r\n9: list.add(7);\r\n10: for(String s : list) System.out.print(s);', 'The code does not compile because list is instantiated using generics. Only String\r\nobjects can be added to list and 7 is an int.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (275, 'What is the result of the following statements?', 'ArrayList<Integer> values = new ArrayList<>();\r\nvalues.add(4);\r\nvalues.add(5);\r\nvalues.set(1, 6);\r\nvalues.remove(0);\r\nfor (Integer v : values) System.out.print(v);', 'After line 4, values has one element (4). After line 5, values has two elements (4,\r\n5). After line 6, values has two elements (4, 6) because set() does a replace. After line\r\n7, values has only one element (6).', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (276, 'What is the result of the following?', 'int[] random = { 6, -4, 12, 0, -10 };\r\nint x = 12;\r\nint y = Arrays.binarySearch(random, x);\r\nSystem.out.println(y);', 'The code compiles and runs fine. However, an array must be sorted for binarySearch()\r\nto return a meaningful result.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (277, 'What is the result of the following?', '4: List<Integer> list = Arrays.asList(10, 4, -1, 5);\r\n5: Collections.sort(list);\r\n6: Integer array[] = list.toArray(new Integer[4]);\r\n7: System.out.println(array[0]);', 'Line 4 creates a fixed size array of size 4. Line 5 sorts it. Line 6 converts it back to\r\nan array. The brackets aren’t in the traditional place, but they are still legal. Line 7\r\nprints the first element, which is now –1.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (278, 'What is the result of the following?', '6: String [] names = {"Tom", "Dick", "Harry"};\r\n7: List<String> list = names.asList();\r\n8: list.set(0, "Sue");\r\n9: System.out.println(names[0]);', 'Converting from an array to an ArrayList uses Arrays.asList(names). There is\r\nno asList() method on an array instance. If this code were corrected to compile, the\r\nanswer would be option A.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (279, 'What is the result of the following?', 'List<String> hex = Arrays.asList("30", "8", "3A", "FF");\r\nCollections.sort(hex);\r\nint x = Collections.binarySearch(hex, "8");\r\nint y = Collections.binarySearch(hex, "3A");\r\nint z = Collections.binarySearch(hex, "4F");\r\nSystem.out.println(x + " " + y + " " + z);', 'After sorting, hex contains [30, 3A, 8, FF]. Remember that numbers sort before\r\nletters and strings sort alphabetically. This makes 30 come before 8. A binary search\r\ncorrectly finds 8 at index 2 and 3A at index 1. It cannot find 4F but notices it should\r\nbe at index 2. The rule when an item isn’t found is to negate that index and subtract 1.\r\nTherefore, we get –2–1, which is –3.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (280, 'Which of the following are true statements about the following code? (Choose all that apply)', 'List<Integer> ages = new ArrayList<>();\r\nages.add(Integer.parseInt("5"));\r\nages.add(Integer.valueOf("6"));\r\nages.add(7);\r\nages.add(null);\r\nfor (int age : ages) System.out.print(age);', 'Lines 5 and 7 use autoboxing to convert an int to an Integer. Line 6 does\r\nnot because valueOf() returns an Integer. Line 8 does not because null is not an int.\r\nThe code does not compile. However, when the for loop tries to unbox null into an\r\nint, it fails and throws a NullPointerException.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (281, 'What is the result of the following?', 'List<String> one = new ArrayList<String>();\r\none.add("abc");\r\nList<String> two = new ArrayList<>();\r\ntwo.add("abc");\r\nif (one == two)\r\nSystem.out.println("A");\r\nelse if (one.equals(two))\r\nSystem.out.println("B");\r\nelse\r\nSystem.out.println("C");', 'The first if statement is false because the variables do not point to the same object.\r\nThe second if statement is true because ArrayList implements equality to mean the\r\nsame elements in the same order.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (282, 'Which of the following can be inserted into the blank to create a date of June 21, 2014? (Choose all that apply)', 'import java.time.*;\r\npublic class StartOfSummer {\r\npublic static void main(String[] args) {\r\nLocalDate date = ____________________________\r\n}\r\n}', 'Options A and B are incorrect because LocalDate does not have a public constructor.\r\nOption C is incorrect because months start counting with 1 rather than 0.\r\nOption E is incorrect because it uses the old pre–Java 8 way of counting months, again\r\nbeginning with 0. Options D and F are both correct ways of specifying the desired\r\ndate.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (283, 'What is the output of the following code?', 'LocalDate date = LocalDate.parse("2018-04-30", DateTimeFormatter.ISO_LOCAL_DATE);\r\ndate.plusDays(2);\r\ndate.plusHours(3);\r\nSystem.out.println(date.getYear() + " " + date.getMonth() + " " + date.getDayOfMonth());', 'A LocalDate does not have a time element. Therefore, it has no method to add\r\nhours and the code does not compile.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (284, 'What is the output of the following code?', 'LocalDate date = LocalDate.of(2018, Month.APRIL, 40);\r\nSystem.out.println(date.getYear() + " " + date.getMonth() + " " + date.getDayOfMonth());', 'Java throws an exception if invalid date values are passed. There is no 40th day in\r\nApril—or any other month for that matter.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (285, 'What is the output of the following code?', 'LocalDate date = LocalDate.of(2018, Month.APRIL, 30);\r\ndate.plusDays(2);\r\ndate.plusYears(3);\r\nSystem.out.println(date.getYear() + " " + date.getMonth() + " " + date.getDayOfMonth());', 'The date starts out as April 30, 2018. Since dates are immutable and the plus methods\r\nhave their return values ignored, the result is unchanged. Therefore, option B is\r\ncorrect.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (286, 'What is the output of the following code?', 'LocalDateTime d = LocalDateTime.of(2015, 5, 10, 11, 22, 33);\r\nPeriod p = Period.of(1, 2, 3);\r\nd = d.minus(p);\r\nDateTimeFormatter f = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);\r\nSystem.out.println(d.format(f));', 'Even though d has both date and time, the formatter only outputs time.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (287, 'What is the output of the following code?', 'LocalDateTime d = LocalDateTime.of(2015, 5, 10, 11, 22, 33);\r\nPeriod p = Period.ofDays(1).ofYears(2);\r\nd = d.minus(p);\r\nDateTimeFormatter f = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);\r\nSystem.out.println(f.format(d));', 'Period does not allow chaining. Only the last Period method called counts, so only\r\nthe two years are subtracted.', 12, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (288, 'Which of the following can fill in the blank in this code to make it compile? (Choose all that apply)', 'public class Ant {\r\n_____ void method() { }\r\n}', 'void is a return type. Only the access modifier or optional specifiers are allowed\r\nbefore the return type. Option C is correct, creating a method with private access.\r\nOption B is correct, creating a method with default access and the optional specifier\r\nfinal. Since default access does not require a modifier, we get to jump right to final.\r\nOption A is incorrect because default access omits the access modifier rather than specifying\r\ndefault. Option D is incorrect because Java is case sensitive. It would have been\r\ncorrect if public were the choice. Option E is incorrect because the method already has\r\na void return type. Option F is incorrect because labels are not allowed for methods.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (289, 'Which of the following compile? (Choose all that apply)', '', 'Options A and D are correct because the optional specifiers are allowed in any\r\norder. Options B and C are incorrect because they each have two return types. Options\r\nE and F are incorrect because the return type is before the optional specifier and access\r\nmodifier, respectively.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (290, 'Which of the following methods compile? (Choose all that apply)', '', 'Options A and C are correct because a void method is allowed to have a\r\nreturn statement as long as it doesn’t try to return a value. Options B and G do not\r\ncompile because null requires a reference object as the return type. void is not a reference\r\nobject since it is a marker for no return type. int is not a reference object since it\r\nis a primitive. Option D is correct because it returns an int value. Option E does not\r\ncompile because it tries to return a double when the return type is int. Since a double\r\ncannot be assigned to an int, it cannot be returned as one either. Option F does not\r\ncompile because no value is actually returned.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (291, 'Which of the following compile? (Choose all that apply)', '', 'Options A and B are correct because the single vararg parameter is the last\r\nparameter declared. Option G is correct because it doesn’t use any vararg parameters\r\nat all. Options C and F are incorrect because the vararg parameter is not last. Option\r\nD is incorrect because two vararg parameters are not allowed in the same method.\r\nOption E is incorrect because the ... for a vararg must be after the type, not before it.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (292, 'Given the following method, which of the method calls return 2? (Choose all that apply)', 'public int howMany(boolean b, boolean... b2) {\r\nreturn b2.length;\r\n}', 'Option D passes the initial parameter plus two more to turn into a vararg array\r\nof size 2. Option G passes the initial parameter plus an array of size 2. Option A does\r\nnot compile because it does not pass the initial parameter. Options E and F do not\r\ncompile because they do not declare an array properly. It should be new boolean[]\r\n{true}. Option B creates a vararg array of size 0 and option C creates a vararg array of\r\nsize 1.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (293, 'Which of the following are true? (Choose all that apply)', '', 'Option D is correct. This is the common implementation for encapsulation by setting\r\nall fields to be private and all methods to be public. Option A is incorrect because\r\nprotected access allows everything that package private access allows and additionally\r\nallows subclasses access. Option B is incorrect because the class is public. This means\r\nthat other classes can see the class. However, they cannot call any of the methods or\r\nread any of the fields. It is essentially a useless class. Option C is incorrect because\r\npackage private access applies to the whole package. Option E is incorrect because Java\r\nhas no such capability.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (294, 'Given the following my.school.ClassRoom and my.city.School class definitions, which line numbers in main() generate a compiler error? (Choose all that apply)', 'package my.school;\r\npublic class Classroom {\r\nprivate int roomNumber;\r\nprotected String teacherName;\r\nstatic int globalKey = 54321;\r\npublic int floor = 3;\r\nClassroom(int r, String t) {\r\nroomNumber = r;\r\nteacherName = t; } }\r\n\r\npackage my.city;\r\nimport my.school.*;\r\npublic class School {\r\npublic static void main(String[] args) {\r\nSystem.out.println(Classroom.globalKey);\r\nClassroom room = new Classroom(101, ""Mrs. Anderson");\r\nSystem.out.println(room.roomNumber);\r\nSystem.out.println(room.floor);\r\nSystem.out.println(room.teacherName); } }', 'The two classes are in different packages, which means private access and\r\ndefault (package private) access will not compile. Additionally, protected access will\r\nnot compile since School does not inherit from Classroom. Therefore, only line 8 will\r\ncompile because it uses public access.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (295, 'Which of the following are true? (Choose all that apply)', '', 'Encapsulation requires using methods to get and set instance variables so\r\nother classes are not directly using them. Instance variables must be private for this\r\nto work. Immutability takes this a step further, allowing only getters, so the instance\r\nvariables do not change state.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (296, 'Which are methods using JavaBeans naming conventions for accessors and mutators? (Choose all that apply)', '', 'Option A is incorrect because the property is of type boolean and getters must\r\nbegin with is for booleans. Options B and D are incorrect because they don’t follow\r\nthe naming convention of beginning with get/is/set. Options C and E follow normal\r\ngetter and setter conventions.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (297, 'What is the output of the following code?', 'package rope;\r\npublic class Rope {\r\npublic static int LENGTH = 5;\r\nstatic {\r\nLENGTH = 10;\r\n}\r\npublic static void swing() {\r\nSystem.out.print("swing ");\r\n}\r\n}\r\n\r\nimport rope.*;\r\nimport static rope.Rope.*;\r\npublic class Chimp {\r\npublic static void main(String[] args) {\r\nRope.swing();\r\nnew Rope().swing();\r\nSystem.out.println(LENGTH);\r\n}\r\n}', 'Rope runs line 3, setting LENGTH to 5, then immediately after runs the static initializer,\r\nwhich sets it to 10. Line 5 calls the static method normally and prints swing.\r\nLine 6 also calls the static method. Java allows calling a static method through an\r\ninstance variable. Line 7 uses the static import on line 2 to reference LENGTH.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (298, 'Which are true of the following code? (Choose all that apply)', 'public class Rope {\r\npublic static void swing() {\r\nSystem.out.print("swing ");\r\n}\r\npublic void climb() {\r\nSystem.out.println("climb ");\r\n}\r\npublic static void play() {\r\nswing();\r\nclimb();\r\n}\r\npublic static void main(String[] args) {\r\nRope rope = new Rope();\r\nrope.play();\r\nRope rope2 = null;\r\nrope2.play();\r\n}\r\n}', 'Line 10 does not compile because static methods are not allowed to call instance\r\nmethods. Even though we are calling play() as if it were an instance method and an\r\ninstance exists, Java knows play() is really a static method and treats it as such. If line\r\n10 is removed, the code works. It does not throw a NullPointerException on line 16\r\nbecause play() is a static method. Java looks at the type of the reference for rope2 and\r\ntranslates the call to Rope.play().', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (299, 'What is the output of the following code?', 'import rope.*;\r\nimport static rope.Rope.*;\r\npublic class RopeSwing {\r\nprivate static Rope rope1 = new Rope();\r\nprivate static Rope rope2 = new Rope();\r\n{\r\nSystem.out.println(rope1.length);\r\n}\r\npublic static void main(String[] args) {\r\nrope1.length = 2;\r\nrope2.length = 8;\r\nSystem.out.println(rope1.length);\r\n}\r\n}\r\n\r\npackage rope;\r\npublic class Rope {\r\npublic static int length = 0;\r\n}', 'There are two details to notice in this code. First, note that RopeSwing has an\r\ninstance initializer and not a static initializer. Since RopeSwing is never constructed,\r\nthe instance initializer does not run. The other detail is that length is static. Changes\r\nfrom one object update this common static variable.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (300, 'How many compiler errors are in the following code?', 'public class RopeSwing {\r\nprivate static final String leftRope;\r\nprivate static final String rightRope;\r\nprivate static final String bench;\r\nprivate static final String name = "name";\r\nstatic {\r\nleftRope = "left";\r\nrightRope = "right";\r\n}\r\nstatic {\r\nname = "name";\r\nrightRope = "right";\r\n}\r\npublic static void main(String[] args) {\r\nbench = "bench";\r\n}\r\n}', 'static final variables must be set exactly once, and it must be in the declaration\r\nline or in a static initialization block. Line 4 doesn’t compile because bench is not set\r\nin either of these locations. Line 15 doesn’t compile because final variables are not\r\nallowed to be set after that point. Line 11 doesn’t compile because name is set twice:\r\nonce in the declaration and again in the static block. Line 12 doesn’t compile because\r\nrightRope is set twice as well. Both are in static initialization blocks.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (301, 'Which of the following can replace line 2 to make this code compile? (Choose all that apply)', 'import java.util.*;\r\n// INSERT CODE HERE\r\npublic class Imports {\r\npublic void method(ArrayList<String> list) {\r\nsort(list);\r\n}\r\n}', 'The two valid ways to do this are import static java.util.Collections.*; and\r\nimport static java.util.Collections.sort;. Option A is incorrect because you\r\ncan only do a static import on static members. Classes such as Collections require\r\na regular import. Option C is nonsense as method parameters have no business in\r\nan import. Options D, E, and F try to trick you into reversing the syntax of import\r\nstatic.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (302, 'What is the result of the following statements?', 'public class Test {\r\npublic void print(byte x) {\r\nSystem.out.print("byte");\r\n}\r\npublic void print(int x) {\r\nSystem.out.print("int");\r\n}\r\npublic void print(float x) {\r\nSystem.out.print("float");\r\n}\r\npublic void print(Object x) {\r\nSystem.out.print("Object");\r\n}\r\npublic static void main(String[] args) {\r\nTest t = new Test();\r\nshort s = 123;\r\nt.print(s);\r\nt.print(true);\r\nt.print(6.789);\r\n}\r\n}', 'The argument on line 17 is a short. It can be promoted to an int, so print() on\r\nline 5 is invoked. The argument on line 18 is a boolean. It can be autoboxed to a boolean,\r\nso print() on line 11 is invoked. The argument on line 19 is a double. It can\r\nbe autoboxed to a double, so print() on line 11 is invoked. Therefore, the output is\r\nintObjectObject and the correct answer is option E.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (303, 'What is the result of the following program?', 'public class Squares {\r\npublic static long square(int x) {\r\nlong y = x * (long) x;\r\nx = -1;\r\nreturn y;\r\n}\r\npublic static void main(String[] args) {\r\nint value = 9;\r\nlong result = square(value);\r\nSystem.out.println(value);\r\n} }', 'Since Java is pass-by-value and the variable on line 8 never gets reassigned, it stays\r\nas 9. In the method square, x starts as 9. y becomes 81 and then x gets set to –1. Line 9\r\ndoes set result to 81. However, we are printing out value and that is still 9.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (304, 'Which of the following are output by the following code? (Choose all that apply)', 'public class StringBuilders {\r\npublic static StringBuilder work(StringBuilder a,\r\nStringBuilder b) {\r\na = new StringBuilder("a");\r\nb.append("b");\r\nreturn a;\r\n}\r\npublic static void main(String[] args) {\r\nStringBuilder s1 = new StringBuilder("s1");\r\nStringBuilder s2 = new StringBuilder("s2");\r\nStringBuilder s3 = work(s1, s2);\r\nSystem.out.println("s1 = " + s1);\r\nSystem.out.println("s2 = " + s2);\r\nSystem.out.println("s3 = " + s3);\r\n}\r\n}', 'Since Java is pass-by-reference, assigning a new object to a does not change the\r\ncaller. Calling append() does affect the caller because both the method parameter and\r\ncaller have a reference to the same object. Finally, returning a value does pass the reference\r\nto the caller for assignment to s3.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (305, 'Which of the following are true? (Choose 2)', '', 'Since the main() method is in the same class, it can call private methods in the\r\nclass. this() may only be called as the first line of a constructor. this.variableName\r\ncan be called from any instance method to refer to an instance variable. It cannot be\r\ncalled from a static method because there is no instance of the class to refer to. Option\r\nF is tricky. The default constructor is only written by the compiler if no user-defined\r\nconstructors were provided. this() can only be called from a constructor in the same\r\nclass. Since there can be no user-defined constructors in the class if a default constructor\r\nwas created, it is impossible for option F to be true.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (306, 'Which of these classes compile and use a default constructor? (Choose all that apply)', '', 'Options B and C don’t compile because the constructor name must match the\r\nclassname. Since Java is case sensitive, these don’t match. Options D, E, and F all compile\r\nand provide one user-defined constructor. Since a constructor is coded, a default\r\nconstructor isn’t supplied. Option G defines a method, but not a constructor. Option A\r\ndoes not define a constructor, either. Since no constructor is coded, a default constructor\r\nis provided for options A and G.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (307, 'Which code can be inserted to have the code print 2?', 'public class BirdSeed {\r\nprivate int numberBags;\r\nboolean call;\r\npublic BirdSeed() {\r\n// LINE 1\r\ncall = false;\r\n// LINE 2\r\n}\r\npublic BirdSeed(int numberBags) {\r\nthis.numberBags = numberBags;\r\n}\r\npublic static void main(String[] args) {\r\nBirdSeed seed = new BirdSeed();\r\nSystem.out.println(seed.numberBags);\r\n} }', 'Options A and B will not compile because constructors cannot be called without\r\nnew. Options C and D will compile but will create a new object rather than setting the\r\nfields in this one. Option F will not compile because this() must be the first line of a\r\nconstructor. Option E is correct.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (308, 'Which of the following complete the constructor so that this code prints out 50? (Choose all that apply)', 'public class Cheetah {\r\nint numSpots;\r\npublic Cheetah(int numSpots) {\r\n// INSERT CODE HERE\r\n}\r\npublic static void main(String[] args) {\r\nSystem.out.println(new Cheetah(50).numSpots);\r\n}\r\n}', 'Within the constructor numSpots refers to the constructor parameter. The instance\r\nvariable is hidden because they have the same name. this.numSpots tells Java to use\r\nthe instance variable. In the main() method, numSpots refers to the instance variable.\r\nOption A sets the constructor parameter to itself, leaving the instance variable as 0.\r\nOption B sets the constructor parameter to the value of the instance variable, making\r\nthem both 0. Option C is correct, setting the instance variable to the value of the constructor\r\nparameter. Options D and E do not compile.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (309, 'What is the result of the following?', 'public class Order {\r\nstatic String result = "";\r\n{ result += "c"; }\r\nstatic\r\n{ result += "u"; }\r\n{ result += "r"; }\r\n}\r\n\r\npublic class OrderDriver {\r\npublic static void main(String[] args) {\r\nSystem.out.print(Order.result + " ");\r\nSystem.out.print(Order.result + " ");\r\nnew Order();\r\nnew Order();\r\nSystem.out.print(Order.result + " ");\r\n}\r\n}', 'On line 3 of OrderDriver, we refer to Order for the first time. At this point the statics\r\nin Order get initialized. In this case, the statics are the static declaration of result\r\nand the static initializer. result is u at this point. On line 4, result is the same\r\nbecause the static initialization is only run once. On line 5, we create a new Order,\r\nwhich triggers the instance initializers in the order they appear in the file. Now result\r\nis ucr. Line 6 creates another Order, triggering another set of initializers. Now result\r\nis ucrcr. Notice how the static is on a different line than the initialization code in\r\nlines 4–5 of Order. The exam may try to trick you by formatting the code like this to\r\nconfuse you.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (310, 'What is the result of the following?', 'public class Order {\r\nString value = "t";\r\n{ value += "a"; }\r\n{ value += "c"; }\r\npublic Order() {\r\nvalue += "b";\r\n}\r\npublic Order(String s) {\r\nvalue += s;\r\n}\r\npublic static void main(String[] args) {\r\nOrder order = new Order("f");\r\norder = new Order();\r\nSystem.out.println(order.value);\r\n} }', 'Line 4 instantiates an Order. Java runs the declarations and instance initializers first\r\nin the order they appear. This sets value to tacf. Line 5 creates another Order and\r\ninitializes value to tacb. The object on line 5 is stored in the same variable line 4 used.\r\nThis makes the object created on line 4 unreachable. When value is printed, it is the\r\ninstance variable in the object created on line 5.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (311, 'Which of the following will compile when inserted in the following code? (Choose all that apply)', 'public class Order3 {\r\nfinal String value1 = "1";\r\nstatic String value2 = "2";\r\nString value3 = "3";\r\n{\r\n// CODE SNIPPET 1\r\n}\r\nstatic {\r\n// CODE SNIPPET 2\r\n}\r\n}', 'value1 is a final instance variable. It can only be set once: in the variable declaration,\r\nan instance initializer, or a constructor. Option A does not compile because\r\nthe final variable was already set in the declaration. value2 is a static variable. Both\r\ninstance and static initializers are able to access static variables, making options B\r\nand E correct. value3 is an instance variable. Options D and F do not compile because\r\na static initializer does not have access to instance variables.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (312, 'Which of the following are true about the following code? (Choose all that apply)', 'public class Create {\r\nCreate() {\r\nSystem.out.print("1 ");\r\n}\r\nCreate(int num) {\r\nSystem.out.print("2 ");\r\n}\r\nCreate(Integer num) {\r\nSystem.out.print("3 ");\r\n}\r\nCreate(Object num) {\r\nSystem.out.print("4 ");\r\n}\r\nCreate(int... nums) {\r\nSystem.out.print("5 ");\r\n}\r\npublic static void main(String[] args) {\r\nnew Create(100);\r\nnew Create(1000L);\r\n}\r\n}', 'The 100 parameter is an int and so calls the matching int constructor. When\r\nthis constructor is removed, Java looks for the next most specific constructor. Java prefers\r\nautoboxing to varargs, and so chooses the Integer constructor. The 100L parameter\r\nis a long. Since it can’t be converted into a smaller type, it is autoboxed into a Long\r\nand then the constructor for Object is called.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (313, 'What is the result of the following class?', 'import java.util.function.*;\r\n\r\npublic class Panda {\r\nint age;\r\npublic static void main(String[] args) {\r\nPanda p1 = new Panda();\r\np1.age = 1;\r\ncheck(p1, p -> p.age < 5);\r\n}\r\nprivate static void check(Panda panda, Predicate<Panda> pred) {\r\nString result = pred.test(panda) ? "match" : "not match";\r\nSystem.out.print(result);\r\n} }', 'This code is correct. Line 8 creates a lambda expression that checks if the age is less\r\nthan 5. Since there is only one parameter and it does not specify a type, the parentheses\r\naround the type parameter are optional. Line 10 uses the Predicate interface, which\r\ndeclares a test() method.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (314, 'What is the result of the following code?', 'interface Climb {\r\nboolean isTooHigh(int height, int limit);\r\n}\r\n\r\npublic class Climber {\r\npublic static void main(String[] args) {\r\ncheck((h, l) -> h.append(l).isEmpty(), 5);\r\n}\r\nprivate static void check(Climb climb, int height) {\r\nif (climb.isTooHigh(height, 10))\r\nSystem.out.println("too high");\r\nelse\r\nSystem.out.println("ok");\r\n}\r\n}', 'The interface takes two int parameters. The code on line 7 attempts to use them as\r\nif one is a StringBuilder. It is tricky to use types in a lambda when they are implicitly\r\nspecified. Remember to check the interface for the real type.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (315, 'Which of the following lambda expressions can fill in the blank? (Choose all that apply)', 'List<String> list = new ArrayList<>();\r\nlist.removeIf(___________________);', 'removeIf() expects a Predicate, which takes a parameter list of one parameter\r\nusing the specified type. Options B and C are incorrect because they do not use the\r\nreturn keyword. It is required inside braces for lambda bodies. Option E is incorrect\r\nbecause it is missing the parentheses around the parameter list. This is only optional\r\nfor a single parameter with an inferred type.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (316, 'Which lambda can replace the MySecret class to return the same value? (Choose all that apply)', 'interface Secret {\r\nString magic(double d);\r\n}\r\nclass MySecret implements Secret {\r\npublic String magic(double d) {\r\nreturn "Poof";\r\n}\r\n}', 'Option B is incorrect because it does not use the return keyword. Options C, D,\r\nand E are incorrect because the variable e is already in use from the lambda and cannot\r\nbe redefined. Additionally, option C is missing the return keyword and option E is\r\nmissing the semicolon.', 3, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (317, 'What modifiers are implicitly applied to all interface methods? (Choose all that apply)', '', 'All interface methods are implicitly public, so option B is correct and option A is\r\nnot. Interface methods may be declared as static or default but are never implicitly\r\nadded, so options C and F are incorrect. Option D is incorrect—void is not a modifier;\r\nit is a return type. Option E is a tricky one, because prior to Java 8 all interface methods\r\nwould be assumed to be abstract. Since Java 8 now includes default and static\r\nmethods and they are never abstract, you cannot assume the abstract modifier will be\r\nimplicitly applied to all methods by the compiler.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (318, 'What is the output of the following code?', 'class Mammal {\r\npublic Mammal(int age) {\r\nSystem.out.print("Mammal");\r\n}\r\n}\r\npublic class Platypus extends Mammal {\r\npublic Platypus() {\r\nSystem.out.print("Platypus");\r\n}\r\npublic static void main(String[] args) {\r\nnew Mammal(5);\r\n}\r\n}', 'The code will not compile because the parent class Mammal doesn’t define a no-argument\r\nconstructor, so the first line of a Platypus constructor should be an explicit call\r\nto super(int age). If there was such a call, then the output would be MammalPlatypus,\r\nsince the super constructor is executed before the child constructor.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (319, 'Which of the following statements can be inserted in the blank line so that the code will compile successfully? (Choose all that apply)', 'public interface CanHop {}\r\npublic class Frog implements CanHop {\r\npublic static void main(String[] args) {\r\nfrog = new TurtleFrog();\r\n}\r\n}\r\npublic class BrazilianHornedFrog extends Frog {}\r\npublic class TurtleFrog extends Frog {}', 'The blank can be filled with any class or interface that is a supertype of\r\nTurtleFrog. Option A is a superclass of TurtleFrog, and option B is the same class,\r\nso both are correct. BrazilianHornedFrog is not a superclass of TurtleFrog, so option\r\nC is incorrect. TurtleFrog inherits the CanHope interface, so option D is correct. All\r\nclasses inherit Object, so option E is correct. Finally, Long is an unrelated class that is\r\nnot a superclass of TurtleFrog, and is therefore incorrect.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (320, 'Which statement(s) are correct about the following code? (Choose all that apply)', 'public class Rodent {\r\nprotected static Integer chew() throws Exception {\r\nSystem.out.println("Rodent is chewing");\r\nreturn 1;\r\n}\r\n}\r\npublic class Beaver extends Rodent {\r\npublic Number chew() throws RuntimeException {\r\nSystem.out.println("Beaver is chewing on wood");\r\nreturn 2;\r\n}\r\n}', 'The code doesn’t compile, so option A is incorrect. Option B is also not correct\r\nbecause the rules for overriding a method allow a subclass to define a method with an\r\nexception that is a subclass of the exception in the parent method. Option C is correct\r\nbecause the return types are not covariant; in particular, Number is not a subclass\r\nof Integer. Option D is incorrect because the subclass defines a method that is more\r\naccessible than the method in the parent class, which is allowed. Finally, option E is\r\ncorrect because the method is declared as static in the parent class and not so in the\r\nchild class. For nonprivate methods in the parent class, both methods must use static\r\n(hide) or neither should use static (override).', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (321, 'Which of the following may only be hidden and not overridden? (Choose all that apply)', '', 'First off, options B and C are incorrect because protected and public methods\r\nmay be overridden, not hidden. Option A is correct because private methods are\r\nalways hidden in a subclass. Option D is also correct because static methods cannot\r\nbe overridden, only hidden. Options E and F are correct because variables may only be\r\nhidden, regardless of the access modifier.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (322, 'Choose the correct statement about the following code:', 'interface HasExoskeleton {\r\nabstract int getNumberOfSections();\r\n}\r\nabstract class Insect implements HasExoskeleton {\r\nabstract int getNumberOfLegs();\r\n}\r\npublic class Beetle extends Insect {\r\nint getNumberOfLegs() { return 6; }\r\n}', 'The code fails to compile because Beetle, the first concrete subclass, doesn’t implement\r\ngetNumberOfSections(), which is inherited as an abstract method; therefore,\r\noption D is correct. Option B is incorrect because there is nothing wrong with this\r\ninterface method definition. Option C is incorrect because an abstract class is not\r\nrequired to implement any abstract methods, including those inherited from an interface.\r\nOption E is incorrect because the code fails at compilation-time.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (323, 'Which of the following statements about polymorphism are true? (Choose all that apply)', '', 'A reference to an object requires an explicit cast if referenced with a subclass,\r\nso option A is incorrect. If the cast is to a superclass reference, then an explicit cast is\r\nnot required. Because of polymorphic parameters, if a method takes the superclass of\r\nan object as a parameter, then any subclass references may be used without a cast, so\r\noption B is correct. All objects extend java.lang.Object, so if a method takes that\r\ntype, any valid object, including null, may be passed; therefore, option C is correct.\r\nSome cast exceptions can be detected as errors at compile-time, but others can only be\r\ndetected at runtime, so D is incorrect. Due to the nature of polymorphism, a public\r\ninstance method can be overridden in a subclass and calls to it will be replaced even in\r\nthe superclass it was defined, so E is incorrect.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (324, 'Choose the correct statement about the following code:', 'public interface Herbivore {\r\nint amount = 10;\r\npublic static void eatGrass();\r\npublic int chew() {\r\nreturn 13;\r\n}\r\n}', 'The interface variable amount is correctly declared, with public and static being\r\nassumed and automatically inserted by the compiler, so option B is incorrect. The\r\nmethod declaration for eatGrass() on line 3 is incorrect because the method has been\r\nmarked as static but no method body has been provided. The method declaration for\r\nchew() on line 4 is also incorrect, since an interface method that provides a body must\r\nbe marked as default or static explicitly. Therefore, option F is the correct answer\r\nsince this code contains two compile-time errors.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (325, 'Choose the correct statement about the following code:', 'public interface CanFly {\r\nvoid fly();\r\n}\r\ninterface HasWings {\r\npublic abstract Object getWindSpan();\r\n}\r\nabstract class Falcon implements CanFly, HasWings {\r\n}', 'Although the definition of methods on lines 2 and 5 vary, both will be converted to\r\npublic abstract by the compiler. Line 4 is fine, because an interface can have public\r\nor default access. Finally, the class Falcon doesn’t need to implement the interface\r\nmethods because it is marked as abstract. Therefore, the code will compile without\r\nissue.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (326, 'Which statements are true for both abstract classes and interfaces? (Choose all that apply)', '', 'Option A is wrong, because an abstract class may contain concrete methods.\r\nSince Java 8, interfaces may also contain concrete methods in form of static or\r\ndefault methods. Although all variables in interfaces are assumed to be public static\r\nfinal, abstract classes may contain them as well, so option B is correct. Both abstract\r\nclasses and interfaces can be extended with the extends keyword, so option C is correct.\r\nOnly interfaces can contain default methods, so option D is incorrect. Both\r\nabstract classes and interfaces can contain static methods, so option E is correct. Both\r\nstructures require a concrete subclass to be instantiated, so option F is correct. Finally,\r\nthough an instance of an object that implements an interface inherits java.lang.\r\nObject, the interface itself doesn’t; otherwise, Java would support multiple inheritance\r\nfor objects, which it doesn’t. Therefore, option G is incorrect.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (327, 'Which statements are true for both abstract classes and interfaces? (Choose all that apply)', '', 'Option A is wrong, because an abstract class may contain concrete methods.\r\nSince Java 8, interfaces may also contain concrete methods in form of static or\r\ndefault methods. Although all variables in interfaces are assumed to be public static\r\nfinal, abstract classes may contain them as well, so option B is correct. Both abstract\r\nclasses and interfaces can be extended with the extends keyword, so option C is correct.\r\nOnly interfaces can contain default methods, so option D is incorrect. Both\r\nabstract classes and interfaces can contain static methods, so option E is correct. Both\r\nstructures require a concrete subclass to be instantiated, so option F is correct. Finally,\r\nthough an instance of an object that implements an interface inherits java.lang.\r\nObject, the interface itself doesn’t; otherwise, Java would support multiple inheritance\r\nfor objects, which it doesn’t. Therefore, option G is incorrect.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (328, 'What is the output of the following code?', 'interface Nocturnal {\r\ndefault boolean isBlind() { return true; }\r\n}\r\npublic class Owl implements Nocturnal {\r\npublic boolean isBlind() { return false; }\r\npublic static void main(String[] args) {\r\nNocturnal nocturnal = (Nocturnal)new Owl();\r\nSystem.out.println(nocturnal.isBlind());\r\n}\r\n}', 'This code compiles and runs without issue, outputting false, so option B is the\r\ncorrect answer. The first declaration of isBlind() is as a default interface method,\r\nassumed public. The second declaration of isBlind() correctly overrides the default\r\ninterface method. Finally, the newly created Owl instance may be automatically cast to\r\na Nocturnal reference without an explicit cast, although adding it doesn’t break the\r\ncode.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (329, 'What is the output of the following code?', 'class Arthropod\r\npublic void printName(double input) { System.out.print("Arthropod"); }\r\n}\r\npublic class Spider extends Arthropod {\r\npublic void printName(int input) { System.out.print("Spider"); }\r\npublic static void main(String[] args) {\r\nSpider spider = new Spider();\r\nspider.printName(4);\r\nspider.printName(9.0);\r\n}\r\n}', 'The code compiles and runs without issue, so options E and F are incorrect. The\r\nprintName() method is an overload in Spider, not an override, so both methods may\r\nbe called. The call on line 8 references the version that takes an int as input defined\r\nin the Spider class, and the call on line 9 references the version in the Arthropod class\r\nthat takes a double. Therefore, SpiderArthropod is output and option A is the correct\r\nanswer.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (330, 'Which statements are true about the following code? (Choose all that apply)', 'interface HasVocalCords {\r\npublic abstract void makeSound();\r\n}\r\npublic interface CanBark extends HasVocalCords {\r\npublic void bark();\r\n}', 'The code compiles without issue, so option A is wrong. Option B is incorrect, since\r\nan abstract class could implement HasVocalCords without the need to override the\r\nmakeSound() method. Option C is correct; any class that implements CanBark automatically\r\ninherits its methods, as well as any inherited methods defined in the parent\r\ninterface. Because option C is correct, it follows that option D is incorrect. Finally, an\r\ninterface can extend multiple interfaces, so option E is incorrect.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (331, 'Which of the following is true about a concrete subclass? (Choose all that apply)', '', 'Concrete classes are, by definition, not abstract, so option A is incorrect. A concrete\r\nclass must implement all inherited abstract methods, so option B is correct. Option C\r\nis incorrect; a superclass may have already implemented an inherited interface, so the\r\nconcrete subclass would not need to implement the method. Concrete classes can be\r\nboth final and not final, so option D is incorrect. Finally, abstract methods must be\r\noverridden by a concrete subclass, so option E is incorrect.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (332, 'What is the output of the following code?', 'abstract class Reptile {\r\npublic final void layEggs() { System.out.println("Reptile laying eggs"); }\r\npublic static void main(String[] args) {\r\nReptile reptile = new Lizard();\r\nreptile.layEggs();\r\n}\r\n}\r\npublic class Lizard extends Reptile {\r\npublic void layEggs() { System.out.println("Lizard laying eggs"); }\r\n}', 'The code doesn’t compile, so options A and B are incorrect. The issue with line 9 is\r\nthat layEggs() is marked as final in the superclass Reptile, which means it cannot be\r\noverridden. There are no errors on any other lines, so options C and D are incorrect.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (333, 'What is the output of the following code?', 'public abstract class Whale {\r\npublic abstract void dive() {};\r\npublic static void main(String[] args) {\r\nWhale whale = new Orca();\r\nwhale.dive();\r\n}\r\n}\r\nclass Orca extends Whale {\r\npublic void dive(int depth) { System.out.println("Orca diving"); }\r\n}', 'This may look like a complex question, but it is actually quite easy. Line 2 contains\r\nan invalid definition of an abstract method. Abstract methods cannot contain a body,\r\nso the code will not compile and option B is the correct answer. If the body {} was\r\nremoved from line 2, the code would still not compile, although it would be line 8 that\r\nwould throw the compilation error. Since dive() in Whale is abstract and Orca extends\r\nWhale, then it must implement an overridden version of dive(). The method on line\r\n9 is an overloaded version of dive(), not an overridden version, so Orca is an invalid\r\nsubclass and will not compile.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (334, 'What is the output of the following code? (Choose all that apply)', 'interface Aquatic {\r\npublic default int getNumberOfGills(int input) { return 2; }\r\n}\r\npublic class ClownFish implements Aquatic {\r\npublic String getNumberOfGills() { return "4"; }\r\npublic String getNumberOfGills(int input) { return "6"; }\r\npublic static void main(String[] args) {\r\nSystem.out.println(new ClownFish().getNumberOfGills(-1));\r\n}\r\n}', 'The code doesn’t compile because line 6 contains an incompatible override of the\r\ngetNumberOfGills(int input) method defined in the Aquatic interface. In particular,\r\nint and String are not covariant returns types, since int is not a subclass of String.\r\nNote that line 5 compiles without issue; getNumberOfGills() is an overloaded method\r\nthat is not related to the parent interface method that takes an int value.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (335, 'Which of the following statements can be inserted in the blank so that the code will compile successfully? (Choose all that apply)', 'public class Snake {}\r\npublic class Cobra extends Snake {}\r\npublic class GardenSnake {}\r\npublic class SnakeHandler {\r\nprivate Snake snake;\r\npublic void setSnake(Snake snake) { this.snake = snake; }\r\npublic static void main(String[] args) {\r\nnew SnakeHandler().setSnake( );\r\n}\r\n}', 'First off, Cobra is a subclass of Snake, so option A can be used. GardenSnake is\r\nnot defined as a subclass of Snake, so it cannot be used and option B is incorrect. The\r\nclass Snake is not marked as abstract, so it can be instantiated and passed, so option\r\nC is correct. Next, Object is a superclass of Snake, not a subclass, so it also cannot be\r\nused and option D is incorrect. The class String is unrelated in this example, so option\r\nE is incorrect. Finally, a null value can always be passed as an object value, regardless\r\nof type, so option F is correct.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (336, 'What is the result of the following code?', 'public abstract class Bird {\r\nprivate void fly() { System.out.println("Bird is flying"); }\r\npublic static void main(String[] args) {\r\nBird bird = new Pelican();\r\nbird.fly();\r\n}\r\n}\r\nclass Pelican extends Bird {\r\nprotected void fly() { System.out.println("Pelican is flying"); }\r\n}', 'The code compiles and runs without issue, so options C, D, and E are incorrect.\r\nThe trick here is that the method fly() is marked as private in the parent class Bird,\r\nwhich means it may only be hidden, not overridden. With hidden methods, the specific\r\nmethod used depends on where it is referenced. Since it is referenced within the Bird\r\nclass, the method declared on line 2 was used, and option A is correct. Alternatively,\r\nif the method was referenced within the Pelican class, or if the method in the parent\r\nclass was marked as protected and overridden in the subclass, then the method on line\r\n9 would have been used.', 13, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (337, 'Which of the following statements are true? (Choose all that apply)', '', 'Runtime exceptions are also known as unchecked exceptions. They are allowed\r\nto be declared, but they don’t have to be. Checked exceptions must be handled or\r\ndeclared. Legally, you can handle java.lang.Error subclasses, but it’s not a good idea.', 7, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (338, 'Which of the following pairs fill in the blanks to make this code compile? (Choose all that apply)', '7: public void ohNo() _____ Exception {\r\n8: _____________ Exception();\r\n9: }', 'In a method declaration, the keyword throws is used. To actually throw an\r\nexception, the keyword throw is used and a new exception is created.', 7, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (339, 'When are you required to use a finally block in a regular try statement (not a try-withresources)?', '', 'A try statement is required to have a catch clause and/or finally clause. If it goes\r\nthe catch route, it is allowed to have multiple catch clauses.', 7, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (340, 'Which exception will the following throw?', 'Object obj = new Integer(3);\r\nString str = (String) obj;\r\nSystem.out.println(str);', 'The second line tries to cast an Integer to a String. Since String does not extend\r\nInteger, this is not allowed and a ClassCastException is thrown.', 7, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (341, 'Which of the following exceptions are thrown by the JVM? (Choose all that apply)', '', 'java.io.IOException is thrown by many methods in the java.io package,\r\nbut it is always thrown programmatically. The same is true for NumberFormatException;\r\nit is thrown programmatically by the wrapper classes of java.lang. The other\r\nthree exceptions are all thrown by the JVM when the corresponding problem arises.', 7, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (342, 'What will happen if you add the statement System.out.println(5 / 0); to a working main() method?', '', 'The compiler tests the operation for a valid type but not a valid result, so the code\r\nwill still compile and run. At runtime, evaluation of the parameter takes place before\r\npassing it to the print() method, so an ArithmeticException object is raised.', 7, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (343, 'What is printed besides the stack trace caused by the NullPointerException from line 16?', 'public class DoSomething {\r\npublic void go() {\r\nSystem.out.print("A");\r\ntry {\r\nstop();\r\n} catch (ArithmeticException e) {\r\nSystem.out.print("B");\r\n} finally {\r\nSystem.out.print("C");\r\n}\r\nSystem.out.print("D");\r\n}\r\npublic void stop() {\r\nSystem.out.print("E");\r\nObject x = null;\r\nx.toString();\r\nSystem.out.print("F");\r\n}\r\npublic static void main(String[] args) {\r\nnew DoSomething().go();\r\n}\r\n}', 'The main() method invokes go and A is printed on line 3. The stop method is\r\ninvoked and E is printed on line 14. Line 16 throws a NullPointerException, so stop\r\nimmediately ends and line 17 doesn’t execute. The exception isn’t caught in go, so the\r\ngo method ends as well, but not before its finally block executes and C is printed on\r\nline 9. Because main() doesn’t catch the exception, the stack trace displays and no further\r\noutput occurs, so AEC was the output printed before the stack trace.', 7, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (344, 'What is the output of the following snippet, assuming a and b are both 0?', 'try {\r\nreturn a / b;\r\n} catch (RuntimeException e) {\r\nreturn -1;\r\n} catch (ArithmeticException e) {\r\nreturn 0;\r\n} finally {\r\nSystem.out.print("done");\r\n}', 'The order of catch blocks is important because they’re checked in the order they\r\nappear after the try block. Because ArithmeticException is a child class of Runtime-\r\nException, the catch block on line 7 is unreachable. (If an ArithmeticException is\r\nthrown in try try block, it will be caught on line 5.) Line 7 generates a compiler error\r\nbecause it is unreachable code.', 7, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (345, 'What is the output of the following program?', 'public class Laptop {\r\npublic void start() {\r\ntry {\r\nSystem.out.print("Starting up ");\r\nthrow new Exception();\r\n} catch (Exception e) {\r\nSystem.out.print("Problem ");\r\nSystem.exit(0);\r\n} finally {\r\nSystem.out.print("Shutting down ");\r\n}\r\n}\r\npublic static void main(String[] args) {\r\nnew Laptop().start();\r\n} }', 'The main() method invokes start on a new Laptop object. Line 4 prints Starting\r\nup; then line 5 throws an Exception. Line 6 catches the exception, line 7 prints\r\nProblem, and then line 8 calls System.exit, which terminates the JVM. The finally\r\nblock does not execute because the JVM is no longer running.', 7, 2);
INSERT INTO QUESTIONS(ID, QUESTION, CODE, EXPLANATION, TOPIC_ID, BOOK_ID) VALUES (346, 'What is the output of the following program?', 'public class Dog {\r\npublic String name;\r\npublic void parseName() {\r\nSystem.out.print("1");\r\ntry {\r\nSystem.out.print("2");\r\nint x = Integer.parseInt(name);\r\nSystem.out.print("3");\r\n} catch (NumberFormatException e) {\r\nSystem.out.print("4");\r\n}\r\n}\r\npublic static void main(String[] args) {\r\nDog leroy = new Dog();\r\nleroy.name = "Leroy";\r\nleroy.parseName();\r\nSystem.out.print("5");\r\n} }', 'The parseName method is invoked within main() on a new Dog object. Line 4 prints\r\n1. The try block executes and 2 is printed. Line 7 throws a NumberFormatException, so\r\nline 8 doesn’t execute. The exception is caught on line 9, and line 10 prints 4. Because the\r\nexception is handled, execution resumes normally. parseName runs to completion, and\r\nline 17 executes, printing 5. That’s the end of the program, so the output is 1245.', 7, 2);

CREATE TABLE ANSWERS( 
    ID bigint NOT NULL, 
    ANSWER VARCHAR(255) character set utf8 collate utf8_unicode_ci NOT NULL, 
    EXPLANATION TEXT character set utf8 collate utf8_unicode_ci, 
    ISCORRECT BOOLEAN NOT NULL, 
	ISCODE BOOLEAN NOT NULL,
    QUESTION_ID bigint NOT NULL,
	PRIMARY KEY(ID),
	FOREIGN KEY(QUESTION_ID) REFERENCES QUESTIONS(ID)
) default character set utf8 collate utf8_unicode_ci;

INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1, 'A Java source code file cannot define multiple interfaces.', 'Incorrect', FALSE, FALSE, 1);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (2, 'A Java source code file can only define multiple classes.', 'Incorrect', FALSE, FALSE, 1);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (3, 'A Java source code file can define multiple interfaces and classes.', 'correct because a Java source code file can define multiple interfaces and classes.', TRUE, FALSE, 1);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (4, 'The previous class will fail to compile.', 'correct because a public interface or class can be defined in a Java source code file with a matching name. The public interface Printable can’t be defined in the Java source code file, Multiple.java. It should be defined in Printable.java.', TRUE, FALSE, 1);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (5, 'The code fails to compile.', 'correct because Multiple2.java won’t compile. Multiple2.java can’t define a public class Car.', TRUE, FALSE, 2);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (6, 'The code compiles successfully.', 'incorrect because Multiple2.java won’t compile. Multiple2.java can’t define a public class Car.', FALSE, FALSE, 2);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (7, 'Removing the definition of class Car will compile the code.', 'correct because removal of the definition of the public class Car from Multiple2.java will leave only one public interface in Multiple2.java—Multiple2. Because the names of the public interface Multiple2 and the source code file match, Multiple2.java will compile successfully.', TRUE, FALSE, 2);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (8, 'Changing class Car to a non-public class will compile the code.', 'correct. Changing public class Car to a non-public class will leave only one public interface in Multiple2.java—Multiple2. Because the names of the public interface Multiple2 and source code file match, Multiple2.java will compile successfully.', TRUE, FALSE, 2);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (9, 'Changing class Multiple2 to a non-public class will compile the code.', 'incorrect. If you change the access modifier of the public interface Multiple2 to non-public, Multiple2.java will contain a definition of a public class Car, which isn’t allowed.', FALSE, FALSE, 2);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (10, 'class EJava {\r\npublic static void main(String sun[]) {\r\nSystem.out.println(sun[0] + " " + sun[2]);\r\n}\r\n}', 'correct because they use the correct method signature of the method main. The name of the method parameter need not be args. It can be any other valid identifier.', TRUE, TRUE, 3);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (11, 'class EJava {\r\nstatic public void main(String phone[]) {\r\nSystem.out.println(phone[0] + " " + phone[1]);\r\n}\r\n}', 'correct because they use the correct method signature of the method main. The name of the method parameter need not be args. It can be any other valid identifier.', TRUE, TRUE, 3);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (12, 'class EJava {\r\nstatic public void main(String[] arguments[]) {\r\nSystem.out.println(arguments[0] + " " + arguments[1]);\r\n}\r\n}', 'incorrect because this main method accepts a two-dimensional array. Hence, it won’t be treated as the main method.', FALSE, TRUE, 3);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (13, 'class EJava {\r\nstatic void public main(String args[]) {\r\nSystem.out.println(args[0] + " " + args[1]);\r\n}\r\n}', 'incorrect because this code won’t compile. The access modifier of a method (public) should be placed before its return type (void); otherwise, the code won’t compile.', FALSE, TRUE, 3);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (14, 'package building;\r\npublic class Curtain {}', 'incorrect because when the class Curtain is defined with the public access modifier, it will be accessible outside the package building.', FALSE, TRUE, 4);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (15, 'package building;\r\nprotected class Curtain {}', 'incorrect because the class Curtain is a top-level class (it’s not defined within another class), so it can’t be defined using the access modifiers protected and private.', FALSE, TRUE, 4);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (16, 'package building;\r\nclass Curtain {}', 'Correct', TRUE, TRUE, 4);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (17, 'package building;\r\nprivate class Curtain {}', 'incorrect because the class Curtain is a top-level class (it’s not defined within another class), so it can’t be defined using the access modifiers protected and private.', FALSE, TRUE, 4);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (18, 'package statement', 'Correct', TRUE, FALSE, 5);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (19, 'import statements', 'Correct', TRUE, FALSE, 5);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (20, 'methods', 'Correct', TRUE, FALSE, 5);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (21, 'variables', 'Correct', TRUE, FALSE, 5);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (22, 'Java compiler', 'Java compiler and Java Runtime Environment aren’t components of a Java source file.', FALSE, FALSE, 5);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (23, 'Java Runtime Environment', 'Java compiler and Java Runtime Environment aren’t components of a Java source file.', FALSE, FALSE, 5);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (24, '1, 3, 2, 5, 6, 4', 'Correct', TRUE, FALSE, 6);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (25, '3, 1, 2, 5, 4, 6', 'Correct', TRUE, FALSE, 6);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (26, '3, 2, 1, 4, 5, 6', 'None of the variables or methods can be defined before the definition of a class or interface.', FALSE, FALSE, 6);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (27, '3, 2, 1, 5, 6, 4', 'Correct', TRUE, FALSE, 6);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (28, '#connect java compiler;\r\n#connect java virtual machine;\r\nclass EJavaGuru {}', 'incorrect because #connect isn’t a statement in Java. # is used to add comments in UNIX.', FALSE, TRUE, 7);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (29, 'package java compiler;\r\nimport java virtual machine;\r\nclass EJavaGuru {}', 'incorrect because a package name (Java compiler) cannot contain spaces. Also, java virtual machine isn’t a valid package name to be imported in a class. The package name to be imported cannot contain spaces.', FALSE, TRUE, 7);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (30, 'import javavirtualmachine.*;\r\npackage javacompiler;\r\nclass EJavaGuru {\r\nvoid method1() {}\r\nint count;\r\n}', 'incorrect because a package statement should be placed before an import statement.', FALSE, TRUE, 7);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (31, 'package javacompiler;\r\nimport javavirtualmachine.*;\r\nclass EJavaGuru {\r\nvoid method1() {}\r\nint count;\r\n}', 'Correct', TRUE, TRUE, 7);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (32, '#package javacompiler;\r\n$import javavirtualmachine;\r\nclass EJavaGuru {\r\nvoid method1() {}\r\nint count;\r\n}', 'incorrect. #package and $import aren’t valid statements or directives in Java.', FALSE, TRUE, 7);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (33, 'package javacompiler;\r\nimport javavirtualmachine;\r\nClass EJavaGuru {\r\nvoid method1() {}\r\nint count;\r\n}', 'incorrect. Java is case-sensitive, so the word class is not the same as the word Class. The correct keyword to define a class is class.', FALSE, TRUE, 7);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (34, 'The imported class, java.util.Date, can be accessed only in the class Student.', 'The import statement applies to all the classes, interfaces, and enums defined within the same Java source code file.', FALSE, FALSE, 8);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (35, 'The imported class, java.util.Date, can be accessed by both the Student and Course classes.', 'Correct', TRUE, FALSE, 8);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (36, 'Both of the classes Student and Course are defined in the package com.ejavaguru.', 'Correct', TRUE, FALSE, 8);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (37, 'Only the class Student is defined in the package com.ejavaguru. The class Course is defined in the default Java package.', 'If a package statement is defined in the source code file, all of the classes, interfaces, and enums defined within it will exist in the same Java package.', FALSE, FALSE, 8);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (38, 'one:two:three', 'The command-line arguments passed to the main method of a class do not contain the word Java and the name of the class.', FALSE, FALSE, 9);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (39, 'EJavaGuru:one:two', 'The command-line arguments passed to the main method of a class do not contain the word Java and the name of the class.', FALSE, FALSE, 9);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (40, 'java:EJavaGuru:one', 'The command-line arguments passed to the main method of a class do not contain the word Java and the name of the class.', FALSE, FALSE, 9);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (41, 'two:three:four', 'The command-line arguments passed to the main method of a class do not contain the word Java and the name of the class.', TRUE, FALSE, 9);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (42, 'public void main (String[] args)', 'This option defines a valid method but not a valid main method. The main method should be defined as a static method, which is missing from the method declaration', FALSE, TRUE, 10);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (43, 'public void main(String args[])', 'In this option, the square brackets are placed after the name of the method argument. The main method accepts an array as a method argument, and to define an array, the square brackets can be placed after either the data type or the method argument name.', FALSE, TRUE, 10);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (44, 'static public void main (String[] array)', 'Extra spaces in a class are ignored by the Java compiler.', TRUE, TRUE, 10);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (45, 'public static void main (String args)', 'The main method accepts an array of String as a method argument. The method in this option accepts a single String object.', FALSE, TRUE, 10);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (46, 'static public main (String args[])', 'It isn’t a valid method definition and doesn’t specify the return type of the method. This line of code will not compile.', FALSE, TRUE, 10);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (47, 'You can start the execution of a Java application through the main method.', 'The Java Virtual Machine calls and executes the main method.', TRUE, FALSE, 11);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (48, 'The Java compiler calls and executes the main method.', 'The Java Virtual Machine calls and executes the main method.', FALSE, FALSE, 11);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (49, 'The Java Virtual Machine calls and executes the main method.', 'The Java Virtual Machine calls and executes the main method.', TRUE, FALSE, 11);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (50, 'A class calls and executes the main method.', 'The Java Virtual Machine calls and executes the main method.', FALSE, FALSE, 11);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (51, 'import mycode.com.ejavaguru.Course;', '', FALSE, TRUE, 12);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (52, 'import com.ejavaguru.Course;', '', TRUE, TRUE, 12);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (53, 'import mycode.com.ejavaguru;', '', FALSE, TRUE, 12);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (54, 'import com.ejavaguru;', '', FALSE, TRUE, 12);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (55, 'import mycode.com.ejavaguru*;', '', FALSE, TRUE, 12);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (56, 'import com.ejavaguru*;', '', FALSE, TRUE, 12);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (57, 'class EJavaGuru will print Java.', '', FALSE, FALSE, 13);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (58, 'class EJavaGuru will print null.', '', FALSE, FALSE, 13);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (59, 'class EJavaGuru won’t compile.', '', TRUE, FALSE, 13);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (60, 'class EJavaGuru will throw an exception at runtime.', '', FALSE, FALSE, 13);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (61, 'The class EJavaGuru will print Java.', '', FALSE, FALSE, 14);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (62, 'The class EJavaGuru will print null.', '', FALSE, FALSE, 14);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (63, 'The class EJavaGuru won’t compile.', '', TRUE, FALSE, 14);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (64, 'The class EJavaGuru will throw an exception at runtime.', '', FALSE, FALSE, 14);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (65, 'You can’t define a method argument as a private variable.', '', TRUE, FALSE, 15);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (66, 'A method argument should be defined with either public or default accessibility.', '', FALSE, FALSE, 15);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (67, 'For overridden methods, method arguments should be defined with protected accessibility.', '', FALSE, FALSE, 15);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (68, 'None of the above.', '', FALSE, FALSE, 15);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (69, 'Click "Check" for the answer', '534534', TRUE, FALSE, 16);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (70, 'long var1 = 0_100_267_760;', '', TRUE, TRUE, 17);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (71, 'long var2 = 0_x_4_13;', 'incorrect because it uses underscores after the starting 0 and after the letter x, neither of which is allowed. The correct value is 0x4_13.', FALSE, TRUE, 17);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (72, 'long var3 = 0b_x10_BA_75;', 'You can’t place an underscore right after the prefixes 0b and 0B that are used to define binary literal values. Also, a binary value can contain only the digits 1 and 0.', FALSE, TRUE, 17);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (73, 'long var4 = 0b_10000_10_11;', 'You can’t place an underscore right after the prefixes 0b and 0B used to define binary literal values. The correct value is 0b10000_10_11.', FALSE, TRUE, 17);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (74, 'long var5 = 0xa10_AG_75;', 'incorrect because it uses the letter G, which isn’t allowed in a hexadecimal number system. A correct value is 0xa10_A_75.', FALSE, TRUE, 17);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (75, 'long var6 = 0x1_0000_10;', '', TRUE, TRUE, 17);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (76, 'long var7 = 100__12_12;', '', TRUE, TRUE, 17);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (77, 'The code on line 1 will fail to compile.', '', TRUE, FALSE, 18);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (78, 'Can’t initialize multiple variables like the code on line 2.', '', TRUE, FALSE, 18);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (79, 'The code on line 3 is correct.', '', TRUE, FALSE, 18);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (80, 'Can’t assign ''false'' to a boolean variable.', '', FALSE, FALSE, 18);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (81, 'The code on line 5 is correct.', '', TRUE, FALSE, 18);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (82, 'Click "Check" for the answer', '32', TRUE, FALSE, 19);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (83, 'Click "Check" for the answer', 'Expression that runs: line1: both, line2: first, line3: first, line4: all, line5: first and last', TRUE, FALSE, 20);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (84, 'A programmer can’t define a new primitive data type.', '', FALSE, FALSE, 21);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (85, 'A programmer can define a new primitive data type.', '', TRUE, FALSE, 21);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (86, 'Once assigned, the value of a primitive can’t be modified.', '', TRUE, FALSE, 21);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (87, 'A value can’t be assigned to a primitive variable.', '', TRUE, FALSE, 21);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (88, 'Code at line 4 fails to compile.', '', TRUE, FALSE, 22);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (89, 'Code at line 5 fails to compile.', '', FALSE, FALSE, 22);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (90, 'Code at line 6 fails to compile.', '', TRUE, FALSE, 22);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (91, 'Code at line 7 fails to compile.', '', TRUE, FALSE, 22);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (92, '611', '', TRUE, FALSE, 23);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (93, '641', '', FALSE, FALSE, 23);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (94, '930', '', FALSE, FALSE, 23);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (95, '960', '', FALSE, FALSE, 23);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (96, 'long, boolean, double', '', TRUE, FALSE, 24);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (97, 'long, int, float', '', FALSE, FALSE, 24);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (98, 'char, int, double', '', FALSE, FALSE, 24);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (99, 'long, boolean, float', '', TRUE, FALSE, 24);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (100, 'bit a = 0;', '', FALSE, TRUE, 25);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (101, 'integer a2 = 7;', '', FALSE, TRUE, 25);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (102, 'long a3 = 0x10C;', '', TRUE, TRUE, 25);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (103, 'short a4 = 0512;', '', TRUE, TRUE, 25);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (104, 'double a5 = 10;', '', FALSE, TRUE, 25);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (105, 'byte a7 = -0;', '', TRUE, TRUE, 25);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (106, 'long a8 = 123456789;', '', TRUE, TRUE, 25);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (107, 'ctr += 1;', '', TRUE, TRUE, 26);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (108, 'ctr =+ 1;', '', FALSE, TRUE, 26);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (109, '++ctr;', '', TRUE, TRUE, 26);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (110, 'ctr = 1;', '', FALSE, TRUE, 26);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (111, '218', '', FALSE, FALSE, 27);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (112, '232', '', FALSE, FALSE, 27);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (113, '246', '', FALSE, FALSE, 27);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (114, 'Compilation error', '', TRUE, FALSE, 27);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (115, 'Code prints true', '', FALSE, FALSE, 28);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (116, 'Code prints false', '', FALSE, FALSE, 28);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (117, 'Code prints 90 >= false', '', FALSE, FALSE, 28);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (118, 'Compilation error', '', TRUE, FALSE, 28);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (119, 'Code prints false', '', FALSE, FALSE, 29);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (120, 'Code prints true', '', TRUE, FALSE, 29);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (121, 'Code will print true if code on line 6 is modified to the following: boolean returnVal = (num1 >= 12 && num2 < 4.567) || eJavaResult == true;', '', TRUE, FALSE, 29);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (122, 'Code will print true if code on line 6 is modified to the following: boolean returnVal = num1 >= 12 && (num2 < 4.567 || eJavaResult == false);', '', FALSE, FALSE, 29);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (123, 'true true false', '', FALSE, FALSE, 30);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (124, '10.0 false false', '', TRUE, FALSE, 30);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (125, 'false false false', '', FALSE, FALSE, 30);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (126, 'Compilation error', '', FALSE, FALSE, 30);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (127, '123456789', '', TRUE, FALSE, 31);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (128, '987654321', '', FALSE, FALSE, 31);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (129, 'No output', '', FALSE, FALSE, 31);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (130, 'The class Phone will not compile.', '', FALSE, FALSE, 31);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (131, 'Click "Check" for the answer', 'The code fails to compile, with the following compilation error message: Employee.java:4: error: recursive constructor invocation', TRUE, FALSE, 32);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (132, 'public double weight;\r\nprivate void setWeight(double w) { weight = w; }\r\nprivate double getWeight() { return weight; }', '', FALSE, TRUE, 33);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (133, 'public double weight;\r\nvoid setWeight(double w) { weight = w; }\r\ndouble getWeight() { return weight; }', '', FALSE, TRUE, 33);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (134, 'public double weight;\r\nprotected void setWeight(double w) { weight = w; }\r\nprotected double getWeight() { return weight; }', '', FALSE, TRUE, 33);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (135, 'public double weight;\r\npublic void setWeight(double w) { weight = w; }\r\npublic double getWeight() { return weight; }', '', FALSE, TRUE, 33);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (136, 'None of the above.', '', TRUE, FALSE, 33);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (137, 'Define instance variables as private members.', '', TRUE, FALSE, 34);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (138, 'Define public methods to access and modify the instance variables.', '', TRUE, FALSE, 34);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (139, 'Define some of the instance variables as public members.', '', FALSE, FALSE, 34);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (140, 'All of the above.', '', FALSE, FALSE, 34);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (141, 'The height of a Person can never be set to more than 300.', '', FALSE, FALSE, 35);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (142, 'The previous code is an example of a well-encapsulated class.', '', FALSE, FALSE, 35);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (143, 'The class would be better encapsulated if the height validation weren’t set to 300.', '', FALSE, FALSE, 35);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (144, 'Even though the class isn’t well encapsulated, it can be inherited by other classes.', '', TRUE, FALSE, 35);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (145, 'public void addNumbers(byte arg1, int arg2, int arg3) {\r\ndouble sum = arg1 + arg2 + arg3;\r\n}', '', FALSE, TRUE, 36);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (146, 'public double subtractNumbers(byte arg1, int arg2, int arg3) {\r\ndouble sum = arg1 + arg2 + arg3;\r\nreturn sum;\r\n}', '', TRUE, TRUE, 36);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (147, 'public double numbers(long arg1, byte arg2, double arg3) {\r\nreturn arg1 + arg2 + arg3;\r\n}', '', FALSE, TRUE, 36);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (148, 'public float wakaWakaAfrica(long a1, long a2, short a977) {\r\ndouble sum = a1 + a2 + a977;\r\nreturn (float)sum;\r\n}', '', TRUE, TRUE, 36);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (149, 'If the return type of a method is int, the method can return a value of type byte.', '', TRUE, FALSE, 37);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (150, 'A method may or may not return a value.', '', TRUE, FALSE, 37);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (151, 'If the return type of a method is void, it can define a return statement without a value, as follows: return;', '', TRUE, FALSE, 37);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (152, 'A method may or may not accept any method arguments.', '', TRUE, FALSE, 37);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (153, 'A method should accept at least one method argument or define its return type.', '', FALSE, FALSE, 37);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (154, 'A method whose return type is String can’t return null.', '', FALSE, FALSE, 37);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (155, 'anotherMethod\r\nanotherMethod\r\nsomeMethod\r\nsomeMethod', '', FALSE, TRUE, 38);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (156, 'anotherMethod\r\nEJava\r\nsomeMethod\r\nsomeMethod', '', TRUE, TRUE, 38);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (157, 'anotherMethod\r\nEJava\r\nsomeMethod\r\nEJava', '', FALSE, TRUE, 38);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (158, 'Compilation error.', '', FALSE, FALSE, 38);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (159, '20\r\n10\r\n11\r\n11', '', FALSE, TRUE, 39);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (160, '20\r\n20\r\n11\r\n10', '', FALSE, TRUE, 39);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (161, '20\r\n10\r\n11\r\n10', '', TRUE, TRUE, 39);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (162, 'Compilation error', '', FALSE, FALSE, 39);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (163, 'private String eJava(int val, String firstName, double dur)', '', FALSE, FALSE, 40);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (164, 'public void eJava(int val1, String val2, double val3)', '', FALSE, FALSE, 40);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (165, 'String eJava(String name, int age, double duration)', '', TRUE, FALSE, 40);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (166, 'float eJava(double name, String age, byte duration)', '', TRUE, FALSE, 40);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (167, 'ArrayList<String> eJava()', '', TRUE, FALSE, 40);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (168, 'char[] eJava(double numbers)', '', TRUE, FALSE, 40);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (169, 'String eJava()', '', TRUE, FALSE, 40);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (170, 'Compilation error', '', FALSE, FALSE, 41);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (171, 'Runtime exception', '', FALSE, FALSE, 41);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (172, 'int String', '', TRUE, FALSE, 41);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (173, 'long Object', '', FALSE, FALSE, 41);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (174, 'The class EJava defines three overloaded constructors.', '', TRUE, FALSE, 42);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (175, 'The class EJava defines two overloaded constructors. The private constructor isn’t counted as an overloaded constructor.', '', FALSE, FALSE, 42);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (176, 'Constructors with different access modifiers can’t call each other.', '', FALSE, FALSE, 42);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (177, 'The code prints the following: protected private public', '', TRUE, FALSE, 42);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (178, 'The code prints the following: public private protected', '', FALSE, FALSE, 42);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (179, 'If a user defines a private constructor for a public class, Java creates a public default constructor for the class.', '', TRUE, FALSE, 43);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (180, 'A class that gets a default constructor doesn’t have overloaded constructors.', '', FALSE, FALSE, 43);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (181, 'A user can overload the default constructor of a class.', '', TRUE, FALSE, 43);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (182, 'The following class is eligible for default constructor: class EJava {}', '', FALSE, FALSE, 43);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (183, 'The following class is also eligible for a default constructor:\r\nclass EJava {\r\nvoid EJava() {}\r\n}', '', FALSE, TRUE, 43);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (184, 'true', '', FALSE, FALSE, 44);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (185, 'false', '', FALSE, FALSE, 44);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (186, 'AB', '', FALSE, FALSE, 44);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (187, 'ABC', '', FALSE, FALSE, 44);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (188, 'Compilation error', '', TRUE, FALSE, 44);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (189, 'StringBuilder name = StringBuilder.getInstance();', '', FALSE, TRUE, 45);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (190, 'StringBuilder name = StringBuilder.createInstance();', '', FALSE, TRUE, 45);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (191, 'StringBuilder name = StringBuilder.buildInstance();', '', FALSE, TRUE, 45);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (192, 'None of the above', '', TRUE, FALSE, 45);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (193, 'Code on line 4 is the same as {"Jan", "Feb", null, null},', '', FALSE, FALSE, 46);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (194, 'No value is stored at multiStrArr[2][2]', '', TRUE, FALSE, 46);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (195, 'No value is stored at multiStrArr[1][1]', '', FALSE, FALSE, 46);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (196, 'Array multiStrArr is asymmetric.', '', TRUE, FALSE, 46);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (197, 'One:Two:One:Two:', '', TRUE, FALSE, 47);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (198, 'Bne:Two:Bne:Two:', '', FALSE, FALSE, 47);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (199, 'One:Two:Bne:Two:', '', FALSE, FALSE, 47);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (200, 'Bne:Two:One:Two:', '', FALSE, FALSE, 47);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (201, '4c010', '', FALSE, FALSE, 48);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (202, '4c10', '', FALSE, FALSE, 48);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (203, '113', '', FALSE, FALSE, 48);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (204, '103', '', FALSE, FALSE, 48);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (205, 'Compilation error', '', TRUE, FALSE, 48);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (206, '0:0', '', FALSE, FALSE, 49);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (207, 'a:b', '', FALSE, FALSE, 49);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (208, '0:b', '', FALSE, FALSE, 49);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (209, 'a:0', '', FALSE, FALSE, 49);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (210, 'Compilation error', '', TRUE, FALSE, 49);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (211, 'int[][] array1 = {{1, 2, 3}, {}, {1, 2,3, 4, 5}};', '', TRUE, TRUE, 50);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (212, 'int[][] array2 = new array() {{1, 2, 3}, {}, {1, 2,3, 4, 5}};', '', FALSE, TRUE, 50);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (213, 'int[][] array3 = {1, 2, 3}, {0}, {1, 2,3, 4, 5};', '', FALSE, TRUE, 50);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (214, 'int[][] array5 = new int[2][];', '', TRUE, TRUE, 50);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (215, 'By default, an ArrayList creates an array with an initial size of 16 to store its elements.', '', FALSE, FALSE, 51);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (216, 'Because ArrayList stores only objects, you can’t pass element of an ArrayList to a switch construct.', '', FALSE, FALSE, 51);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (217, 'Calling clear() or remove() on an ArrayList, will remove all its elements.', '', FALSE, FALSE, 51);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (218, 'If you frequently add elements to an ArrayList, specifying a larger capacity will improve the code efficiency.', '', TRUE, FALSE, 51);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (219, 'Calling the method clone() on an ArrayList creates its shallow copy; that is, it doesn’t clone the individual list elements.', '', TRUE, FALSE, 51);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (220, 'An ArrayList offers a resizable array, which is easily managed using the methods it provides. You can add and remove elements from an ArrayList.', '', TRUE, FALSE, 52);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (221, 'Values stored by an ArrayList can be modified.', '', TRUE, FALSE, 52);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (222, 'You can iterate through elements of an ArrayList using a for loop, Iterator, or ListIterator.', '', TRUE, FALSE, 52);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (223, 'An ArrayList requires you to specify the total elements before you can store any elements in it.', '', FALSE, FALSE, 52);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (224, 'An ArrayList can store any type of object.', '', TRUE, FALSE, 52);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (225, 'Line 7 prints true', '', TRUE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (226, 'Line 7 prints false', '', FALSE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (227, 'Line 8 prints -1', '', FALSE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (228, 'Line 8 prints 1', '', TRUE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (229, 'Line 9 removes all elements of the list ejg', '', TRUE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (230, 'Line 9 sets ejg to null', '', FALSE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (231, 'Line 10 prints null', '', FALSE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (232, 'Line 10 prints []', '', TRUE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (233, 'Line 10 prints a value similar to ArrayList@16356', '', FALSE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (234, 'Line 11 throws an exception', '', TRUE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (235, 'Line 11 prints null', '', FALSE, FALSE, 53);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (236, 'true printed once', '', FALSE, FALSE, 54);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (237, 'false printed once', '', FALSE, FALSE, 54);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (238, 'true printed in an infinite loop', '', TRUE, FALSE, 54);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (239, 'false printed in an infinite loop', '', FALSE, FALSE, 54);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (240, 'gZmeAZ', '', FALSE, FALSE, 55);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (241, 'gZmeAa', '', TRUE, FALSE, 55);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (242, 'gZm', '', FALSE, FALSE, 55);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (243, 'gZ', '', FALSE, FALSE, 55);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (244, 'game', '', FALSE, FALSE, 55);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (245, 'gZmeAZ', '', FALSE, FALSE, 56);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (246, 'gZmeAa', '', FALSE, FALSE, 56);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (247, 'gZm', '', FALSE, FALSE, 56);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (248, 'gZ', '', FALSE, FALSE, 56);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (249, 'game', '', TRUE, FALSE, 56);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (250, '12S512S5', '', TRUE, FALSE, 57);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (251, '12S12S', '', FALSE, FALSE, 57);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (252, '1025102S', '', FALSE, FALSE, 57);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (253, 'Runtime exception', '', FALSE, FALSE, 57);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (254, '521', '', FALSE, FALSE, 58);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (255, 'Runtime exception', '', FALSE, FALSE, 58);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (256, '65321', '', TRUE, FALSE, 58);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (257, '65431', '', FALSE, FALSE, 58);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (258, 'A:10', '', FALSE, FALSE, 59);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (259, 'C:10', '', FALSE, FALSE, 59);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (260, 'A:20', '', FALSE, FALSE, 59);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (261, 'B:29', '', FALSE, FALSE, 59);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (262, 'C:249', '', FALSE, FALSE, 59);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (263, 'F:249', '', TRUE, FALSE, 59);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (264, 'Time to work', '', FALSE, FALSE, 60);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (265, 'Nearing weekend', '', FALSE, FALSE, 60);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (266, 'Weekend!', '', TRUE, FALSE, 60);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (267, 'Invalid day?', '', FALSE, FALSE, 60);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (268, 'Submission by Harry:\r\nlong dayCount = 31;\r\nif (dayCount == 28 || dayCount == 29)\r\nSystem.out.println("Feb");\r\nelse if (dayCount == 30)\r\nSystem.out.println("Apr");\r\nelse if (dayCount == 31)\r\nSystem.out.println("Jan");', '', TRUE, TRUE, 61);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (269, 'Submission by Selvan:\r\nlong dayCount = 31;\r\nswitch (dayCount) {\r\ncase 28:\r\ncase 29: System.out.println("Feb"); break;\r\ncase 30: System.out.println("Apr"); break;\r\ncase 31: System.out.println("Jan"); break;\r\n}', '', FALSE, TRUE, 61);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (270, 'Outer:Outer:', '', TRUE, FALSE, 62);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (271, 'Outer:Inner:Outer:Inner:', '', FALSE, FALSE, 62);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (272, 'Outer:', '', FALSE, FALSE, 62);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (273, 'Outer:Inner:', '', FALSE, FALSE, 62);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (274, 'Inner:Inner:', '', FALSE, FALSE, 62);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (275, '10', '', FALSE, FALSE, 63);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (276, '30', '', TRUE, FALSE, 63);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (277, '31', '', FALSE, FALSE, 63);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (278, '32', '', FALSE, FALSE, 63);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (279, '10', '', FALSE, FALSE, 64);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (280, '30', '', FALSE, FALSE, 64);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (281, '31', '', FALSE, FALSE, 64);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (282, '32', '', TRUE, FALSE, 64);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (283, 'The enhanced for loop can’t be used within a regular for loop.', '', FALSE, FALSE, 65);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (284, 'The enhanced for loop can’t be used within a while loop.', '', FALSE, FALSE, 65);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (285, 'The enhanced for loop can be used within a do-while loop.', '', TRUE, FALSE, 65);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (286, 'The enhanced for loop can’t be used within a switch construct.', '', FALSE, FALSE, 65);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (287, 'All of the above statements are false.', '', FALSE, FALSE, 65);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (288, 'true\r\nfalse\r\nABC', '', FALSE, TRUE, 66);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (289, 'false\r\nABC', '', TRUE, TRUE, 66);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (290, 'true\r\nABC', '', FALSE, TRUE, 66);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (291, 'Compilation error', '', FALSE, FALSE, 66);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (292, 'case 10*3: System.out.println(2);', '', TRUE, FALSE, 67);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (293, 'case num: System.out.println(3);', '', FALSE, FALSE, 67);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (294, 'case 10/3: System.out.println(4);', '', TRUE, FALSE, 67);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (295, 'case num2: System.out.println(5);', '', TRUE, FALSE, 67);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (296, 'default', '', FALSE, TRUE, 68);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (297, 'default\r\n4', '', FALSE, TRUE, 68);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (298, '4', '', FALSE, TRUE, 68);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (299, 'Compilation error', '', TRUE, FALSE, 68);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (300, 'default\r\ncase1\r\ncase2', '', FALSE, TRUE, 69);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (301, 'case1\r\ncase2', '', FALSE, TRUE, 69);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (302, 'case2', '', FALSE, TRUE, 69);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (303, 'Compilation error', '', TRUE, FALSE, 69);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (304, 'Runtime exception', '', FALSE, FALSE, 69);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (305, 'ejava\r\nenum\r\nguru', '', TRUE, TRUE, 70);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (306, 'ejava', '', FALSE, TRUE, 70);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (307, 'ejavaguru\r\ne', '', FALSE, TRUE, 70);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (308, 'ejava\r\nenum\r\nguru\r\nejavaguru', '', FALSE, TRUE, 70);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (309, 'else', '', FALSE, TRUE, 71);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (310, '0\r\n1\r\n2', '', FALSE, TRUE, 71);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (311, '0\r\n1', '', TRUE, TRUE, 71);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (312, 'Compilation error', '', FALSE, FALSE, 71);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (313, 'Compilation error', '', FALSE, FALSE, 72);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (314, '0\r\n5', '', FALSE, TRUE, 72);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (315, '0\r\n5\r\n10', '', FALSE, TRUE, 72);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (316, '10', '', FALSE, TRUE, 72);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (317, '0\r\n1\r\n5', '', FALSE, TRUE, 72);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (318, '5', '', TRUE, TRUE, 72);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (319, 'The class Office prints Harry.', '', FALSE, FALSE, 73);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (320, 'The derived class Programmer can’t define a getter method for a variable defined in its base class Employee.', '', FALSE, FALSE, 73);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (321, 'The derived class Programmer can’t access variables of its base class in its constructors.', '', FALSE, FALSE, 73);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (322, 'new Programmer ("Harry").getName(); isn’t the right way to create an object of class Programmer.', '', FALSE, FALSE, 73);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (323, 'Compilation error.', '', TRUE, FALSE, 73);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (324, 'An object of the class Manager can be added to an array of the interface Interviewer. Code on line 1 will compile successfully.', '', TRUE, FALSE, 74);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (325, 'An object of the class Employee can be added to an array of the interface Interviewer. Code on line 2 will compile successfully.', '', FALSE, FALSE, 74);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (326, 'An object of the class HRExecutive can be added to an array of the interface Interviewer. Code on line 3 will compile successfully.', '', TRUE, FALSE, 74);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (327, 'An object of the interface Interviewer can be added to an array of the interface Interviewer. Code on line 4 will compile successfully.', '', FALSE, FALSE, 74);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (328, 'Prog:null:Emp:EmpAddress', '', FALSE, TRUE, 75);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (329, 'Prog:EmpAddress:Emp:EmpAddress', '', TRUE, TRUE, 75);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (330, 'Prog::Emp:EmpAddress', '', FALSE, TRUE, 75);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (331, 'Compilation error', '', FALSE, FALSE, 75);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (332, 'String run()', '', TRUE, TRUE, 76);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (333, 'void run(int meters)', '', FALSE, TRUE, 76);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (334, 'void run()', '', FALSE, TRUE, 76);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (335, 'int run(String race)', '', FALSE, TRUE, 76);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (336, 'Animal\r\nRabbit', '', TRUE, TRUE, 77);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (337, 'Cat\r\nRabbit', '', FALSE, TRUE, 77);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (338, 'Animal\r\nAnimal', '', FALSE, TRUE, 77);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (339, 'None of the above', '', FALSE, FALSE, 77);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (340, 'The output of the code is: Flower', '', FALSE, FALSE, 78);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (341, 'The output of the code is: Rose', '', FALSE, FALSE, 78);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (342, 'The output of the code is: Lily', '', FALSE, FALSE, 78);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (343, 'The code fails to compile.', '', TRUE, FALSE, 78);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (344, 'void walk(Movable movable) {', '', TRUE, TRUE, 79);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (345, 'void walk(Person movable) {', '', TRUE, TRUE, 79);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (346, 'void walk(Vehicle movable) {', '', TRUE, TRUE, 79);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (347, 'void walk() {', '', FALSE, TRUE, 79);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (348, 'Only an abstract class can be used as a base class to implement polymorphism with classes.', '', FALSE, FALSE, 80);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (349, 'Polymorphic methods are also called overridden methods.', '', TRUE, FALSE, 80);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (350, 'In polymorphism, depending on the exact type of object, the JVM executes the appropriate method at compile time.', '', FALSE, FALSE, 80);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (351, 'None of the above.', '', FALSE, FALSE, 80);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (352, 'The code exhibits polymorphism with classes.', '', FALSE, FALSE, 81);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (353, 'The code exhibits polymorphism with interfaces.', '', FALSE, FALSE, 81);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (354, 'The code exhibits polymorphism with classes and interfaces.', '', FALSE, FALSE, 81);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (355, 'None of the above.', '', TRUE, FALSE, 81);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (356, 'Inheritance enables you to reuse existing code.', '', TRUE, FALSE, 82);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (357, 'Inheritance saves you from having to modify common code in multiple classes.', '', TRUE, FALSE, 82);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (358, 'Polymorphism passes special instructions to the compiler so that the code can run on multiple platforms.', '', FALSE, FALSE, 82);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (359, 'Polymorphic methods cannot throw exceptions.', '', FALSE, FALSE, 82);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (360, 'The method orbit defined in the classes Satellite, Moon, and Artificial-Satellite is polymorphic.', '', TRUE, FALSE, 83);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (361, 'Only the method orbit defined in the classes Satellite and Artificial-Satellite is polymorphic.', '', FALSE, FALSE, 83);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (362, 'Only the method orbit defined in the class ArtificialSatellite is polymorphic.', '', FALSE, FALSE, 83);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (363, 'None of the above.', '', FALSE, FALSE, 83);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (364, 'Programmer b = new Programmer();', '', FALSE, TRUE, 84);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (365, 'Programmer b = new Author();', '', TRUE, TRUE, 84);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (366, 'Author b = new Author();', '', TRUE, TRUE, 84);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (367, 'Author b = new Programmer();', '', FALSE, TRUE, 84);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (368, 'Programmer b = ((Author)new Programmer());', '', FALSE, TRUE, 84);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (369, 'Author b = ((Author)new Programmer());', '', FALSE, TRUE, 84);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (370, 'Modify code on line 2 to: interface Printable {', '', FALSE, FALSE, 85);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (371, 'Modify code on line 3 to: public String print();', '', FALSE, FALSE, 85);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (372, 'Define the accessibility of the print methods to public on lines 6 and 9.', '', TRUE, FALSE, 85);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (373, 'Modify code on line 8 so that it implements only the interface Printable.', '', FALSE, FALSE, 85);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (374, 'EJava\r\nEJava\r\nEJava\r\nGuru', '', TRUE, TRUE, 86);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (375, 'EJava\r\nGuru\r\nEJava\r\nGuru', '', FALSE, TRUE, 86);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (376, 'EJava\r\nEJava\r\nEJava\r\nEJava', '', FALSE, TRUE, 86);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (377, 'EJava\r\nGuru\r\nGuru\r\nGuru', '', FALSE, TRUE, 86);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (378, 'The code prints\r\nFile not found\r\nfinally\r\nNext task..', '', FALSE, TRUE, 87);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (379, 'The code prints\r\nFile Opened\r\nFile Closing Exception\r\nfinally\r\nNext task..', '', FALSE, TRUE, 87);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (380, 'The code prints File not found', '', FALSE, TRUE, 87);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (381, 'The code fails to compile', '', TRUE, TRUE, 87);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (382, 'The code prints\r\nplayers.txt found\r\nNullPointerException', '', TRUE, TRUE, 88);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (383, 'The code prints\r\nplayers.txt found\r\ncoach.txt not found', '', FALSE, TRUE, 88);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (384, 'The code throws a runtime exception.', '', FALSE, FALSE, 88);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (385, 'The code fails to compile.', '', FALSE, FALSE, 88);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (386, '0\r\njava.lang.StackOverFlowError', '', FALSE, TRUE, 89);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (387, '0\r\n1', '', TRUE, TRUE, 89);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (388, '0\r\n1\r\n2\r\njava.lang.StackOverFlowError', '', FALSE, TRUE, 89);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (389, 'printable = (Printable)blackInk will throw compilation error.', '', FALSE, FALSE, 90);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (390, 'printable = (Printable)blackInk will throw runtime exception.', '', TRUE, FALSE, 90);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (391, 'printable = (Printable)blackInk will throw checked exception.', '', FALSE, FALSE, 90);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (392, 'The following line of code will fail to compile: printable = blackInk;', '', TRUE, FALSE, 90);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (393, 'Code on line 1 will throw NullPointerException', '', FALSE, FALSE, 91);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (394, 'Code on lines 1 and 3 will throw NullPointerException', '', FALSE, FALSE, 91);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (395, 'Only code on line 4 will throw NullPointerException', '', TRUE, FALSE, 91);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (396, 'Code on lines 3 and 5 will throw NullPointerException', '', FALSE, FALSE, 91);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (397, 'The code will print Java.', '', FALSE, FALSE, 92);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (398, 'The code will print Oracle.', '', FALSE, FALSE, 92);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (399, 'The code will not compile.', '', FALSE, FALSE, 92);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (400, 'The code will throw an exception or an error at runtime.', '', TRUE, FALSE, 92);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (401, 'You cannot handle runtime exceptions.', '', FALSE, FALSE, 93);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (402, 'You should not handle errors.', '', TRUE, FALSE, 93);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (403, 'If a method throws a checked exception, it must be either handled by the method or specified in its throws clause.', '', TRUE, FALSE, 93);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (404, 'If a method throws a runtime exception, it may include the exception in its throws clause.', '', TRUE, FALSE, 93);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (405, 'Runtime exceptions are checked exceptions.', '', FALSE, FALSE, 93);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (406, 'If the class EJavaGuruExcep2 is executed using the following command, it\r\nprints NullPointerException:\r\njavaEJavaGuruExcep2', '', FALSE, TRUE, 94);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (407, 'If the class EJavaGuruExcep2 is executed using the following command, it\r\nprints IndexOutOfBoundsException:\r\njavaEJavaGuruExcep2', '', FALSE, TRUE, 94);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (408, 'If the class EJavaGuruExcep2 is executed using the following command, it\r\nprints ArrayIndexOutOfBoundsException:\r\njavaEJavaGuruExcep2one', '', FALSE, TRUE, 94);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (409, 'The code will fail to compile.', '', TRUE, FALSE, 94);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (410, 'guru\r\nfinally 1', '', FALSE, TRUE, 95);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (411, 'guru\r\nfinally 1\r\nException in thread "main" java.lang.StackOverflowError', '', TRUE, TRUE, 95);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (412, 'guru\r\nException in thread "main" java.lang.StackOverflowError', '', FALSE, TRUE, 95);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (413, 'guru', '', FALSE, TRUE, 95);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (414, 'The code fails to compile.', '', FALSE, TRUE, 95);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (415, 'Exceptions enable a developer to define the programming logic separate from the exception-handling code.', '', FALSE, FALSE, 96);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (416, 'Exception handling speeds up execution of the code.', '', TRUE, FALSE, 96);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (417, 'Exception handing is used to define code that should execute when a piece of code throws an exception.', '', FALSE, FALSE, 96);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (418, 'Code that handles all the checked exceptions can still throw unchecked exceptions.', '', FALSE, FALSE, 96);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (419, 'java.lang.Throwable is the base class of all type of exceptions.', '', FALSE, FALSE, 97);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (420, 'If a class is a subclass of java.lang.Exception, it may or may not be a checked exception.', '', FALSE, FALSE, 97);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (421, 'Error is an unchecked exception.', '', TRUE, FALSE, 97);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (422, 'Error and checked exceptions need not be part of a method signature.', '', TRUE, FALSE, 97);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (423, '10', '', FALSE, FALSE, 98);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (424, '11', '', FALSE, FALSE, 98);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (425, '12', '', TRUE, FALSE, 98);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (426, 'Compilation error', '', FALSE, FALSE, 98);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (427, 'Runtime exception', '', FALSE, FALSE, 98);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (428, 'Base', '', FALSE, TRUE, 99);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (429, 'Derived', '', TRUE, TRUE, 99);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (430, 'Derived\r\nBase', '', FALSE, TRUE, 99);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (431, 'Base\r\nDerived', '', FALSE, TRUE, 99);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (432, 'Compilation error', '', FALSE, FALSE, 99);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (433, 'A user-defined class may not throw an IllegalStateException. It must be thrown only by Java API classes.', '', FALSE, FALSE, 100);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (434, 'System.out.println will throw NullPointerException if an uninitialized instance variable of type String is passed to it to print its value.', '', FALSE, FALSE, 100);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (435, 'NumberFormatException is thrown by multiple methods from the Java API when invalid numbers are passed on as Strings to be converted to the specified number format.', '', TRUE, FALSE, 100);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (436, 'ExceptionInInitializerError may be thrown by the JVM when a static initializer in your code throws a NullPointerException.', '', TRUE, FALSE, 100);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (437, '1\r\ninner\r\n2\r\nouter', '', FALSE, TRUE, 101);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (438, '1\r\nouter', '', FALSE, TRUE, 101);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (439, '1\r\ninner', '', FALSE, TRUE, 101);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (440, '1\r\ninner\r\n2', '', TRUE, TRUE, 101);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (441, 'Jumpable var1 = new Jumpable();', '', FALSE, TRUE, 102);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (442, 'Animal var2 = new Animal();', '', TRUE, TRUE, 102);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (443, 'Lion var3 = new Animal();', '', FALSE, TRUE, 102);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (444, 'Jumpable var4 = new Animal();', '', FALSE, TRUE, 102);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (445, 'Jumpable var5 = new Lion();', '', TRUE, TRUE, 102);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (446, 'A Java class can define multiple methods.', '', TRUE, FALSE, 103);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (447, 'A Java class can define multiple variables.', '', TRUE, FALSE, 103);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (448, 'A Java class can be defined in multiple packages.', '', FALSE, FALSE, 103);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (449, 'A Java class can import multiple packages.', '', TRUE, FALSE, 103);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (450, 'A Java class can’t define more than 108 constructors.', '', FALSE, FALSE, 103);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (451, 'End-of-line comments can’t follow import or package statements.', '', FALSE, FALSE, 103);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (452, 'Multiline comments can only be defined within a method definition.', '', FALSE, FALSE, 103);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (453, 'IndexPositionException e', '', FALSE, TRUE, 104);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (454, 'NullPointerException e', '', FALSE, TRUE, 104);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (455, 'ArrayIndexOutOfBoundsException e', '', TRUE, TRUE, 104);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (456, 'ArrayOutOfBoundsException e', '', FALSE, TRUE, 104);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (457, '5', '', FALSE, FALSE, 105);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (458, '6', '', FALSE, FALSE, 105);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (459, '10', '', FALSE, FALSE, 105);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (460, '11', '', TRUE, FALSE, 105);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (461, '12', '', FALSE, FALSE, 105);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (462, 'Runtime exception', '', FALSE, FALSE, 105);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (463, '100\r\n10\r\n98', '', FALSE, TRUE, 106);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (464, '10\r\n98', '', TRUE, TRUE, 106);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (465, '100', '', FALSE, TRUE, 106);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (466, '10', '', FALSE, TRUE, 106);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (467, 'ColorPencil var1 = new ColorPencil();', '', FALSE, TRUE, 107);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (468, 'ColorPencil var2 = new ColorPencil(RED);', '', FALSE, TRUE, 107);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (469, 'ColorPencil var3 = new ColorPencil("RED");', '', TRUE, TRUE, 107);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (470, 'Pencil var4 = new ColorPencil("BLUE");', '', TRUE, TRUE, 107);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (471, '45Heart\r\n0Liver', '', TRUE, TRUE, 108);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (472, '45Liver\r\n0Heart', '', FALSE, TRUE, 108);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (473, '45Liver\r\n45Heart', '', FALSE, TRUE, 108);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (474, '45Heart\r\n45Heart', '', FALSE, TRUE, 108);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (475, 'Class fails to compile.', '', FALSE, FALSE, 108);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (476, 'The while loop won’t execute; nothing will be printed.', '', FALSE, FALSE, 109);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (477, 'The while loop will execute indefinitely, printing all numbers, starting from 1.', '', FALSE, FALSE, 109);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (478, 'The while loop will execute indefinitely, printing all even numbers, starting from 0.', '', FALSE, FALSE, 109);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (479, 'The while loop will execute indefinitely, printing all even numbers, starting from 2.', '', TRUE, FALSE, 109);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (480, 'The while loop will execute indefinitely, printing all odd numbers, starting from 1.', '', FALSE, FALSE, 109);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (481, 'The while loop will execute indefinitely, printing all odd numbers, starting from 3.', '', FALSE, FALSE, 109);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (482, 'import com.ejava.*;\r\nclass MyEJava {}', '', TRUE, TRUE, 110);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (483, 'import com.ejava;\r\nclass MyEJava {}', '', FALSE, TRUE, 110);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (484, 'import com.ejava.Person;\r\nimport com.ejava.Course;\r\nclass MyEJava {}', '', TRUE, TRUE, 110);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (485, 'import com.ejava.Person;\r\nimport com.ejava.*;\r\nclass MyEJava {}', '', TRUE, TRUE, 110);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (486, 'The class Forest prints Lion.', '', TRUE, FALSE, 111);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (487, 'If the code on line 2 is changed as follows, the class Forest will print Lion:\r\nprivate void printKing() {', '', FALSE, TRUE, 111);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (488, 'If the code on line 2 is changed as follows, the class Forest will print Lion:\r\nvoid printKing() {', '', TRUE, TRUE, 111);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (489, 'If the code on line 2 is changed as follows, the class Forest will print Lion:\r\ndefault void printKing() {', '', FALSE, TRUE, 111);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (490, 'Given that you changed the access of a public method B, in class A, to a private method, class C that uses method B will fail to compile.', '', TRUE, FALSE, 112);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (491, 'Given that you changed the access of a private method B, in class A, to a public method, none of the classes that use class A will fail to compile.', '', TRUE, FALSE, 112);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (492, 'Given that you changed the access of a protected method B, in class A, to a method with default access, class C from the same package as class A won’t be able to access method B.', '', FALSE, FALSE, 112);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (493, 'A change in the accessibility of the methods in your class never affects any other class that uses your class.', '', FALSE, FALSE, 112);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (494, 'You may not be able to handle all the checked exceptions in your code.', '', FALSE, FALSE, 113);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (495, 'If required, you can handle all the runtime exceptions in your code.', '', TRUE, FALSE, 113);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (496, 'You can handle an exception in your code even if you don’t know its exact name.', '', TRUE, FALSE, 113);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (497, 'A single exception handler can be used to handle all types of runtime and checked exceptions.', '', TRUE, FALSE, 113);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (498, 'You must handle all errors that can be thrown by your code.', '', FALSE, FALSE, 113);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (499, 'Runtime exceptions are also known as checked exceptions.', '', FALSE, FALSE, 113);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (500, 'java:1+2', '', FALSE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (501, 'java:3', '', FALSE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (502, 'MainMethod:2*3', '', FALSE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (503, 'MainMethod:6', '', FALSE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (504, '1+2:2*3', '', FALSE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (505, '3:3', '', FALSE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (506, '6', '', FALSE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (507, '1+2:4-3', '', TRUE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (508, '31', '', FALSE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (509, '4', '', FALSE, FALSE, 114);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (510, 'null0.0false0', '', TRUE, FALSE, 115);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (511, 'null0false0', '', FALSE, FALSE, 115);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (512, 'null0.0ffalse0', '', FALSE, FALSE, 115);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (513, '0.0false0', '', FALSE, FALSE, 115);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (514, '0false0', '', FALSE, FALSE, 115);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (515, '0.0ffalse0', '', FALSE, FALSE, 115);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (516, 'null0.0true0', '', FALSE, FALSE, 115);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (517, '0true0', '', FALSE, FALSE, 115);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (518, '0.0ftrue0', '', FALSE, FALSE, 115);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (519, '(LaserPrinter)myPrinter.pagesPerMin', '', FALSE, FALSE, 116);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (520, 'myPrinter.pagesPerMin', '', FALSE, FALSE, 116);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (521, 'LaserPrinter.myPrinter.pagesPerMin', '', FALSE, FALSE, 116);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (522, '((LaserPrinter)myPrinter).pagesPerMin', '', TRUE, FALSE, 116);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (523, 'Exception handling can prevent an application from crashing or producing incorrect outputs or incorrect input values.', '', TRUE, FALSE, 117);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (524, 'Exception handlers can’t define an alternative flow of action in the event of an exception.', '', FALSE, FALSE, 117);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (525, 'Exception handlers enable a programmer to define separate code blocks for handling different types of exceptions.', '', TRUE, FALSE, 117);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (526, 'Exception handlers help to define well-encapsulated classes.', '', FALSE, FALSE, 117);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (527, 'Exception handlers help with efficient inheritance.', '', FALSE, FALSE, 117);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (528, 'The names of the reference variables are limited to a length of 256 characters.', '', FALSE, FALSE, 118);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (529, 'There is no limit on the length of the names of primitive variables.', '', TRUE, FALSE, 118);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (530, 'Multiple reference variables may refer to exactly the same object in memory.', '', TRUE, FALSE, 118);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (531, 'Values stored by primitive and reference variables can be compared for equality by using the equals operator (==) or by using the method equals.', '', FALSE, FALSE, 118);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (532, 'A primitive variable can’t refer to an object and vice versa.', '', TRUE, FALSE, 118);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (533, 'null0', '', FALSE, FALSE, 119);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (534, 'null0.0', '', FALSE, FALSE, 119);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (535, '0', '', FALSE, FALSE, 119);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (536, '0.0', '', FALSE, FALSE, 119);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (537, 'Compilation error', '', TRUE, FALSE, 119);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (538, '5', '', FALSE, FALSE, 120);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (539, '6', '', FALSE, FALSE, 120);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (540, '8', '', TRUE, FALSE, 120);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (541, '9', '', FALSE, FALSE, 120);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (542, 'package com.ejava.guru;\r\npackage com.ejava.oracle;\r\nclass MyClass { }', '', FALSE, TRUE, 121);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (543, 'import com.ejava.guru.*;\r\nimport com.ejava.oracle.*;\r\npackage com.ejava;\r\nclass MyClass { }', '', FALSE, TRUE, 121);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (544, 'class MyClass {\r\nimport com.ejava.guru.*;\r\n}', '', FALSE, TRUE, 121);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (545, 'class MyClass {\r\nint abc;\r\n}', '', TRUE, TRUE, 121);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (546, '60', '', FALSE, FALSE, 122);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (547, '59', '', FALSE, FALSE, 122);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (548, '61', '', FALSE, FALSE, 122);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (549, 'No output.', '', TRUE, FALSE, 122);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (550, 'The code fails to compile.', '', FALSE, FALSE, 122);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (551, 'Define static String name; on line 1.', '', TRUE, FALSE, 123);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (552, 'Define String name; on line 1.', '', FALSE, FALSE, 123);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (553, 'Define String name; on line 2.', '', FALSE, FALSE, 123);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (554, 'Define String name; on line 3.', '', FALSE, FALSE, 123);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (555, 'The object referred to by object e is eligible for garbage collection on line 8.', '', FALSE, FALSE, 124);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (556, 'The object referred to by object e is eligible for garbage collection on line 9.', '', FALSE, FALSE, 124);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (557, 'The object referred to by object e isn’t eligible for garbage collection because its member variable mgr isn’t set to null.', '', FALSE, FALSE, 124);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (558, 'The code throws a runtime exception and the code execution never reaches line 8 or 9.', '', TRUE, FALSE, 124);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (559, 'void myMethod(String str1, int str2, String str3)', '', TRUE, TRUE, 125);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (560, 'myMethod(String val1, int val2, String val3)', '', FALSE, TRUE, 125);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (561, 'void myMethod(String str1, str2, int a)', '', FALSE, TRUE, 125);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (562, 'void myMethod(String val1, val2, int val3)', '', FALSE, TRUE, 125);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (563, 'void myMethod(int str2, String str3, String str1)', '', TRUE, TRUE, 125);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (564, 'int eArr1[] = {10, 23, 10, 2};', '', TRUE, TRUE, 126);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (565, 'int[] eArr2 = new int[10];', '', TRUE, TRUE, 126);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (566, 'int[] eArr3 = new int[] {};', '', TRUE, TRUE, 126);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (567, 'int[] eArr4 = new int[10] {};', '', FALSE, TRUE, 126);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (568, 'int eArr5[] = new int[2] {10, 20};', '', FALSE, TRUE, 126);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (569, 'public String add(String 1, String 2) {\r\nreturn str1 + str2;\r\n}', '', FALSE, TRUE, 127);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (570, 'private String add(String s1, String s2) {\r\nreturn s1.concat(s2);\r\n}', '', TRUE, TRUE, 127);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (571, 'protected String add(String value1, String value2) {\r\nreturn value2.append(value2);\r\n}', '', FALSE, TRUE, 127);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (572, 'String subtract(String first, String second) {\r\nreturn first.concat(second.substring(0));\r\n}', '', TRUE, TRUE, 127);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (573, 'import java.lang;\r\nclass EJava {\r\nString guru;\r\n}', '', FALSE, TRUE, 128);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (574, 'import java.lang.String.*;\r\nclass EJava {\r\nString guru;\r\n}', '', FALSE, TRUE, 128);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (575, 'class EJava {\r\nString guru;\r\n}', '', TRUE, TRUE, 128);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (576, 'import java.lang.String;\r\nimport java.lang.String;\r\nclass EJava {\r\nString guru;\r\n}', '', TRUE, TRUE, 128);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (577, 'Methods marked with //METHOD1 and //METHOD2 are correctly overloaded methods.', '', FALSE, FALSE, 129);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (578, 'Methods marked with //METHOD2 and //METHOD3 are correctly overloaded methods.', '', TRUE, FALSE, 129);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (579, 'Methods marked with //METHOD1 and //METHOD3 are correctly overloaded methods.', '', TRUE, FALSE, 129);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (580, 'All the methods—methods marked with //METHOD1, //METHOD2, and //METHOD3—are correctly overloaded methods.', '', FALSE, FALSE, 129);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (581, 'The class Home will be provided a default constructor.', '', FALSE, FALSE, 130);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (582, 'The class Home won’t be provided a default constructor.', '', TRUE, FALSE, 130);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (583, 'A default constructor can’t coexist with overloaded constructors.', '', TRUE, FALSE, 130);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (584, 'A default constructor doesn’t accept any method parameters.', '', TRUE, FALSE, 130);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (585, 'After compilation, the class Home has only a no-argument constructor.', '', TRUE, FALSE, 130);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (586, 'After compilation, the class Home has two constructors: a no-argument constructor and a default constructor.', '', FALSE, FALSE, 130);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (587, 'When an object of class Home is created, its variables name and rooms are not assigned any default values.', '', FALSE, FALSE, 130);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (588, 'continue;', '', TRUE, TRUE, 131);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (589, 'exit;', '', FALSE, TRUE, 131);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (590, 'break;', '', FALSE, TRUE, 131);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (591, 'end;', '', FALSE, TRUE, 131);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (592, 'StackOverflowError', '', TRUE, FALSE, 132);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (593, 'OutOfMemoryError', '', TRUE, FALSE, 132);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (594, 'ArrayIndexOutOfBoundError', '', FALSE, FALSE, 132);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (595, 'ClassLoadingException', '', FALSE, FALSE, 132);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (596, 'CompilationError', '', FALSE, FALSE, 132);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (597, 'OutOfStorageError', '', FALSE, FALSE, 132);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (598, 'String\r\nAutumn', '', FALSE, TRUE, 133);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (599, 'Spring\r\nString', '', FALSE, TRUE, 133);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (600, 'Autumn\r\nAutumn', '', TRUE, TRUE, 133);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (601, 'Autumn\r\nString', '', FALSE, TRUE, 133);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (602, 'The class ShoeFactory has a total of two overloaded constructors.', '', TRUE, FALSE, 134);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (603, 'The class ShoeFactory has three overloaded constructors, two user-defined constructors, and one default constructor.', '', FALSE, FALSE, 134);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (604, 'The class ShoeFactory will fail to compile.', '', FALSE, FALSE, 134);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (605, 'The addition of the following constructor will increment the number of constructors\r\nof the class ShoeFactory to 3:\r\nprivate ShoeFactory (Shoe arg) {}', '', FALSE, TRUE, 134);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (606, 'this.color = color;', '', TRUE, TRUE, 135);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (607, 'color = color;', '', FALSE, TRUE, 135);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (608, 'color = RED;', '', FALSE, TRUE, 135);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (609, 'this.color = RED;', '', FALSE, TRUE, 135);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (610, 'Java\r\nJava', '', FALSE, TRUE, 136);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (611, 'OCA\r\nJava', '', TRUE, TRUE, 136);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (612, 'OCA\r\nOCA', '', FALSE, TRUE, 136);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (613, 'None of the above.', '', FALSE, FALSE, 136);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (614, 'tab.screenSize', '', TRUE, TRUE, 137);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (615, 'tab->getScreensize()', '', FALSE, TRUE, 137);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (616, 'tab::getScreen()', '', FALSE, TRUE, 137);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (617, 'tab:screenSize', '', FALSE, TRUE, 137);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (618, 'class Emp implements Person extends Movable{}', '', FALSE, TRUE, 138);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (619, 'class Emp implements Person, Movable{}', '', FALSE, TRUE, 138);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (620, 'class Emp extends Person implements Movable{}', '', TRUE, TRUE, 138);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (621, 'class Emp extends Person, Movable{}', '', FALSE, TRUE, 138);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (622, 'Call-Phone\r\nCall-Phone', '', TRUE, TRUE, 139);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (623, 'Call-Phone\r\nCall-SmartPhone', '', FALSE, TRUE, 139);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (624, 'Call-Phone\r\nnull', '', FALSE, TRUE, 139);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (625, 'null\r\nCall-SmartPhone', '', FALSE, TRUE, 139);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (626, 'The code will print caught.', '', TRUE, FALSE, 140);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (627, 'The code won’t print caught.', '', FALSE, FALSE, 140);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (628, 'The code would print caught if StackOverflowError were a runtime exception.', '', TRUE, FALSE, 140);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (629, 'The code would print caught if StackOverflowError were a checked exception.', '', TRUE, FALSE, 140);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (630, 'The code will print caught if question() throws exception NullPointerException.', '', FALSE, FALSE, 140);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (631, 'The classes that were using the class Student will fail to compile.', '', FALSE, FALSE, 141);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (632, 'The classes that were using the class Student will work without any compilation issues.', '', TRUE, FALSE, 141);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (633, 'The class Student is an example of a well-encapsulated class.', '', TRUE, FALSE, 141);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (634, 'The class Student exposes its instance variable outside the class.', '', FALSE, FALSE, 141);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (635, '10', '', FALSE, FALSE, 142);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (636, '12', '', FALSE, FALSE, 142);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (637, 'No output', '', FALSE, FALSE, 142);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (638, 'Compilation error', '', TRUE, FALSE, 142);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (639, '1 GB', '', FALSE, FALSE, 143);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (640, '2 GB', '', TRUE, FALSE, 143);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (641, 'Compilation error', '', FALSE, FALSE, 143);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (642, 'Runtime exception', '', FALSE, FALSE, 143);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (643, 'landline', '', FALSE, FALSE, 144);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (644, 'Smartphone', '', FALSE, FALSE, 144);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (645, 'No output', '', FALSE, FALSE, 144);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (646, 'Compilation error', '', TRUE, FALSE, 144);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (647, '234567890', '', FALSE, FALSE, 145);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (648, '34567890', '', FALSE, FALSE, 145);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (649, '234456789', '', FALSE, FALSE, 145);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (650, '3456789', '', FALSE, FALSE, 145);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (651, 'Compilation error', '', FALSE, FALSE, 145);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (652, 'Runtime exception', '', TRUE, FALSE, 145);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (653, 'At least two objects are garbage collected on line 1.', '', FALSE, FALSE, 146);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (654, 'At least one object is garbage collected on line 1.', '', FALSE, FALSE, 146);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (655, 'No objects are garbage collected on line 1', '', FALSE, FALSE, 146);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (656, 'The number of objects that are garbage collected on line 1 is unknown.', '', TRUE, FALSE, 146);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (657, 'At least two objects are eligible for garbage collection on line 2.', '', TRUE, FALSE, 146);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (658, 'true:false', '', FALSE, FALSE, 147);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (659, 'true:true', '', FALSE, FALSE, 147);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (660, 'false:true', '', FALSE, FALSE, 147);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (661, 'false:false', '', TRUE, FALSE, 147);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (662, 'Compilation error—there is no equals method in the class Book.', '', FALSE, FALSE, 147);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (663, 'StringBuilder sb1 = new StringBuilder() will create a StringBuilder object with no characters, but with an initial capacity to store 16 chars.', '', TRUE, FALSE, 148);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (664, 'StringBuilder sb1 = new StringBuilder(5*10) will create a StringBuilder object with a value 50.', '', FALSE, FALSE, 148);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (665, 'Unlike the class String, the concat method in StringBuilder modifies the value of a StringBuilder object.', '', FALSE, FALSE, 148);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (666, 'The insert method can be used to insert a character, number, or String at the start or end or a specified position of a StringBuilder.', '', TRUE, FALSE, 148);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (667, 'Jump eJump1[] = {null, new Animal()};', '', TRUE, FALSE, 149);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (668, 'Jump[] eJump2 = new Animal()[22];', '', FALSE, FALSE, 149);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (669, 'Jump[] eJump3 = new Jump[10];', '', TRUE, FALSE, 149);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (670, 'Jump[] eJump4 = new Animal[87];', '', TRUE, FALSE, 149);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (671, 'Jump[] eJump5 = new Jump()[12];', '', FALSE, FALSE, 149);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (672, 'Spring, Summer, Winter,', '', FALSE, FALSE, 150);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (673, 'Spring, Autumn, Winter,', '', FALSE, FALSE, 150);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (674, 'Autumn, Winter,', '', FALSE, FALSE, 150);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (675, 'Compilation error', '', FALSE, FALSE, 150);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (676, 'Runtime exception', '', TRUE, FALSE, 150);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (677, 'The class will print true.', '', FALSE, FALSE, 151);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (678, 'The class will print false.', '', FALSE, FALSE, 151);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (679, 'The class will print true if the if condition is changed to boolean == true.', '', FALSE, FALSE, 151);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (680, 'The class will print false if the if condition is changed to boolean != true.', '', FALSE, FALSE, 151);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (681, 'The class won’t compile.', '', TRUE, FALSE, 151);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (682, 'The code doesn’t compile.', '', FALSE, FALSE, 152);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (683, 'The code doesn’t print a value.', '', TRUE, FALSE, 152);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (684, 'The code prints 0.', '', FALSE, FALSE, 152);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (685, 'Changing ++Fish.count to Fish.count++ will give the same results.', '', TRUE, FALSE, 152);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (686, 'System.out.println(phones.count + ":" + phone);', '', FALSE, TRUE, 153);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (687, 'System.out.println(phones.counter + ":" + phone);', '', FALSE, TRUE, 153);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (688, 'System.out.println(phones.getPosition() + ":" + phone);', '', FALSE, TRUE, 153);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (689, 'System.out.println(phones.getCtr() + ":" + phone);', '', FALSE, TRUE, 153);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (690, 'System.out.println(phones.getCount() + ":" + phone);', '', FALSE, TRUE, 153);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (691, 'System.out.println(phones.pos + ":" + phone);', '', FALSE, TRUE, 153);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (692, 'None of the above', '', TRUE, FALSE, 153);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (693, 'RuntimeException', '', TRUE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (694, 'CheckedException', '', FALSE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (695, 'NullPointerException', '', TRUE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (696, 'ArrayIndexOutOfBoundsException', '', TRUE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (697, 'CompilationException', '', FALSE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (698, 'Throwable', '', FALSE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (699, 'StackOverflowException', '', FALSE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (700, 'MemoryOutOfBoundsException', '', FALSE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (701, 'IllegalArgumentException', '', TRUE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (702, 'NumberException', '', FALSE, TRUE, 154);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (703, 'true:false', '', TRUE, TRUE, 155);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (704, 'true:true', '', FALSE, TRUE, 155);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (705, 'false:true', '', FALSE, TRUE, 155);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (706, 'false:false', '', FALSE, TRUE, 155);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (707, '11\r\n13\r\n15\r\n17\r\n19', '', FALSE, TRUE, 156);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (708, '20', '', FALSE, TRUE, 156);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (709, '11\r\n14\r\n17\r\n20', '', TRUE, TRUE, 156);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (710, '40', '', FALSE, TRUE, 156);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (711, 'Compilation error', '', FALSE, FALSE, 156);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (712, 'public String[] rideWave() { return null; }', '', FALSE, FALSE, 157);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (713, 'protected void riceWave(int a) {}', '', FALSE, FALSE, 157);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (714, 'private String rideWave(int value, String value2) {}', '', TRUE, FALSE, 157);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (715, 'default StringBuilder rideWave (StringBuffer a) { return null; }', '', FALSE, FALSE, 157);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (716, 'if (number % 2 == 0) continue;', '', FALSE, TRUE, 158);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (717, 'if (number % 2 == 0) break;', '', FALSE, TRUE, 158);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (718, 'if (number % 2 != 0) continue;', '', TRUE, TRUE, 158);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (719, 'if (number % 2 != 0) break;', '', FALSE, TRUE, 158);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (720, '100', '', FALSE, TRUE, 159);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (721, '101', '', FALSE, TRUE, 159);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (722, '102', '', FALSE, TRUE, 159);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (723, 'Code fails to compile.', '', TRUE, FALSE, 159);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (724, 'No output is produced.', '', FALSE, FALSE, 159);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (725, 'interface Movable {}\r\ninterface Jumpable {}\r\nclass Person implements Movable, Jumpable {}', '', TRUE, TRUE, 160);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (726, 'interface Movable {}\r\ninterface Jumpable {}\r\nclass Person extends Movable, Jumpable {}', '', FALSE, TRUE, 160);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (727, 'interface Movable {}\r\ninterface Jumpable {}\r\nclass Person implements Movable extends Jumpable {}', '', FALSE, TRUE, 160);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (728, 'interface Movable {}\r\ninterface Jumpable implements Movable {}\r\nclass Person implements Jumpable {}', '', FALSE, TRUE, 160);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (729, 'interface Movable {}\r\ninterface Jumpable extends Movable {}\r\nclass Person implements Jumpable {}', '', TRUE, TRUE, 160);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (730, 'class Pencil {\r\npublic String model;\r\n}', '', FALSE, TRUE, 161);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (731, 'class Pencil {\r\npublic String model;\r\npublic String getModel() { return model; }\r\npublic void setModel(String val) { model = val; }\r\n}', '', FALSE, TRUE, 161);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (732, 'class Pencil {\r\nprivate String model;\r\npublic String getModel() { return model; }\r\npublic void setModel(String val) { model = val; }\r\n}', '', TRUE, TRUE, 161);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (733, 'class Pencil {\r\npublic String model;\r\nprivate String getModel() { return model; }\r\nprivate void setModel(String val) { model = val; }\r\n}', '', FALSE, TRUE, 161);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (734, 'Call-Phone\r\nCall-Phone', '', FALSE, TRUE, 162);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (735, 'Call-Phone\r\nCall-SmartPhone', '', TRUE, TRUE, 162);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (736, 'Call-Phone\r\nnull', '', FALSE, TRUE, 162);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (737, 'null\r\nCall-SmartPhone', '', FALSE, TRUE, 162);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (738, 'for loop', '', FALSE, FALSE, 163);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (739, 'enhanced for loop', '', FALSE, FALSE, 163);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (740, 'do-while loop', '', TRUE, FALSE, 163);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (741, 'while loop', '', FALSE, FALSE, 163);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (742, 'in-built:false', '', FALSE, TRUE, 164);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (743, 'in-built:true', '', FALSE, TRUE, 164);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (744, 'null:false', '', FALSE, TRUE, 164);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (745, 'null:true', '', FALSE, TRUE, 164);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (746, 'Compilation error', '', TRUE, FALSE, 164);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (747, 'red', '', FALSE, FALSE, 165);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (748, 'blue', '', TRUE, FALSE, 165);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (749, 'No output', '', FALSE, FALSE, 165);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (750, 'Compilation error', '', FALSE, FALSE, 165);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (751, '100\r\n200', '', FALSE, TRUE, 166);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (752, '100\r\n100', '', TRUE, TRUE, 166);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (753, '200\r\n200', '', FALSE, TRUE, 166);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (754, 'Code fails to compile.', '', FALSE, FALSE, 166);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (755, 'The code prints enjoying shopping once.', '', FALSE, FALSE, 167);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (756, 'The code prints enjoying shopping twice.', '', FALSE, FALSE, 167);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (757, 'The code prints enjoying shopping in an infinite loop.', '', FALSE, FALSE, 167);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (758, 'The code fails to compile.', '', TRUE, FALSE, 167);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (759, 'String ejg1[][] = new String[1][2];', '', TRUE, FALSE, 168);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (760, 'String ejg2[][] = new String[][] { {}, {} };', '', TRUE, FALSE, 168);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (761, 'String ejg3[][] = new String[2][2];', '', TRUE, FALSE, 168);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (762, 'String ejg4[][] = new String[][]{{null},new String[]{"a","b","c"}, {new String()}};', '', TRUE, FALSE, 168);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (763, 'String ejg5[][] = new String[][2];', '', FALSE, FALSE, 168);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (764, 'String ejg6[][] = new String[][]{"A", "B"};', '', FALSE, FALSE, 168);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (765, 'String ejg7[][] = new String[]{{"A"}, {"B"}};', '', FALSE, FALSE, 168);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (766, '1 GB', '', TRUE, FALSE, 169);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (767, '2 GB', '', FALSE, FALSE, 169);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (768, 'Compilation error', '', FALSE, FALSE, 169);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (769, 'Runtime exception', '', FALSE, FALSE, 169);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (770, 'Roamable var = new Phone();', '', FALSE, TRUE, 170);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (771, 'Roamable var = (Roamable)Phone();', '', FALSE, TRUE, 170);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (772, 'Roamable var = (Roamable)new Phone();', '', TRUE, TRUE, 170);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (773, 'Because interface Roamable and class Phone are unrelated, a reference variable of type Roamable can’t refer to an object of class Phone.', '', FALSE, FALSE, 170);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (774, 'A class can’t define multiple main methods.', '', FALSE, FALSE, 171);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (775, 'More than one class in an application can define the main method.', '', FALSE, FALSE, 171);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (776, 'The main method may accept a String, a String array, or varargs (String… arg) as a method argument.', '', TRUE, FALSE, 171);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (777, 'The main method shouldn’t define an object of the class in which the main method itself is defined.', '', TRUE, FALSE, 171);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (778, 'Paper:1', '', FALSE, TRUE, 172);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (779, 'Paper:0', '', FALSE, TRUE, 172);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (780, 'Paper:0\r\nPaper:1', '', FALSE, TRUE, 172);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (781, 'Paper:1\r\nPaper:0', '', TRUE, TRUE, 172);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (782, 'The code will print LionX.', '', FALSE, TRUE, 173);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (783, 'The code will print Lion.', '', TRUE, TRUE, 173);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (784, 'The code will print Lion if line 5 is changed to the following:\r\nejg = sb1.append("X").substring(sb1.indexOf(''L''), sb1.indexOf(''X''));', '', FALSE, TRUE, 173);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (785, 'The code will compile correctly if line 4 is changed to the following:\r\nStringBuilder ejg = null;', '', FALSE, TRUE, 173);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (786, 'The class Chair can’t implement the interface Jumpable because a Chair can’t define a method jump.', '', FALSE, FALSE, 174);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (787, 'If the name of the interface is changed to Movable and definition of class Chair is updated to class Chair implements Movable, class Chair will compile successfully.', '', TRUE, FALSE, 174);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (788, 'If the definition of the method jump is removed from the definition of the class Chair, it will compile successfully.', '', FALSE, FALSE, 174);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (789, 'If the name of the method jump is changed to run in the interface Jumpable, the class Chair will compile successfully.', '', FALSE, FALSE, 174);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (790, 'if (animal instanceof Lion)', '', TRUE, TRUE, 175);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (791, 'if (animal instanceOf Lion)', '', FALSE, TRUE, 175);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (792, 'if (animal == Lion)', '', FALSE, TRUE, 175);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (793, 'if (animal = Lion)', '', FALSE, TRUE, 175);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (794, 'The class Person fails to compile.', '', FALSE, FALSE, 176);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (795, 'The class Employee fails to compile.', '', TRUE, FALSE, 176);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (796, 'The default constructor can call only no-argument constructor of a base class.', '', TRUE, FALSE, 176);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (797, 'Code that creates an object of class Employee in class Test didn’t pass a String value to the constructor of class Employee.', '', FALSE, FALSE, 176);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (798, 'Checked exceptions are subclasses of java.lang.Throwable.', '', TRUE, FALSE, 177);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (799, 'Runtime exceptions are subclasses of java.lang.Exception.', '', TRUE, FALSE, 177);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (800, 'Errors are subclasses of java.lang.Throwable.', '', TRUE, FALSE, 177);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (801, 'java.lang.Throwable is a subclass of java.lang.Exception.', '', FALSE, FALSE, 177);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (802, 'java.lang.Exception is a subclass of java.lang.Error.', '', FALSE, FALSE, 177);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (803, 'Errors aren’t subclasses of java.lang.Exception.', '', TRUE, FALSE, 177);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (804, 'java.lang.Throwable is a subclass of java.lang.Error.', '', FALSE, FALSE, 177);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (805, 'Checked exceptions are subclasses of java.lang.CheckedException.', '', FALSE, FALSE, 177);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (806, 'A base class can’t pass reference variables of its defined class, as method parameters in constructors.', '', FALSE, FALSE, 178);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (807, 'The class compiles successfully—a base class can use reference variables of its derived class as method parameters.', '', TRUE, FALSE, 178);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (808, 'The class Bottle defines two overloaded constructors.', '', FALSE, FALSE, 178);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (809, 'The class Bottle can access only one constructor.', '', TRUE, FALSE, 178);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (810, 'return super.pages + this.interviews*5;', '', FALSE, TRUE, 179);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (811, 'return this.pages + this.interviews*5;', '', FALSE, TRUE, 179);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (812, 'return super.pages + interviews*5;', '', FALSE, TRUE, 179);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (813, 'return pages + this.interviews*5;', '', FALSE, TRUE, 179);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (814, 'None of the above', '', TRUE, FALSE, 179);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (815, 'try {\r\nnew Pen().write("story");\r\n}\r\ncatch (NoInkException e) {}', '', TRUE, TRUE, 180);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (816, 'try {\r\nnew Pen().write("story");\r\n}\r\nfinally {}', '', FALSE, TRUE, 180);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (817, 'try {\r\nwrite("story");\r\n}\r\ncatch (Exception e) {}', '', TRUE, TRUE, 180);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (818, 'try {\r\nnew Pen().write("story");\r\n}\r\ncatch (RuntimeException e) {}', '', FALSE, TRUE, 180);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (819, 'm1', '', FALSE, TRUE, 181);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (820, 'm2', '', FALSE, TRUE, 181);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (821, 'm3', '', FALSE, TRUE, 181);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (822, 'Code fails to compile.', '', TRUE, FALSE, 181);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (823, 'Corn\r\nBornA', '', FALSE, TRUE, 182);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (824, 'Corn\r\nCornA', '', FALSE, TRUE, 182);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (825, 'Corn\r\nBorn', '', FALSE, TRUE, 182);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (826, 'Corn\r\nCorn', '', TRUE, TRUE, 182);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (827, 'The code prints Circle.', '', FALSE, TRUE, 183);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (828, 'The code prints Square.', '', FALSE, TRUE, 183);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (829, 'The code prints Triangle.', '', FALSE, TRUE, 183);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (830, 'The code prints\r\nCircle\r\nSquare\r\nTriangle', '', FALSE, TRUE, 183);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (831, 'The code prints\r\nTriangle\r\nCircle\r\nSquare', '', FALSE, TRUE, 183);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (832, 'The code fails to compile.', '', TRUE, FALSE, 183);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (833, 'Repeatedly display a menu to a user and accept input until the user chooses to exit the application.', '', TRUE, FALSE, 184);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (834, 'Repeatedly allow a student to sit in the exam only if she carries her identity card.', '', FALSE, FALSE, 184);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (835, 'Repeatedly serve food to a person until he wants no more.', '', TRUE, FALSE, 184);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (836, 'Repeatedly allow each passenger to board an airplane if the passengers have their boarding passes.', '', FALSE, FALSE, 184);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (837, 'catch (NullPointerException e) {}\r\ncatch (ClassCastException e) {}\r\ncatch (Exception e) {}\r\ncatch (Throwable t) {}', '', TRUE, TRUE, 185);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (838, 'catch (ClassCastException e) {}\r\ncatch (NullPointerException e) {}\r\ncatch (Exception e) {}\r\ncatch (Throwable t) {}', '', TRUE, TRUE, 185);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (839, 'catch (ClassCastException e) {}\r\ncatch (Exception e) {}\r\ncatch (NullPointerException e) {}\r\ncatch (Throwable t) {}', '', FALSE, TRUE, 185);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (840, 'catch (Throwable t) {}\r\ncatch (Exception e) {}\r\ncatch (ClassCastException e) {}\r\ncatch (NullPointerException e) {}', '', FALSE, TRUE, 185);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (841, 'finally {}', '', TRUE, TRUE, 185);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (842, 'The code prints Camera:null.', '', FALSE, FALSE, 186);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (843, 'The code prints Camera:Adjust settings manually.', '', FALSE, FALSE, 186);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (844, 'The code will print Camera:.', '', FALSE, FALSE, 186);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (845, 'The code will fail to compile.', '', TRUE, FALSE, 186);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (846, 'No change in output. TestEJavaCourse prints 300.', '', FALSE, FALSE, 187);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (847, 'Change in output. TestEJavaCourse prints 200.', '', FALSE, FALSE, 187);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (848, 'Change in output. TestEJavaCourse prints 400.', '', TRUE, FALSE, 187);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (849, 'The class TestEJavaCourse fails to compile.', '', FALSE, FALSE, 187);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (850, 'null\r\nNullPointerException', '', FALSE, TRUE, 188);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (851, 'null\r\nnull\r\nNullPointerException', '', TRUE, TRUE, 188);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (852, 'NullPointerException', '', FALSE, TRUE, 188);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (853, 'null\r\nnull\r\nnull', '', FALSE, TRUE, 188);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (854, 'The code on line 1 won’t compile.', '', FALSE, FALSE, 189);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (855, 'The code on line 2 won’t compile.', '', FALSE, FALSE, 189);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (856, 'The code on line 3 won’t compile.', '', FALSE, FALSE, 189);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (857, 'The code on line 4 won’t compile.', '', FALSE, FALSE, 189);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (858, 'None of the above.', '', TRUE, FALSE, 189);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (859, '1', '', FALSE, TRUE, 190);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (860, '2', '', FALSE, TRUE, 190);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (861, '3', '', TRUE, TRUE, 190);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (862, 'No output', '', FALSE, FALSE, 190);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (863, 'An enhanced for loop can be used to iterate through the elements of an array and ArrayList.', '', FALSE, FALSE, 191);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (864, 'The loop counter of an enhanced for loop can be used to modify the current element of the array being iterated over.', '', TRUE, FALSE, 191);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (865, 'do-while and while loops can be used to iterate through the elements of an array and ArrayList.', '', FALSE, FALSE, 191);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (866, 'The loop counter of a regular for loop can be used to modify the current element of an ArrayList being iterated over.', '', FALSE, FALSE, 191);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (867, 'Compiler error on line 1.', '', FALSE, FALSE, 192);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (868, 'Compiler error on line 2.', '', FALSE, FALSE, 192);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (869, 'Compiler error on line 4.', '', FALSE, FALSE, 192);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (870, 'Compiler error on line 5.', '', FALSE, FALSE, 192);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (871, 'Compiler error on line 6.', '', TRUE, FALSE, 192);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (872, '0null', '', FALSE, FALSE, 192);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (873, 'nullnull', '', FALSE, FALSE, 192);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (874, 'true is printed out exactly once.', '', FALSE, FALSE, 193);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (875, 'true is printed out exactly twice.', '', FALSE, FALSE, 193);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (876, 'true is printed out exactly three times.', '', TRUE, FALSE, 193);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (877, 'true is printed out exactly four times.', '', FALSE, FALSE, 193);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (878, 'The code does not compile.', '', FALSE, FALSE, 193);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (879, '2', '', FALSE, FALSE, 194);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (880, '4', '', FALSE, FALSE, 194);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (881, 'The code will not compile because of line 3.', '', TRUE, FALSE, 194);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (882, 'The code will not compile because of line 5.', '', TRUE, FALSE, 194);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (883, 'The code will not compile because of line 7.', '', TRUE, FALSE, 194);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (884, 'The code will not compile because of line 11.', '', FALSE, FALSE, 194);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (885, 'The output cannot be determined from the code provided.', '', FALSE, FALSE, 194);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (886, '4', '', FALSE, FALSE, 195);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (887, '5', '', FALSE, FALSE, 195);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (888, '6', '', TRUE, FALSE, 195);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (889, '7', '', FALSE, FALSE, 195);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (890, '13', '', FALSE, FALSE, 195);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (891, 'The code will not compile because of line 7.', '', FALSE, FALSE, 195);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (892, 'abe', '', FALSE, FALSE, 196);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (893, 'abce', '', FALSE, FALSE, 196);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (894, 'abde', '', FALSE, FALSE, 196);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (895, 'abcde', '', TRUE, FALSE, 196);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (896, 'The code does not compile.', '', FALSE, FALSE, 196);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (897, 'An uncaught exception is thrown.', '', FALSE, FALSE, 196);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (898, '10', '', FALSE, FALSE, 197);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (899, '15', '', TRUE, FALSE, 197);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (900, '25', '', FALSE, FALSE, 197);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (901, 'Compiler error on line 3.', '', FALSE, FALSE, 197);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (902, 'Compiler error on line 8.', '', FALSE, FALSE, 197);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (903, 'None of the above.', '', FALSE, FALSE, 197);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (904, '[8]', '', FALSE, FALSE, 198);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (905, '[9]', '', TRUE, FALSE, 198);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (906, 'Something like [Ljava.lang.String;@160bc7c0', '', FALSE, FALSE, 198);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (907, 'An exception is thrown.', '', FALSE, FALSE, 198);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (908, 'The code does not compile.', '', FALSE, FALSE, 198);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (909, 'DeerReindeer,false', '', TRUE, FALSE, 199);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (910, 'DeerReindeer,true', '', FALSE, FALSE, 199);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (911, 'ReindeerDeer,false', '', FALSE, FALSE, 199);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (912, 'ReindeerDeer,true', '', FALSE, FALSE, 199);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (913, 'DeerAgeReindeer,false', '', FALSE, FALSE, 199);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (914, 'DeerAgeReindeer,true', '', FALSE, FALSE, 199);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (915, 'The code will not compile because of line 7.', '', FALSE, FALSE, 199);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (916, 'The code will not compile because of line 12.', '', FALSE, FALSE, 199);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (917, 'Checked exceptions are intended to be thrown by the JVM (and not the programmer).', '', FALSE, FALSE, 200);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (918, 'Checked exceptions are required to be caught or declared.', '', TRUE, FALSE, 200);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (919, 'Errors are intended to be thrown by the JVM (and not the programmer).', '', TRUE, FALSE, 200);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (920, 'Errors are required to be caught or declared.', '', FALSE, FALSE, 200);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (921, 'Runtime exceptions are intended to be thrown by the JVM (and not the programmer).', '', FALSE, FALSE, 200);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (922, 'Runtime exceptions are required to be caught or declared.', '', FALSE, FALSE, 200);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (923, 'Immediately after line 9, no grasshopper objects are eligible for garbage collection.', '', FALSE, FALSE, 201);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (924, 'Immediately after line 10, no grasshopper objects are eligible for garbage collection.', '', FALSE, FALSE, 201);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (925, 'Immediately after line 9, only one grasshopper object is eligible for garbage collection.', '', TRUE, FALSE, 201);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (926, 'Immediately after line 10, only one grasshopper object is eligible for garbage collection.', '', TRUE, FALSE, 201);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (927, 'Immediately after line 11, only one grasshopper object is eligible for garbage collection.', '', FALSE, FALSE, 201);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (928, 'The code compiles.', '', TRUE, FALSE, 201);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (929, 'The code does not compile.', '', FALSE, FALSE, 201);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (930, '10', '', FALSE, FALSE, 202);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (931, '12', '', TRUE, FALSE, 202);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (932, '13', '', FALSE, FALSE, 202);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (933, '17', '', FALSE, FALSE, 202);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (934, 'The code will not compile because of line 4.', '', FALSE, FALSE, 202);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (935, 'The code will not compile because of line 6.', '', FALSE, FALSE, 202);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (936, 'Color:', '', FALSE, FALSE, 203);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (937, 'Color:null', '', TRUE, FALSE, 203);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (938, 'Color:White', '', FALSE, FALSE, 203);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (939, 'Compiler error on line 4.', '', FALSE, FALSE, 203);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (940, 'Compiler error on line 10.', '', FALSE, FALSE, 203);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (941, 'Compiler error on line 11.', '', FALSE, FALSE, 203);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (942, 'Bear', '', FALSE, FALSE, 204);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (943, 'Shark', '', FALSE, FALSE, 204);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (944, 'BearShark', '', TRUE, FALSE, 204);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (945, 'The code will not compile because of line 4.', '', FALSE, FALSE, 204);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (946, 'The code will not compile because of line 6.', '', FALSE, FALSE, 204);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (947, 'The code compiles without issue but does not produce any output.', '', FALSE, FALSE, 204);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (948, 'The code will not compile because of line 6.', '', FALSE, FALSE, 205);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (949, 'The code will not compile because of lines 7–8.', '', FALSE, FALSE, 205);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (950, 'The application will compile but not produce any output.', '', FALSE, FALSE, 205);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (951, 'The application will output Cluck exactly once.', '', TRUE, FALSE, 205);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (952, 'The application will output Cluck more than once.', '', TRUE, FALSE, 205);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (953, 'The application will compile but produce an exception at runtime.', '', TRUE, FALSE, 205);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (954, 'CanSwim', '', TRUE, FALSE, 206);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (955, 'Long', '', FALSE, FALSE, 206);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (956, 'Amphibian', '', TRUE, FALSE, 206);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (957, 'Tadpole', '', FALSE, FALSE, 206);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (958, 'Object', '', TRUE, FALSE, 206);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (959, 'The code compiles without issue.', '', FALSE, FALSE, 207);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (960, 'Remove the default method modifier and method implementation on line 1.', '', FALSE, FALSE, 207);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (961, 'Remove the default method modifier and method implementation on line 2.', '', FALSE, FALSE, 207);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (962, 'Remove the default method modifier and method implementation on lines 1 and 2.', '', TRUE, FALSE, 207);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (963, 'Change the return value on line 1 from null to "Animal".', '', FALSE, FALSE, 207);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (964, 'Override the getName() method with an abstract method in the Otter class.', '', TRUE, FALSE, 207);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (965, 'Override the getName() method with a concrete method in the Otter class.', '', TRUE, FALSE, 207);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (966, 'System.out.println(test(i -> i == 5));', '', TRUE, TRUE, 208);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (967, 'System.out.println(test(i -> {i == 5;}));', '', FALSE, TRUE, 208);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (968, 'System.out.println(test((i) -> i == 5));', '', TRUE, TRUE, 208);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (969, 'System.out.println(test((int i) -> i == 5);', '', FALSE, TRUE, 208);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (970, 'System.out.println(test((int i) -> {return i == 5;}));', '', FALSE, TRUE, 208);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (971, 'System.out.println(test((i) -> {return i == 5;}));', '', TRUE, TRUE, 208);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (972, 'System.out.println(LocalDate.of(2015, Calendar.APRIL, 1));', '', FALSE, TRUE, 209);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (973, 'System.out.println(LocalDate.of(2015, Month.APRIL, 1));', '', TRUE, TRUE, 209);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (974, 'System.out.println(LocalDate.of(2015, 3, 1));', '', FALSE, TRUE, 209);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (975, 'System.out.println(LocalDate.of(2015, 4, 1));', '', TRUE, TRUE, 209);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (976, 'System.out.println(new LocalDate(2015, 3, 1));', '', FALSE, TRUE, 209);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (977, 'System.out.println(new LocalDate(2015, 4, 1));', '', FALSE, TRUE, 209);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (978, '.bytecode', '', FALSE, FALSE, 210);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (979, '.bytes', '', FALSE, FALSE, 210);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (980, '.class', '', TRUE, FALSE, 210);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (981, '.exe', '', FALSE, FALSE, 210);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (982, '.javac', '', FALSE, FALSE, 210);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (983, '.java', '', FALSE, FALSE, 210);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (984, 'Exception', '', TRUE, TRUE, 211);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (985, 'IllegalArgumentException', '', FALSE, TRUE, 211);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (986, 'IOException', '', TRUE, TRUE, 211);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (987, 'NullPointerException', '', FALSE, TRUE, 211);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (988, 'NumberFormatException', '', FALSE, TRUE, 211);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (989, 'StackOverflowError', '', FALSE, TRUE, 211);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (990, 'A$B', '', TRUE, TRUE, 212);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (991, '_helloWorld', '', TRUE, TRUE, 212);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (992, 'true', '', FALSE, TRUE, 212);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (993, 'java.lang', '', FALSE, TRUE, 212);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (994, 'Public', '', TRUE, TRUE, 212);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (995, '1980_s', '', FALSE, TRUE, 212);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (996, 'Line 6 generates a compiler error.', '', FALSE, FALSE, 213);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (997, 'Line 7 generates a compiler error.', '', FALSE, FALSE, 213);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (998, 'There is no output.', '', FALSE, FALSE, 213);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (999, 'Empty = false, Brand = null', '', TRUE, FALSE, 213);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1000, 'Empty = false, Brand =', '', FALSE, FALSE, 213);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1001, 'Empty = null, Brand = null', '', FALSE, FALSE, 213);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1002, 'Line 4 generates a compiler error.', '', FALSE, FALSE, 214);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1003, 'Line 5 generates a compiler error.', '', TRUE, FALSE, 214);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1004, 'Line 6 generates a compiler error.', '', FALSE, FALSE, 214);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1005, 'Line 7 generates a compiler error.', '', TRUE, FALSE, 214);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1006, 'Line 8 generates a compiler error.', '', TRUE, FALSE, 214);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1007, 'Line 9 generates a compiler error.', '', FALSE, FALSE, 214);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1008, 'The code compiles as is.', '', FALSE, FALSE, 214);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1009, 'If String result = "done"; is inserted on line 2, the code will compile.', '', TRUE, FALSE, 215);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1010, 'If String result = "done"; is inserted on line 4, the code will compile.', '', TRUE, FALSE, 215);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1011, 'If String result = "done"; is inserted on line 6, the code will compile.', '', FALSE, FALSE, 215);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1012, 'If String result = "done"; is inserted on line 9, the code will compile.', '', FALSE, FALSE, 215);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1013, 'None of the above changes will make the code compile.', '', FALSE, FALSE, 215);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1014, 'import aquarium.*;', '', FALSE, TRUE, 216);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1015, 'import aquarium.*.Jelly;', '', FALSE, TRUE, 216);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1016, 'import aquarium.jellies.Jelly;', '', TRUE, TRUE, 216);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1017, 'import aquarium.jellies.*;', '', TRUE, TRUE, 216);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1018, 'import aquarium.jellies.Jelly.*;', '', FALSE, TRUE, 216);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1019, 'None of these can make the code compile.', '', FALSE, TRUE, 216);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1020, '0', '', FALSE, FALSE, 217);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1021, '1', '', FALSE, FALSE, 217);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1022, '2', '', FALSE, FALSE, 217);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1023, '3', '', FALSE, FALSE, 217);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1024, '4', '', TRUE, FALSE, 217);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1025, 'Does not compile.', '', FALSE, FALSE, 217);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1026, 'import aquarium.*;', '', TRUE, TRUE, 218);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1027, 'import aquarium.Water;\r\nimport aquarium.jellies.*;', '', TRUE, TRUE, 218);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1028, 'import aquarium.*;\r\nimport aquarium.jellies.Water;', '', TRUE, TRUE, 218);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1029, 'import aquarium.*;\r\nimport aquarium.jellies.*;', '', FALSE, TRUE, 218);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1030, 'import aquarium.Water;\r\nimport aquarium.jellies.Water;', '', FALSE, TRUE, 218);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1031, 'None of these imports can make the code compile.', '', FALSE, TRUE, 218);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1032, 'java BirdDisplay Sparrow Blue Jay', '', FALSE, FALSE, 219);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1033, 'java BirdDisplay Sparrow "Blue Jay"', '', TRUE, FALSE, 219);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1034, 'java BirdDisplay Blue Jay Sparrow', '', FALSE, FALSE, 219);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1035, 'java BirdDisplay "Blue Jay" Sparrow', '', FALSE, FALSE, 219);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1036, 'java BirdDisplay.class Sparrow "Blue Jay"', '', FALSE, FALSE, 219);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1037, 'java BirdDisplay.class "Blue Jay" Sparrow', '', FALSE, FALSE, 219);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1038, 'Does not compile.', '', FALSE, FALSE, 219);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1039, 'String[] _names', '', TRUE, TRUE, 220);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1040, 'String[] 123', '', FALSE, TRUE, 220);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1041, 'String abc[]', '', TRUE, TRUE, 220);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1042, 'String _Names[]', '', TRUE, TRUE, 220);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1043, 'String... $n', '', TRUE, TRUE, 220);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1044, 'String names', '', FALSE, TRUE, 220);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1045, 'None of the above.', '', FALSE, FALSE, 220);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1046, 'private static void main(String[] args)', '', FALSE, TRUE, 221);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1047, 'public static final main(String[] args)', '', FALSE, TRUE, 221);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1048, 'public void main(String[] args)', '', FALSE, TRUE, 221);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1049, 'public static void test(String[] args)', '', FALSE, TRUE, 221);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1050, 'public static void main(String[] args)', '', TRUE, TRUE, 221);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1051, 'public static main(String[] args)', '', FALSE, TRUE, 221);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1052, 'None of the above.', '', FALSE, FALSE, 221);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1053, 'An instance variable of type double defaults to null.', '', FALSE, FALSE, 222);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1054, 'An instance variable of type int defaults to null.', '', FALSE, FALSE, 222);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1055, 'An instance variable of type String defaults to null.', '', TRUE, FALSE, 222);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1056, 'An instance variable of type double defaults to 0.0.', '', TRUE, FALSE, 222);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1057, 'An instance variable of type int defaults to 0.0.', '', FALSE, FALSE, 222);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1058, 'An instance variable of type String defaults to 0.0.', '', FALSE, FALSE, 222);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1059, 'None of the above.', '', FALSE, FALSE, 222);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1060, 'A local variable of type boolean defaults to null.', '', FALSE, FALSE, 223);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1061, 'A local variable of type float defaults to 0.', '', FALSE, FALSE, 223);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1062, 'A local variable of type Object defaults to null.', '', FALSE, FALSE, 223);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1063, 'A local variable of type boolean defaults to false.', '', FALSE, FALSE, 223);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1064, 'A local variable of type boolean defaults to true.', '', FALSE, FALSE, 223);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1065, 'A local variable of type float defaults to 0.0.', '', FALSE, FALSE, 223);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1066, 'None of the above.', '', TRUE, FALSE, 223);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1067, 'An instance variable of type boolean defaults to false.', '', TRUE, FALSE, 224);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1068, 'An instance variable of type boolean defaults to true.', '', FALSE, FALSE, 224);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1069, 'An instance variable of type boolean defaults to null.', '', FALSE, FALSE, 224);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1070, 'An instance variable of type int defaults to 0.', '', TRUE, FALSE, 224);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1071, 'An instance variable of type int defaults to 0.0.', '', FALSE, FALSE, 224);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1072, 'An instance variable of type int defaults to null.', '', FALSE, FALSE, 224);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1073, 'None of the above.', '', FALSE, FALSE, 224);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1074, 'package my.directory.named.a;', '', FALSE, TRUE, 225);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1075, 'package my.directory.named.A;', '', FALSE, TRUE, 225);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1076, 'package named.a;', '', FALSE, TRUE, 225);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1077, 'package named.A;', '', TRUE, TRUE, 225);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1078, 'package a;', '', FALSE, TRUE, 225);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1079, 'package A;', '', FALSE, TRUE, 225);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1080, 'Does not compile.', '', FALSE, FALSE, 225);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1081, 'int i1 = 1_234;', '', TRUE, TRUE, 226);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1082, 'double d1 = 1_234_.0;', '', FALSE, TRUE, 226);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1083, 'double d2 = 1_234._0;', '', FALSE, TRUE, 226);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1084, 'double d3 = 1_234.0_;', '', FALSE, TRUE, 226);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1085, 'double d4 = 1_234.0;', '', TRUE, TRUE, 226);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1086, 'None of the above.', '', FALSE, FALSE, 226);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1087, 'int amount = 9L;', '', FALSE, TRUE, 227);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1088, 'int amount = 0b101;', '', TRUE, TRUE, 227);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1089, 'int amount = 0xE;', '', TRUE, TRUE, 227);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1090, 'double amount = 0xE;', '', TRUE, TRUE, 227);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1091, 'double amount = 1_2_.0_0;', '', FALSE, TRUE, 227);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1092, 'int amount = 1_2_;', '', FALSE, TRUE, 227);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1093, 'None of the above.', '', FALSE, FALSE, 227);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1094, 'Bunny is a class.', '', TRUE, FALSE, 228);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1095, 'bun is a class.', '', FALSE, FALSE, 228);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1096, 'main is a class.', '', FALSE, FALSE, 228);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1097, 'Bunny is a reference to an object.', '', FALSE, FALSE, 228);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1098, 'bun is a reference to an object.', '', TRUE, FALSE, 228);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1099, 'main is a reference to an object.', '', FALSE, FALSE, 228);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1100, 'None of the above.', '', FALSE, FALSE, 228);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1101, 'A, B, C', '', FALSE, FALSE, 229);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1102, 'B, C, A', '', FALSE, FALSE, 229);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1103, 'C, B, A', '', TRUE, FALSE, 229);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1104, 'B, A', '', TRUE, FALSE, 229);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1105, 'C, A', '', TRUE, FALSE, 229);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1106, 'A, C', '', FALSE, FALSE, 229);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1107, 'A, B', '', FALSE, FALSE, 229);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1108, 'The Rabbit object from line 3 is first eligible for garbage collection immediately following line 6.', '', FALSE, FALSE, 230);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1109, 'The Rabbit object from line 3 is first eligible for garbage collection immediately following line 8.', '', TRUE, FALSE, 230);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1110, 'The Rabbit object from line 3 is first eligible for garbage collection immediately following line 12.', '', FALSE, FALSE, 230);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1111, 'The Rabbit object from line 4 is first eligible for garbage collection immediately following line 9.', '', TRUE, FALSE, 230);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1112, 'The Rabbit object from line 4 is first eligible for garbage collection immediately following line 11.', '', FALSE, FALSE, 230);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1113, 'The Rabbit object from line 4 is first eligible for garbage collection immediately following line 12.', '', FALSE, FALSE, 230);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1114, 'finalize() is guaranteed to be called.', '', FALSE, FALSE, 231);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1115, 'finalize() might or might not be called', '', TRUE, FALSE, 231);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1116, 'finalize() is guaranteed not to be called.', '', FALSE, FALSE, 231);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1117, 'Garbage collection is guaranteed to run.', '', FALSE, FALSE, 231);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1118, 'Garbage collection might or might not run.', '', TRUE, FALSE, 231);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1119, 'Garbage collection is guaranteed not to run.', '', FALSE, FALSE, 231);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1120, 'The code does not compile.', '', FALSE, FALSE, 231);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1121, '0', '', TRUE, FALSE, 232);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1122, '4', '', FALSE, FALSE, 232);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1123, 'Compilation fails on line 3.', '', FALSE, FALSE, 232);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1124, 'Compilation fails on line 4.', '', FALSE, FALSE, 232);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1125, 'Compilation fails on line 7.', '', FALSE, FALSE, 232);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1126, 'Compilation fails on line 8.', '', FALSE, FALSE, 232);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1127, 'Java allows operator overloading.', '', FALSE, FALSE, 233);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1128, 'Java code compiled on Windows can run on Linux.', '', TRUE, FALSE, 233);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1129, 'Java has pointers to specific locations in memory.', '', FALSE, FALSE, 233);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1130, 'Java is a procedural language.', '', FALSE, FALSE, 233);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1131, 'Java is an object-oriented language.', '', TRUE, FALSE, 233);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1132, 'Java is a functional programming language.', '', FALSE, FALSE, 233);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1133, 'javac compiles a .class file into a .java file.', '', FALSE, FALSE, 234);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1134, 'javac compiles a .java file into a .bytecode file.', '', FALSE, FALSE, 234);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1135, 'javac compiles a .java file into a .class file.', '', TRUE, FALSE, 234);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1136, 'Java takes the name of the class as a parameter.', '', TRUE, FALSE, 234);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1137, 'Java takes the name of the .bytecode file as a parameter.', '', FALSE, FALSE, 234);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1138, 'Java takes the name of the .class file as a parameter.', '', FALSE, FALSE, 234);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1139, '==', '', TRUE, FALSE, 235);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1140, '+', '', FALSE, FALSE, 235);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1141, '--', '', FALSE, FALSE, 235);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1142, '!', '', TRUE, FALSE, 235);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1143, '%', '', FALSE, FALSE, 235);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1144, '<=', '', FALSE, FALSE, 235);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1145, 'int', '', TRUE, FALSE, 236);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1146, 'long', '', TRUE, FALSE, 236);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1147, 'boolean', '', FALSE, FALSE, 236);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1148, 'double', '', TRUE, FALSE, 236);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1149, 'short', '', FALSE, FALSE, 236);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1150, 'byte', '', FALSE, FALSE, 236);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1151, 'Greater than,10', '', FALSE, FALSE, 237);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1152, 'false,10', '', FALSE, FALSE, 237);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1153, 'Greater than,11', '', FALSE, FALSE, 237);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1154, 'false,11', '', FALSE, FALSE, 237);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1155, 'The code will not compile because of line 4.', '', FALSE, FALSE, 237);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1156, 'The code will not compile because of line 5.', '', TRUE, FALSE, 237);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1157, 'No change; it compiles as is.', '', FALSE, FALSE, 238);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1158, 'Cast x on line 4 to int.', '', TRUE, FALSE, 238);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1159, 'Change the data type of x on line 3 to short.', '', TRUE, FALSE, 238);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1160, 'Cast 2 * x on line 4 to int.', '', TRUE, FALSE, 238);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1161, 'Change the data type of y on line 4 to short.', '', FALSE, FALSE, 238);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1162, 'Change the data type of y on line 4 to long.', '', TRUE, FALSE, 238);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1163, '10, 14,', '', FALSE, FALSE, 239);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1164, '10, 14', '', FALSE, FALSE, 239);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1165, '10', '', TRUE, FALSE, 239);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1166, 'The code will not compile because of line 7.', '', FALSE, FALSE, 239);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1167, 'The code will not compile because of line 8.', '', FALSE, FALSE, 239);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1168, 'The code contains an infinite loop and does not terminate.', '', FALSE, FALSE, 239);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1169, 'Too Low', '', FALSE, FALSE, 240);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1170, 'Just Right', '', FALSE, FALSE, 240);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1171, 'Too High', '', FALSE, FALSE, 240);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1172, 'Compiles but throws a NullPointerException.', '', FALSE, FALSE, 240);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1173, 'The code will not compile because of line 6.', '', FALSE, FALSE, 240);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1174, 'The code will not compile because of line 7.', '', TRUE, FALSE, 240);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1175, '5', '', FALSE, FALSE, 241);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1176, '4', '', FALSE, FALSE, 241);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1177, '10', '', FALSE, FALSE, 241);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1178, '8', '', TRUE, FALSE, 241);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1179, '7', '', FALSE, FALSE, 241);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1180, 'The code will not compile because of line 4.', '', FALSE, FALSE, 241);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1181, 'true, 10, true', '', FALSE, TRUE, 242);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1182, 'true, 20, false', '', TRUE, TRUE, 242);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1183, 'false, 20, true', '', FALSE, TRUE, 242);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1184, 'false, 20, false', '', FALSE, TRUE, 242);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1185, 'false, 20, true', '', FALSE, TRUE, 242);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1186, 'The code will not compile because of line 5.', '', FALSE, FALSE, 242);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1187, '9', '', FALSE, FALSE, 243);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1188, '10', '', FALSE, FALSE, 243);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1189, '11', '', FALSE, FALSE, 243);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1190, 'The code will not compile because of line 3.', '', FALSE, FALSE, 243);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1191, 'The code will not compile because of line 5.', '', FALSE, FALSE, 243);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1192, 'The code contains an infinite loop and does not terminate.', '', TRUE, FALSE, 243);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1193, '40', '', FALSE, FALSE, 244);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1194, '50', '', FALSE, FALSE, 244);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1195, '90', '', FALSE, FALSE, 244);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1196, 'The code will not compile because of line 4.', '', TRUE, FALSE, 244);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1197, 'An undefined value.', '', FALSE, FALSE, 244);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1198, '2', '', TRUE, FALSE, 245);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1199, '3', '', FALSE, FALSE, 245);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1200, '5', '', FALSE, FALSE, 245);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1201, '6', '', FALSE, FALSE, 245);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1202, 'The code will not compile because of line 3.', '', FALSE, FALSE, 245);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1203, 'Success', '', FALSE, FALSE, 246);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1204, 'Failure', '', FALSE, FALSE, 246);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1205, 'The code will not compile because of line 4.', '', FALSE, FALSE, 246);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1206, 'The code will not compile because of line 5.', '', TRUE, FALSE, 246);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1207, 'Success', '', TRUE, FALSE, 247);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1208, 'Failure', '', FALSE, FALSE, 247);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1209, 'The code will not compile because of line 4.', '', FALSE, FALSE, 247);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1210, 'The code will not compile because of line 5.', '', FALSE, FALSE, 247);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1211, '8', '', FALSE, FALSE, 248);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1212, '11', '', FALSE, FALSE, 248);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1213, '12', '', TRUE, FALSE, 248);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1214, '15', '', FALSE, FALSE, 248);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1215, '16', '', FALSE, FALSE, 248);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1216, 'The code will not compile because of line 5.', '', FALSE, FALSE, 248);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1217, '10, 5', '', FALSE, FALSE, 249);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1218, '10, 6', '', FALSE, FALSE, 249);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1219, '11, 5', '', FALSE, FALSE, 249);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1220, 'The code will not compile because of line 3.', '', FALSE, FALSE, 249);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1221, 'The code will not compile because of line 4.', '', TRUE, FALSE, 249);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1222, 'The code contains an infinite loop and does not terminate.', '', FALSE, FALSE, 249);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1223, '1 2 3 4 5 6 7 8 9', '', FALSE, FALSE, 250);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1224, '1 2 3 4 5 6 7 8 9 10', '', FALSE, FALSE, 250);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1225, '1 2 3 4 5 6 7 8 9 10 11', '', FALSE, FALSE, 250);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1226, 'The code will not compile because of line 6.', '', TRUE, FALSE, 250);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1227, 'The code contains an infinite loop and does not terminate.', '', FALSE, FALSE, 250);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1228, '7', '', FALSE, FALSE, 251);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1229, '9', '', FALSE, FALSE, 251);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1230, '10', '', FALSE, FALSE, 251);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1231, '11', '', TRUE, FALSE, 251);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1232, '15', '', FALSE, FALSE, 251);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1233, 'The code will not compile because of line 8.', '', FALSE, FALSE, 251);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1234, '1', '', FALSE, FALSE, 252);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1235, '2', '', TRUE, FALSE, 252);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1236, '3', '', FALSE, FALSE, 252);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1237, '4', '', FALSE, FALSE, 252);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1238, '6', '', FALSE, FALSE, 252);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1239, 'The code will not compile because of line 6.', '', FALSE, FALSE, 252);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1240, '11', '', FALSE, FALSE, 253);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1241, '13', '', FALSE, FALSE, 253);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1242, '23', '', FALSE, FALSE, 253);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1243, '36', '', TRUE, FALSE, 253);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1244, '50', '', FALSE, FALSE, 253);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1245, 'The code will not compile because of line 7.', '', FALSE, FALSE, 253);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1246, 'great', '', FALSE, FALSE, 254);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1247, 'greatgood', '', TRUE, FALSE, 254);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1248, 'The code will not compile because of line 3.', '', FALSE, FALSE, 254);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1249, 'The code will not compile because of line 6.', '', FALSE, FALSE, 254);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1250, 'The code will not compile because of lines 6 and 9.', '', FALSE, FALSE, 254);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1251, '4 1', '', FALSE, FALSE, 255);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1252, '41', '', FALSE, FALSE, 255);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1253, '5', '', FALSE, FALSE, 255);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1254, '5 tuna', '', FALSE, FALSE, 255);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1255, '5tuna', '', FALSE, FALSE, 255);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1256, '51tuna', '', FALSE, FALSE, 255);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1257, 'The code does not compile.', '', TRUE, FALSE, 255);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1258, 'one', '', TRUE, FALSE, 256);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1259, 'two', '', FALSE, FALSE, 256);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1260, 'three', '', TRUE, FALSE, 256);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1261, 'four', '', TRUE, FALSE, 256);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1262, 'five', '', FALSE, FALSE, 256);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1263, 'The code does not compile.', '', FALSE, FALSE, 256);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1264, 'An immutable object can be modified.', '', FALSE, FALSE, 257);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1265, 'An immutable object cannot be modified.', '', TRUE, FALSE, 257);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1266, 'An immutable object can be garbage collected.', '', TRUE, FALSE, 257);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1267, 'An immutable object cannot be garbage collected.', '', FALSE, FALSE, 257);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1268, 'String is immutable.', '', TRUE, FALSE, 257);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1269, 'StringBuffer is immutable.', '', FALSE, FALSE, 257);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1270, 'StringBuilder is immutable.', '', FALSE, FALSE, 257);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1271, 'abbaaccc', '', FALSE, FALSE, 258);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1272, 'abbaccca', '', TRUE, FALSE, 258);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1273, 'bbaaaccc', '', FALSE, FALSE, 258);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1274, 'bbaaccca', '', FALSE, FALSE, 258);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1275, 'An exception is thrown.', '', FALSE, FALSE, 258);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1276, 'The code does not compile.', '', FALSE, FALSE, 258);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1277, '1', '', FALSE, FALSE, 259);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1278, '2', '', FALSE, FALSE, 259);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1279, '12', '', FALSE, FALSE, 259);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1280, 'No output is printed.', '', FALSE, FALSE, 259);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1281, 'An exception is thrown.', '', FALSE, FALSE, 259);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1282, 'The code does not compile.', '', TRUE, FALSE, 259);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1283, 'roar roar', '', FALSE, FALSE, 260);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1284, 'roar roar!!!', '', TRUE, FALSE, 260);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1285, 'roar!!! roar', '', FALSE, FALSE, 260);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1286, 'roar!!! roar!!!', '', FALSE, FALSE, 260);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1287, 'An exception is thrown.', '', FALSE, FALSE, 260);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1288, 'The code does not compile.', '', FALSE, FALSE, 260);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1289, '5', '', FALSE, FALSE, 261);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1290, '6', '', TRUE, FALSE, 261);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1291, 'c', '', FALSE, FALSE, 261);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1292, 'd', '', TRUE, FALSE, 261);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1293, 'An exception is thrown.', '', TRUE, FALSE, 261);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1294, 'The code does not compile.', '', FALSE, FALSE, 261);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1295, '12', '', TRUE, FALSE, 262);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1296, '123', '', FALSE, FALSE, 262);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1297, '7', '', FALSE, FALSE, 262);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1298, '78', '', TRUE, FALSE, 262);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1299, 'A blank line.', '', TRUE, FALSE, 262);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1300, 'An exception is thrown.', '', FALSE, FALSE, 262);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1301, 'The code does not compile.', '', FALSE, FALSE, 262);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1302, '2', '', FALSE, FALSE, 263);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1303, '4', '', FALSE, FALSE, 263);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1304, '8', '', TRUE, FALSE, 263);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1305, '10', '', FALSE, FALSE, 263);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1306, 'An exception is thrown.', '', FALSE, FALSE, 263);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1307, 'The code does not compile.', '', FALSE, FALSE, 263);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1308, 'Compile error on line 14.', '', FALSE, FALSE, 264);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1309, 'Compile error on line 15.', '', FALSE, FALSE, 264);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1310, 'Compile error on line 16.', '', FALSE, FALSE, 264);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1311, 'Compile error on another line.', '', FALSE, FALSE, 264);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1312, '==', '', FALSE, FALSE, 264);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1313, 'equals', '', TRUE, FALSE, 264);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1314, 'An exception is thrown.', '', FALSE, FALSE, 264);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1315, '1', '', FALSE, FALSE, 265);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1316, '2', '', FALSE, FALSE, 265);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1317, '3', '', FALSE, FALSE, 265);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1318, '7', '', FALSE, FALSE, 265);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1319, 'An exception is thrown.', '', TRUE, FALSE, 265);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1320, 'The code does not compile.', '', FALSE, FALSE, 265);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1321, '01+89–', '', TRUE, FALSE, 266);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1322, '012+9–', '', FALSE, FALSE, 266);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1323, '012+–9', '', FALSE, FALSE, 266);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1324, '0123456789', '', FALSE, FALSE, 266);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1325, 'An exception is thrown.', '', FALSE, FALSE, 266);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1326, 'The code does not compile.', '', FALSE, FALSE, 266);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1327, 'rum', '', FALSE, FALSE, 267);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1328, 'rum4', '', FALSE, FALSE, 267);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1329, 'rumb4', '', FALSE, FALSE, 267);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1330, 'rumble4', '', FALSE, FALSE, 267);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1331, 'An exception is thrown.', '', FALSE, FALSE, 267);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1332, 'The code does not compile.', '', TRUE, FALSE, 267);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1333, 'puzzle.reverse();', '', TRUE, FALSE, 268);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1334, 'puzzle.append("vaJ$").substring(0, 4);', '', FALSE, FALSE, 268);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1335, 'puzzle.append("vaJ$").delete(0, 3).deleteCharAt(puzzle.length() - 1);', '', TRUE, FALSE, 268);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1336, 'puzzle.append("vaJ$").delete(0, 3).deleteCharAt(puzzle.length());', '', FALSE, FALSE, 268);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1337, 'None of the above.', '', FALSE, FALSE, 268);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1338, 'int[][] scores = new int[5][];', '', FALSE, TRUE, 269);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1339, 'Object[][][] cubbies = new Object[3][0][5];', '', FALSE, TRUE, 269);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1340, 'String beans[] = new beans[6];', '', TRUE, TRUE, 269);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1341, 'java.util.Date[] dates[] = new java.util.Date[2][];', '', FALSE, TRUE, 269);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1342, 'int[][] types = new int[];', '', TRUE, TRUE, 269);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1343, 'int[][] java = new int[][];', '', TRUE, TRUE, 269);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1344, 'int length = c.capacity;', '', FALSE, TRUE, 270);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1345, 'int length = c.capacity();', '', FALSE, TRUE, 270);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1346, 'int length = c.length;', '', TRUE, TRUE, 270);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1347, 'int length = c.length();', '', FALSE, TRUE, 270);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1348, 'int length = c.size;', '', FALSE, TRUE, 270);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1349, 'int length = c.size();', '', FALSE, TRUE, 270);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1350, 'None of the above.', '', FALSE, FALSE, 270);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1351, 'int length = l.capacity;', '', FALSE, TRUE, 271);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1352, 'int length = l.capacity();', '', FALSE, TRUE, 271);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1353, 'int length = l.length;', '', FALSE, TRUE, 271);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1354, 'int length = l.length();', '', FALSE, TRUE, 271);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1355, 'int length = l.size;', '', FALSE, TRUE, 271);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1356, 'int length = l.size();', '', TRUE, TRUE, 271);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1357, 'None of the above.', '', FALSE, FALSE, 271);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1358, 'An array has a fixed size.', '', TRUE, FALSE, 272);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1359, 'An ArrayList has a fixed size.', '', FALSE, FALSE, 272);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1360, 'An array allows multiple dimensions.', '', TRUE, FALSE, 272);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1361, 'An array is ordered.', '', TRUE, FALSE, 272);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1362, 'An ArrayList is ordered.', '', TRUE, FALSE, 272);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1363, 'An array is immutable.', '', FALSE, FALSE, 272);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1364, 'An ArrayList is immutable.', '', FALSE, FALSE, 272);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1365, 'Two arrays with the same content are equal.', '', FALSE, FALSE, 273);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1366, 'Two ArrayLists with the same content are equal.', '', TRUE, FALSE, 273);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1367, 'If you call remove(0) using an empty ArrayList object, it will compile successfully.', '', TRUE, FALSE, 273);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1368, 'If you call remove(0) using an empty ArrayList object, it will run successfully.', '', FALSE, FALSE, 273);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1369, 'None of the above.', '', FALSE, FALSE, 273);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1370, 'onetwo', '', FALSE, FALSE, 274);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1371, 'onetwo7', '', FALSE, FALSE, 274);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1372, 'onetwo followed by an exception', '', FALSE, FALSE, 274);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1373, 'Compiler error on line 9.', '', TRUE, FALSE, 274);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1374, 'Compiler error on line 10.', '', FALSE, FALSE, 274);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1375, '4', '', FALSE, FALSE, 275);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1376, '5', '', FALSE, FALSE, 275);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1377, '6', '', TRUE, FALSE, 275);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1378, '46', '', FALSE, FALSE, 275);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1379, '45', '', FALSE, FALSE, 275);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1380, 'An exception is thrown.', '', FALSE, FALSE, 275);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1381, 'The code does not compile.', '', FALSE, FALSE, 275);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1382, '2', '', FALSE, FALSE, 276);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1383, '4', '', FALSE, FALSE, 276);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1384, '6', '', FALSE, FALSE, 276);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1385, 'The result is undefined.', '', TRUE, FALSE, 276);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1386, 'An exception is thrown.', '', FALSE, FALSE, 276);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1387, 'The code does not compile.', '', FALSE, FALSE, 276);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1388, '-1', '', TRUE, FALSE, 277);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1389, '10', '', FALSE, FALSE, 277);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1390, 'Compiler error on line 4.', '', FALSE, FALSE, 277);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1391, 'Compiler error on line 5.', '', FALSE, FALSE, 277);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1392, 'Compiler error on line 6.', '', FALSE, FALSE, 277);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1393, 'An exception is thrown.', '', FALSE, FALSE, 277);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1394, 'Sue', '', FALSE, FALSE, 278);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1395, 'Tom', '', FALSE, FALSE, 278);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1396, 'Compiler error on line 7.', '', TRUE, FALSE, 278);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1397, 'Compiler error on line 8.', '', FALSE, FALSE, 278);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1398, 'An exception is thrown.', '', FALSE, FALSE, 278);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1399, '0 1 –2', '', FALSE, FALSE, 279);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1400, '0 1 –3', '', FALSE, FALSE, 279);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1401, '2 1 –2', '', FALSE, FALSE, 279);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1402, '2 1 –3', '', TRUE, FALSE, 279);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1403, 'None of the above.', '', FALSE, FALSE, 279);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1404, 'The code doesn’t compile.', '', FALSE, FALSE, 279);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1405, 'The code compiles.', '', TRUE, FALSE, 280);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1406, 'The code throws a runtime exception.', '', TRUE, FALSE, 280);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1407, 'Exactly one of the add statements uses autoboxing.', '', FALSE, FALSE, 280);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1408, 'Exactly two of the add statements use autoboxing.', '', TRUE, FALSE, 280);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1409, 'Exactly three of the add statements use autoboxing.', '', FALSE, FALSE, 280);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1410, 'A', '', FALSE, FALSE, 281);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1411, 'B', '', TRUE, FALSE, 281);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1412, 'C', '', FALSE, FALSE, 281);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1413, 'An exception is thrown.', '', FALSE, FALSE, 281);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1414, 'The code does not compile.', '', FALSE, FALSE, 281);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1415, 'new LocalDate(2014, 5, 21);', '', FALSE, TRUE, 282);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1416, 'new LocalDate(2014, 6, 21);', '', FALSE, TRUE, 282);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1417, 'LocalDate.of(2014, 5, 21);', '', FALSE, TRUE, 282);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1418, 'LocalDate.of(2014, 6, 21);', '', TRUE, TRUE, 282);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1419, 'LocalDate.of(2014, Calendar.JUNE, 21);', '', FALSE, TRUE, 282);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1420, 'LocalDate.of(2014, Month.JUNE, 21);', '', TRUE, TRUE, 282);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1421, '2018 APRIL 2', '', FALSE, FALSE, 283);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1422, '2018 APRIL 30', '', FALSE, FALSE, 283);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1423, '2018 MAY 2', '', FALSE, FALSE, 283);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1424, 'The code does not compile.', '', TRUE, FALSE, 283);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1425, 'A runtime exception is thrown.', '', FALSE, FALSE, 283);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1426, '2018 APRIL 4', '', FALSE, FALSE, 284);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1427, '2018 APRIL 30', '', FALSE, FALSE, 284);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1428, '2018 MAY 10', '', FALSE, FALSE, 284);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1429, 'Another date.', '', FALSE, FALSE, 284);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1430, 'The code does not compile.', '', FALSE, FALSE, 284);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1431, 'A runtime exception is thrown.', '', TRUE, FALSE, 284);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1432, '2018 APRIL 2', '', FALSE, FALSE, 285);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1433, '2018 APRIL 30', '', TRUE, FALSE, 285);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1434, '2018 MAY 2', '', FALSE, FALSE, 285);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1435, '2021 APRIL 2', '', FALSE, FALSE, 285);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1436, '2021 APRIL 30', '', FALSE, FALSE, 285);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1437, '2021 MAY 2', '', FALSE, FALSE, 285);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1438, 'A runtime exception is thrown.', '', FALSE, FALSE, 285);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1439, '3/7/14 11:22 AM', '', FALSE, FALSE, 286);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1440, '5/10/15 11:22 AM', '', FALSE, FALSE, 286);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1441, '3/7/14', '', FALSE, FALSE, 286);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1442, '5/10/15', '', FALSE, FALSE, 286);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1443, '11:22 AM', '', TRUE, FALSE, 286);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1444, 'The code does not compile.', '', FALSE, FALSE, 286);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1445, 'A runtime exception is thrown.', '', FALSE, FALSE, 286);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1446, '5/9/13 11:22 AM', '', FALSE, FALSE, 287);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1447, '5/10/13 11:22 AM', '', TRUE, FALSE, 287);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1448, '5/9/14', '', FALSE, FALSE, 287);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1449, '5/10/14', '', FALSE, FALSE, 287);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1450, 'The code does not compile.', '', FALSE, FALSE, 287);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1451, 'A runtime exception is thrown.', '', FALSE, FALSE, 287);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1452, 'default', '', FALSE, FALSE, 288);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1453, 'final', '', TRUE, FALSE, 288);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1454, 'private', '', TRUE, FALSE, 288);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1455, 'Public', '', FALSE, FALSE, 288);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1456, 'String', '', FALSE, FALSE, 288);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1457, 'zzz:', '', FALSE, FALSE, 288);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1458, 'final static void method4() { }', '', TRUE, TRUE, 289);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1459, 'public final int void method() { }', '', FALSE, TRUE, 289);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1460, 'private void int method() { }', '', FALSE, TRUE, 289);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1461, 'static final void method3() { }', '', TRUE, TRUE, 289);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1462, 'void final method() {}', '', FALSE, TRUE, 289);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1463, 'void public method() { }', '', FALSE, TRUE, 289);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1464, 'public void methodA() { return;}', '', TRUE, TRUE, 290);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1465, 'public void methodB() { return null;}', '', FALSE, TRUE, 290);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1466, 'public void methodD() {}', '', TRUE, TRUE, 290);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1467, 'public int methodD() { return 9;}', '', TRUE, TRUE, 290);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1468, 'public int methodE() { return 9.0;}', '', FALSE, TRUE, 290);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1469, 'public int methodF() { return;}', '', FALSE, TRUE, 290);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1470, 'public int methodG() { return null;}', '', FALSE, TRUE, 290);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1471, 'public void moreA(int... nums) {}', '', TRUE, TRUE, 291);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1472, 'public void moreB(String values, int... nums) {}', '', TRUE, TRUE, 291);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1473, 'public void moreC(int... nums, String values) {}', '', FALSE, TRUE, 291);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1474, 'public void moreD(String... values, int... nums) {}', '', FALSE, TRUE, 291);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1475, 'public void moreE(String[] values, ...int nums) {}', '', FALSE, TRUE, 291);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1476, 'public void moreF(String... values, int[] nums) {}', '', FALSE, TRUE, 291);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1477, 'public void moreG(String[] values, int[] nums) {}', '', TRUE, TRUE, 291);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1478, 'howMany();', '', FALSE, TRUE, 292);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1479, 'howMany(true);', '', FALSE, TRUE, 292);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1480, 'howMany(true, true);', '', FALSE, TRUE, 292);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1481, 'howMany(true, true, true);', '', TRUE, TRUE, 292);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1482, 'howMany(true, {true});', '', FALSE, TRUE, 292);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1483, 'howMany(true, {true, true});', '', FALSE, TRUE, 292);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1484, 'howMany(true, new boolean[2]);', '', TRUE, TRUE, 292);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1485, 'Package private access is more lenient than protected access.', '', FALSE, FALSE, 293);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1486, 'A public class that has private fields and package private methods is not visible to classes outside the package.', '', FALSE, FALSE, 293);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1487, 'You can use access modifiers so only some of the classes in a package see a particular package private class.', '', FALSE, FALSE, 293);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1488, 'You can use access modifiers to allow read access to all methods, but not any instance variables.', '', TRUE, FALSE, 293);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1489, 'You can use access modifiers to restrict read access to all classes that begin with the word Test.', '', FALSE, FALSE, 293);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1490, 'None, the code compiles fine.', '', FALSE, FALSE, 294);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1491, 'Line 5', '', TRUE, FALSE, 294);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1492, 'Line 6', '', TRUE, FALSE, 294);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1493, 'Line 7', '', TRUE, FALSE, 294);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1494, 'Line 8', '', FALSE, FALSE, 294);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1495, 'Line 9', '', TRUE, FALSE, 294);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1496, 'Encapsulation uses package private instance variables.', '', FALSE, FALSE, 295);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1497, 'Encapsulation uses private instance variables.', '', TRUE, FALSE, 295);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1498, 'Encapsulation allows setters.', '', TRUE, FALSE, 295);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1499, 'Immutability uses package private instance variables.', '', FALSE, FALSE, 295);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1500, 'Immutability uses private instance variables.', '', TRUE, FALSE, 295);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1501, 'Immutability allows setters.', '', FALSE, FALSE, 295);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1502, 'public boolean getCanSwim() { return canSwim;}', '', FALSE, TRUE, 296);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1503, 'public boolean canSwim() { return numberWings;}', '', FALSE, TRUE, 296);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1504, 'public int getNumWings() { return numberWings;}', '', TRUE, TRUE, 296);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1505, 'public int numWings() { return numberWings;}', '', FALSE, TRUE, 296);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1506, 'public void setCanSwim(boolean b) { canSwim = b;}', '', TRUE, TRUE, 296);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1507, 'swing swing 5', '', FALSE, FALSE, 297);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1508, 'swing swing 10', '', TRUE, FALSE, 297);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1509, 'Compiler error on line 2 of Chimp.', '', FALSE, FALSE, 297);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1510, 'Compiler error on line 5 of Chimp.', '', FALSE, FALSE, 297);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1511, 'Compiler error on line 6 of Chimp.', '', FALSE, FALSE, 297);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1512, 'Compiler error on line 7 of Chimp.', '', FALSE, FALSE, 297);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1513, 'The code compiles as is.', '', FALSE, FALSE, 298);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1514, 'There is exactly one compiler error in the code.', '', TRUE, FALSE, 298);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1515, 'There are exactly two compiler errors in the code.', '', FALSE, FALSE, 298);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1516, 'If the lines with compiler errors are removed, the output is climb climb.', '', FALSE, FALSE, 298);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1517, 'If the lines with compiler errors are removed, the output is swing swing.', '', TRUE, FALSE, 298);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1518, 'If the lines with compile errors are removed, the code throws a NullPointerException.', '', FALSE, FALSE, 298);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1519, '02', '', FALSE, FALSE, 299);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1520, '08', '', FALSE, FALSE, 299);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1521, '2', '', FALSE, FALSE, 299);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1522, '8', '', TRUE, FALSE, 299);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1523, 'The code does not compile.', '', FALSE, FALSE, 299);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1524, 'An exception is thrown.', '', FALSE, FALSE, 299);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1525, '0', '', FALSE, FALSE, 300);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1526, '1', '', FALSE, FALSE, 300);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1527, '2', '', FALSE, FALSE, 300);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1528, '3', '', FALSE, FALSE, 300);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1529, '4', '', TRUE, FALSE, 300);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1530, '5', '', FALSE, FALSE, 300);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1531, 'import static java.util.Collections;', '', FALSE, TRUE, 301);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1532, 'import static java.util.Collections.*;', '', TRUE, TRUE, 301);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1533, 'import static java.util.Collections.sort(ArrayList<String>);', '', FALSE, TRUE, 301);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1534, 'static import java.util.Collections;', '', FALSE, TRUE, 301);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1535, 'static import java.util.Collections.*;', '', FALSE, TRUE, 301);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1536, 'static import java.util.Collections.sort(ArrayList<String>);', '', FALSE, TRUE, 301);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1537, 'bytefloatObject', '', FALSE, FALSE, 302);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1538, 'intfloatObject', '', FALSE, FALSE, 302);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1539, 'byteObjectfloat', '', FALSE, FALSE, 302);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1540, 'intObjectfloat', '', FALSE, FALSE, 302);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1541, 'intObjectObject', '', TRUE, FALSE, 302);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1542, 'byteObjectObject', '', FALSE, FALSE, 302);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1543, '-1', '', FALSE, FALSE, 303);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1544, '9', '', TRUE, FALSE, 303);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1545, '81', '', FALSE, FALSE, 303);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1546, 'Compiler error on line 9.', '', FALSE, FALSE, 303);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1547, 'Compiler error on a different line.', '', FALSE, FALSE, 303);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1548, 's1 = a', '', FALSE, TRUE, 304);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1549, 's1 = s1', '', TRUE, TRUE, 304);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1550, 's2 = s2', '', FALSE, TRUE, 304);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1551, 's2 = s2b', '', TRUE, TRUE, 304);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1552, 's3 = a', '', TRUE, TRUE, 304);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1553, 's3 = null', '', FALSE, TRUE, 304);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1554, 'The code does not compile.', '', FALSE, FALSE, 304);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1555, 'this() can be called from anywhere in a constructor.', '', FALSE, FALSE, 305);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1556, 'this() can be called from any instance method in the class.', '', FALSE, FALSE, 305);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1557, 'this.variableName can be called from any instance method in the class.', '', TRUE, FALSE, 305);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1558, 'this.variableName can be called from any static method in the class.', '', FALSE, FALSE, 305);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1559, 'You must include a default constructor in the code if the compiler does not include one.', '', FALSE, FALSE, 305);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1560, 'You can call the default constructor written by the compiler using this().', '', FALSE, FALSE, 305);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1561, 'You can access a private constructor with the main() method.', '', TRUE, FALSE, 305);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1562, 'public class Bird { }', '', TRUE, TRUE, 306);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1563, 'public class Bird { public bird() {} }', '', FALSE, TRUE, 306);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1564, 'public class Bird { public bird(String name) {} }', '', FALSE, TRUE, 306);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1565, 'public class Bird { public Bird() {} }', '', FALSE, TRUE, 306);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1566, 'public class Bird { Bird(String name) {} }', '', FALSE, TRUE, 306);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1567, 'public class Bird { private Bird(int age) {} }', '', FALSE, TRUE, 306);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1568, 'public class Bird { void Bird() { }', '', TRUE, TRUE, 306);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1569, 'Replace line 1 with BirdSeed(2);', '', FALSE, FALSE, 307);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1570, 'Replace line 2 with BirdSeed(2);', '', FALSE, FALSE, 307);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1571, 'Replace line 1 with new BirdSeed(2);', '', FALSE, FALSE, 307);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1572, 'Replace line 2 with new BirdSeed(2);', '', FALSE, FALSE, 307);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1573, 'Replace line 1 with this(2);', '', TRUE, FALSE, 307);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1574, 'Replace line 2 with this(2);', '', FALSE, FALSE, 307);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1575, 'numSpots = numSpots;', '', FALSE, TRUE, 308);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1576, 'numSpots = this.numSpots;', '', FALSE, TRUE, 308);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1577, 'this.numSpots = numSpots;', '', TRUE, TRUE, 308);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1578, 'numSpots = super.numSpots;', '', FALSE, TRUE, 308);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1579, 'super.numSpots = numSpots;', '', FALSE, TRUE, 308);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1580, 'None of the above.', '', FALSE, FALSE, 308);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1581, 'curur', '', FALSE, FALSE, 309);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1582, 'ucrcr', '', FALSE, FALSE, 309);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1583, 'u ucrcr', '', FALSE, FALSE, 309);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1584, 'u u curcur', '', FALSE, FALSE, 309);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1585, 'u u ucrcr', '', TRUE, FALSE, 309);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1586, 'ur ur urc', '', FALSE, FALSE, 309);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1587, 'The code does not compile.', '', FALSE, FALSE, 309);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1588, 'tacb', '', TRUE, FALSE, 310);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1589, 'tacf', '', FALSE, FALSE, 310);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1590, 'tacbf', '', FALSE, FALSE, 310);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1591, 'tacfb', '', FALSE, FALSE, 310);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1592, 'tacftacb', '', FALSE, FALSE, 310);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1593, 'The code does not compile.', '', FALSE, FALSE, 310);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1594, 'An exception is thrown.', '', FALSE, FALSE, 310);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1595, 'value1 = "d"; instead of // CODE SNIPPET 1', '', FALSE, FALSE, 311);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1596, 'value2 = "e"; instead of // CODE SNIPPET 1', '', TRUE, FALSE, 311);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1597, 'value3 = "f"; instead of // CODE SNIPPET 1', '', TRUE, FALSE, 311);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1598, 'value1 = "g"; instead of // CODE SNIPPET 2', '', FALSE, FALSE, 311);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1599, 'value2 = "h"; instead of // CODE SNIPPET 2', '', TRUE, FALSE, 311);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1600, 'value3 = "i"; instead of // CODE SNIPPET 2', '', FALSE, FALSE, 311);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1601, 'The code prints out 2 4.', '', TRUE, FALSE, 312);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1602, 'The code prints out 3 4.', '', FALSE, FALSE, 312);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1603, 'The code prints out 4 2.', '', FALSE, FALSE, 312);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1604, 'The code prints out 4 4.', '', FALSE, FALSE, 312);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1605, 'The code prints 3 4 if you remove the constructor Create(int num).', '', TRUE, FALSE, 312);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1606, 'The code prints 4 4 if you remove the constructor Create(int num).', '', FALSE, FALSE, 312);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1607, 'The code prints 5 4 if you remove the constructor Create(int num).', '', FALSE, FALSE, 312);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1608, 'match', '', TRUE, FALSE, 313);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1609, 'not match', '', FALSE, FALSE, 313);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1610, 'Compiler error on line 8.', '', FALSE, FALSE, 313);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1611, 'Compiler error on line 10.', '', FALSE, FALSE, 313);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1612, 'Compiler error on line 11.', '', FALSE, FALSE, 313);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1613, 'A runtime exception is thrown.', '', FALSE, FALSE, 313);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1614, 'ok', '', FALSE, FALSE, 314);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1615, 'too high', '', FALSE, FALSE, 314);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1616, 'Compiler error on line 7.', '', TRUE, FALSE, 314);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1617, 'Compiler error on line 10.', '', FALSE, FALSE, 314);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1618, 'Compiler error on a different line.', '', FALSE, FALSE, 314);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1619, 'A runtime exception is thrown.', '', FALSE, FALSE, 314);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1620, 's -> s.isEmpty()', '', TRUE, TRUE, 315);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1621, 's -> {s.isEmpty()}', '', FALSE, TRUE, 315);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1622, 's -> {s.isEmpty();}', '', FALSE, TRUE, 315);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1623, 's -> {return s.isEmpty();}', '', TRUE, TRUE, 315);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1624, 'String s -> s.isEmpty()', '', FALSE, TRUE, 315);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1625, '(String s) -> s.isEmpty()', '', TRUE, TRUE, 315);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1626, 'caller((e) -> "Poof");', '', TRUE, TRUE, 316);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1627, 'caller((e) -> {"Poof"});', '', FALSE, TRUE, 316);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1628, 'caller((e) -> { String e = ""; "Poof" });', '', FALSE, TRUE, 316);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1629, 'caller((e) -> { String e = ""; return "Poof"; });', '', FALSE, TRUE, 316);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1630, 'caller((e) -> { String e = ""; return "Poof" });', '', FALSE, TRUE, 316);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1631, 'caller((e) -> { String f = ""; return "Poof"; });', '', TRUE, TRUE, 316);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1632, 'protected', '', FALSE, TRUE, 317);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1633, 'public', '', TRUE, TRUE, 317);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1634, 'static', '', FALSE, TRUE, 317);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1635, 'void', '', FALSE, TRUE, 317);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1636, 'abstract', '', FALSE, TRUE, 317);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1637, 'default', '', FALSE, TRUE, 317);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1638, 'Platypus', '', FALSE, FALSE, 318);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1639, 'Mammal', '', FALSE, FALSE, 318);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1640, 'PlatypusMammal', '', FALSE, FALSE, 318);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1641, 'MammalPlatypus', '', FALSE, FALSE, 318);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1642, 'The code will not compile because of line 8.', '', TRUE, FALSE, 318);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1643, 'The code will not compile because of line 11.', '', FALSE, FALSE, 318);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1644, 'Frog', '', TRUE, FALSE, 319);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1645, 'TurtleFrog', '', TRUE, FALSE, 319);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1646, 'BrazilianHornedFrog', '', FALSE, FALSE, 319);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1647, 'CanHop', '', TRUE, FALSE, 319);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1648, 'Object', '', TRUE, FALSE, 319);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1649, 'Long', '', FALSE, FALSE, 319);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1650, 'It will compile without issue.', '', FALSE, FALSE, 320);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1651, 'It fails to compile because the type of the exception the method throws is a subclass of the type of exception the parent method throws.', '', FALSE, FALSE, 320);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1652, 'It fails to compile because the return types are not covariant.', '', TRUE, FALSE, 320);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1653, 'It fails to compile because the method is protected in the parent class and public in the subclass.', '', FALSE, FALSE, 320);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1654, 'It fails to compile because of a static modifier mismatch between the two methods.', '', TRUE, FALSE, 320);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1655, 'private instance methods', '', TRUE, FALSE, 321);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1656, 'protected instance methods', '', FALSE, FALSE, 321);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1657, 'public instance methods', '', FALSE, FALSE, 321);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1658, 'static methods', '', TRUE, FALSE, 321);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1659, 'public variables', '', TRUE, FALSE, 321);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1660, 'private variables', '', TRUE, FALSE, 321);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1661, 'It compiles and runs without issue.', '', FALSE, FALSE, 322);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1662, 'The code will not compile because of line 2.', '', FALSE, FALSE, 322);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1663, 'The code will not compile because of line 4.', '', FALSE, FALSE, 322);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1664, 'The code will not compile because of line 7.', '', TRUE, FALSE, 322);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1665, 'It compiles but throws an exception at runtime.', '', FALSE, FALSE, 322);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1666, 'A reference to an object may be cast to a subclass of the object without an explicit cast.', '', FALSE, FALSE, 323);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1667, 'If a method takes a superclass of three objects, then any of those classes may be passed as a parameter to the method.', '', TRUE, FALSE, 323);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1668, 'A method that takes a parameter with type java.lang.Object will take any reference.', '', TRUE, FALSE, 323);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1669, 'All cast exceptions can be detected at compile-time.', '', FALSE, FALSE, 323);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1670, 'By defining a public instance method in the superclass, you guarantee that the specific method will be called in the parent class at runtime.', '', FALSE, FALSE, 323);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1671, 'It compiles and runs without issue.', '', FALSE, FALSE, 324);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1672, 'The code will not compile because of line 2.', '', FALSE, FALSE, 324);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1673, 'The code will not compile because of line 3.', '', FALSE, FALSE, 324);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1674, 'The code will not compile because of line 4.', '', FALSE, FALSE, 324);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1675, 'The code will not compile because of lines 2 and 3.', '', FALSE, FALSE, 324);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1676, 'The code will not compile because of lines 3 and 4.', '', TRUE, FALSE, 324);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1677, 'It compiles without issue.', '', TRUE, FALSE, 325);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1678, 'The code will not compile because of line 2.', '', FALSE, FALSE, 325);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1679, 'The code will not compile because of line 4.', '', FALSE, FALSE, 325);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1680, 'The code will not compile because of line 5.', '', FALSE, FALSE, 325);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1681, 'The code will not compile because of lines 2 and 5.', '', FALSE, FALSE, 325);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1682, 'The code will not compile because the class Falcon doesn’t implement the interface methods.', '', FALSE, FALSE, 325);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1683, 'All methods within them are assumed to be abstract.', '', FALSE, FALSE, 326);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1684, 'Both can contain public static final variables.', '', TRUE, FALSE, 326);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1685, 'Both can be extended using the extend keyword.', '', TRUE, FALSE, 326);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1686, 'Both can contain default methods.', '', FALSE, FALSE, 326);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1687, 'Both can contain static methods.', '', TRUE, FALSE, 326);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1688, 'Neither can be instantiated directly.', '', TRUE, FALSE, 326);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1689, 'Both inherit java.lang.Object.', '', FALSE, FALSE, 326);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1690, 'public', '', TRUE, FALSE, 327);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1691, 'protected', '', FALSE, FALSE, 327);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1692, 'private', '', FALSE, FALSE, 327);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1693, 'static', '', TRUE, FALSE, 327);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1694, 'final', '', TRUE, FALSE, 327);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1695, 'abstract', '', FALSE, FALSE, 327);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1696, 'true', '', FALSE, FALSE, 328);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1697, 'false', '', TRUE, FALSE, 328);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1698, 'The code will not compile because of line 2.', '', FALSE, FALSE, 328);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1699, 'The code will not compile because of line 5.', '', FALSE, FALSE, 328);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1700, 'The code will not compile because of line 7.', '', FALSE, FALSE, 328);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1701, 'The code will not compile because of line 8.', '', FALSE, FALSE, 328);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1702, 'SpiderArthropod', '', TRUE, FALSE, 329);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1703, 'ArthropodSpider', '', FALSE, FALSE, 329);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1704, 'SpiderSpider', '', FALSE, FALSE, 329);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1705, 'ArthropodArthropod', '', FALSE, FALSE, 329);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1706, 'The code will not compile because of line 5.', '', FALSE, FALSE, 329);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1707, 'The code will not compile because of line 9.', '', FALSE, FALSE, 329);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1708, 'The CanBark interface doesn’t compile.', '', FALSE, FALSE, 330);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1709, 'A class that implements HasVocalCords must override the makeSound() method.', '', FALSE, FALSE, 330);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1710, 'A class that implements CanBark inherits both the makeSound() and bark() methods.', '', TRUE, FALSE, 330);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1711, 'A class that implements CanBark only inherits the bark() method.', '', FALSE, FALSE, 330);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1712, 'An interface cannot extend another interface.', '', FALSE, FALSE, 330);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1713, 'A concrete subclass can be declared as abstract.', '', FALSE, FALSE, 331);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1714, 'A concrete subclass must implement all inherited abstract methods.', '', TRUE, FALSE, 331);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1715, 'A concrete subclass must implement all methods defined in an inherited interface.', '', FALSE, FALSE, 331);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1716, 'A concrete subclass cannot be marked as final.', '', FALSE, FALSE, 331);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1717, 'Abstract methods cannot be overridden by a concrete subclass.', '', FALSE, FALSE, 331);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1718, 'Reptile laying eggs', '', FALSE, FALSE, 332);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1719, 'Lizard laying eggs', '', FALSE, FALSE, 332);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1720, 'The code will not compile because of line 4.', '', FALSE, FALSE, 332);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1721, 'The code will not compile because of line 5.', '', FALSE, FALSE, 332);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1722, 'The code will not compile because of line 9.', '', TRUE, FALSE, 332);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1723, 'Orca diving', '', FALSE, FALSE, 333);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1724, 'The code will not compile because of line 2.', '', TRUE, FALSE, 333);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1725, 'The code will not compile because of line 8.', '', FALSE, FALSE, 333);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1726, 'The code will not compile because of line 9.', '', FALSE, FALSE, 333);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1727, 'The output cannot be determined from the code provided.', '', FALSE, FALSE, 333);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1728, '2', '', FALSE, FALSE, 334);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1729, '4', '', FALSE, FALSE, 334);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1730, '6', '', FALSE, FALSE, 334);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1731, 'The code will not compile because of line 5.', '', FALSE, FALSE, 334);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1732, 'The code will not compile because of line 6.', '', TRUE, FALSE, 334);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1733, 'The code will not compile because of line 8.', '', FALSE, FALSE, 334);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1734, 'new Cobra()', '', TRUE, FALSE, 335);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1735, 'new GardenSnake()', '', FALSE, FALSE, 335);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1736, 'new Snake()', '', TRUE, FALSE, 335);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1737, 'new Object()', '', FALSE, FALSE, 335);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1738, 'new String("Snake")', '', FALSE, FALSE, 335);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1739, 'null', '', TRUE, FALSE, 335);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1740, 'Bird is flying', '', TRUE, FALSE, 336);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1741, 'Pelican is flying', '', FALSE, FALSE, 336);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1742, 'The code will not compile because of line 4.', '', FALSE, FALSE, 336);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1743, 'The code will not compile because of line 5.', '', FALSE, FALSE, 336);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1744, 'The code will not compile because of line 9.', '', FALSE, FALSE, 336);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1745, 'Runtime exceptions are the same thing as checked exceptions.', '', FALSE, FALSE, 337);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1746, 'Runtime exceptions are the same thing as unchecked exceptions.', '', TRUE, FALSE, 337);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1747, 'You can declare only checked exceptions.', '', FALSE, FALSE, 337);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1748, 'You can declare only unchecked exceptions.', '', FALSE, FALSE, 337);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1749, 'You can handle only Exception subclasses.', '', FALSE, FALSE, 337);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1750, 'On line 7, fill in throw', '', FALSE, FALSE, 338);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1751, 'On line 7, fill in throws', '', TRUE, FALSE, 338);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1752, 'On line 8, fill in throw', '', FALSE, FALSE, 338);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1753, 'On line 8, fill in throw new', '', TRUE, FALSE, 338);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1754, 'On line 8, fill in throws', '', FALSE, FALSE, 338);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1755, 'On line 8, fill in throws new', '', FALSE, FALSE, 338);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1756, 'Never.', '', FALSE, FALSE, 339);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1757, 'When the program code doesn’t terminate on its own.', '', FALSE, FALSE, 339);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1758, 'When there are no catch blocks in a try statement.', '', TRUE, FALSE, 339);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1759, 'When there is exactly one catch block in a try statement.', '', FALSE, FALSE, 339);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1760, 'When there are two or more catch blocks in a try statement.', '', FALSE, FALSE, 339);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1761, 'ArrayIndexOutOfBoundsException', '', FALSE, FALSE, 340);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1762, 'ClassCastException', '', TRUE, FALSE, 340);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1763, 'IllegalArgumentException', '', FALSE, FALSE, 340);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1764, 'NumberFormatException', '', FALSE, FALSE, 340);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1765, 'None of the above.', '', FALSE, FALSE, 340);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1766, 'ArrayIndexOutOfBoundsException', '', TRUE, FALSE, 341);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1767, 'ExceptionInInitializerError', '', TRUE, FALSE, 341);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1768, 'java.io.IOException', '', FALSE, FALSE, 341);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1769, 'NullPointerException', '', TRUE, FALSE, 341);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1770, 'NumberFormatException', '', FALSE, FALSE, 341);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1771, 'It will not compile.', '', FALSE, FALSE, 342);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1772, 'It will not run.', '', FALSE, FALSE, 342);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1773, 'It will run and throw an ArithmeticException.', '', TRUE, FALSE, 342);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1774, 'It will run and throw an IllegalArgumentException.', '', FALSE, FALSE, 342);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1775, 'None of the above.', '', FALSE, FALSE, 342);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1776, 'AE', '', FALSE, FALSE, 343);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1777, 'AEBCD', '', FALSE, FALSE, 343);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1778, 'AEC', '', TRUE, FALSE, 343);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1779, 'AECD', '', FALSE, FALSE, 343);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1780, 'No output appears other than the stack trace.', '', FALSE, FALSE, 343);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1781, '-1', '', FALSE, FALSE, 344);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1782, '0', '', FALSE, FALSE, 344);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1783, 'done-1', '', FALSE, FALSE, 344);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1784, 'done0', '', FALSE, FALSE, 344);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1785, 'The code does not compile.', '', TRUE, FALSE, 344);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1786, 'An uncaught exception is thrown.', '', FALSE, FALSE, 344);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1787, 'Starting up', '', FALSE, FALSE, 345);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1788, 'Starting up Problem', '', TRUE, FALSE, 345);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1789, 'Starting up Problem Shutting down', '', FALSE, FALSE, 345);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1790, 'Starting up Shutting down', '', FALSE, FALSE, 345);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1791, 'The code does not compile.', '', FALSE, FALSE, 345);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1792, 'An uncaught exception is thrown.', '', FALSE, FALSE, 345);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1793, '12', '', FALSE, FALSE, 346);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1794, '1234', '', FALSE, FALSE, 346);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1795, '1235', '', FALSE, FALSE, 346);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1796, '124', '', FALSE, FALSE, 346);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1797, '1245', '', TRUE, FALSE, 346);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1798, 'The code does not compile.', '', FALSE, FALSE, 346);
INSERT INTO ANSWERS(ID, ANSWER, EXPLANATION, ISCORRECT, ISCODE, QUESTION_ID) VALUES (1799, 'An uncaught exception is thrown.', '', FALSE, FALSE, 346);

CREATE TABLE ATTEMPTS( 
    ID bigint NOT NULL auto_increment, 
	USER_ID bigint NOT NULL,
    QUESTION_ID bigint NOT NULL,
	ISCORRECT BOOLEAN NOT NULL,
	CREATED TIMESTAMP DEFAULT current_timestamp,
	PRIMARY KEY(ID),
	FOREIGN KEY(QUESTION_ID) REFERENCES QUESTIONS(ID),
	FOREIGN KEY(USER_ID) REFERENCES auth.users(id)
) default character set utf8 collate utf8_unicode_ci;